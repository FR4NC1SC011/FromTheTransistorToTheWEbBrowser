{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1","program":"/home/fco/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","bit_field","/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=0fd61a375f4152a8","-C","extra-filename=-0fd61a375f4152a8","--out-dir","/home/fco/Desktop/FromTheTransistorToTheWEbBrowser/FromTheTransistorToTheWebBrowser/rust-6502/target/rls/debug/deps","-L","dependency=/home/fco/Desktop/FromTheTransistorToTheWEbBrowser/FromTheTransistorToTheWebBrowser/rust-6502/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/fco/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/fco/Desktop/FromTheTransistorToTheWEbBrowser/FromTheTransistorToTheWebBrowser/rust-6502/target/rls/debug/deps/libbit_field-0fd61a375f4152a8.rmeta"},"prelude":{"crate_id":{"name":"bit_field","disambiguator":[5703700851883592090,16198550011235370987]},"crate_root":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src","external_crates":[{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[9461532395471723626,17649752992216879242]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[13102141027849022754,10844956084955862736]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[10802439125609973726,12056872925128751599]}}],"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":0,"byte_end":12136,"line_start":1,"line_end":366,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":0,"byte_end":12136,"line_start":1,"line_end":366,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":22},{"krate":0,"index":43},{"krate":0,"index":51},{"krate":0,"index":59},{"krate":0,"index":67},{"krate":0,"index":75},{"krate":0,"index":83},{"krate":0,"index":91},{"krate":0,"index":99},{"krate":0,"index":107},{"krate":0,"index":115},{"krate":0,"index":123},{"krate":0,"index":131},{"krate":0,"index":32},{"krate":0,"index":41}],"decl_id":null,"docs":" Provides the abstraction of a bit field, which allows for bit-level update and retrieval\n operations.\n","sig":null,"attributes":[{"value":"/ Provides the abstraction of a bit field, which allows for bit-level update and retrieval","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":0,"byte_end":92,"line_start":1,"line_end":1,"column_start":1,"column_end":93}},{"value":"/ operations.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":93,"byte_end":108,"line_start":2,"line_end":2,"column_start":1,"column_end":16}},{"value":"no_std","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":110,"byte_end":120,"line_start":4,"line_end":4,"column_start":1,"column_end":11}}]},{"kind":"Trait","id":{"krate":0,"index":14},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":309,"byte_end":317,"line_start":13,"line_end":13,"column_start":11,"column_end":19},"name":"BitField","qualname":"::BitField","value":"BitField","parent":null,"children":[{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":19},{"krate":0,"index":20}],"decl_id":null,"docs":" A generic trait which provides methods for extracting and setting specific bits or ranges of\n bits.\n","sig":null,"attributes":[{"value":"/ A generic trait which provides methods for extracting and setting specific bits or ranges of","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":192,"byte_end":288,"line_start":11,"line_end":11,"column_start":1,"column_end":97}},{"value":"/ bits.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":289,"byte_end":298,"line_start":12,"line_end":12,"column_start":1,"column_end":10}}]},{"kind":"Const","id":{"krate":0,"index":15},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":535,"byte_end":545,"line_start":22,"line_end":22,"column_start":11,"column_end":21},"name":"BIT_LENGTH","qualname":"::BitField::BIT_LENGTH","value":"usize","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" The number of bits in this bit field.","sig":null,"attributes":[{"value":"/ The number of bits in this bit field.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":324,"byte_end":365,"line_start":14,"line_end":14,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":370,"byte_end":373,"line_start":15,"line_end":15,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":378,"byte_end":389,"line_start":16,"line_end":16,"column_start":5,"column_end":16}},{"value":"/ use bit_field::BitField;","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":394,"byte_end":422,"line_start":17,"line_end":17,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":427,"byte_end":430,"line_start":18,"line_end":18,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(u32::BIT_LENGTH, 32);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":435,"byte_end":471,"line_start":19,"line_end":19,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(u64::BIT_LENGTH, 64);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":476,"byte_end":512,"line_start":20,"line_end":20,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":517,"byte_end":524,"line_start":21,"line_end":21,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":16},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":1044,"byte_end":1051,"line_start":39,"line_end":39,"column_start":8,"column_end":15},"name":"get_bit","qualname":"::BitField::get_bit","value":"pub fn get_bit(&Self, usize) -> bool","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" Obtains the bit at the index `bit`; note that index 0 is the least significant bit, while\n index `length() - 1` is the most significant bit.","sig":null,"attributes":[{"value":"/ Obtains the bit at the index `bit`; note that index 0 is the least significant bit, while","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":559,"byte_end":652,"line_start":24,"line_end":24,"column_start":5,"column_end":98}},{"value":"/ index `length() - 1` is the most significant bit.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":657,"byte_end":710,"line_start":25,"line_end":25,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":715,"byte_end":718,"line_start":26,"line_end":26,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":723,"byte_end":734,"line_start":27,"line_end":27,"column_start":5,"column_end":16}},{"value":"/ use bit_field::BitField;","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":739,"byte_end":767,"line_start":28,"line_end":28,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":772,"byte_end":775,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ let value: u32 = 0b110101;","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":780,"byte_end":810,"line_start":30,"line_end":30,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":815,"byte_end":818,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(value.get_bit(1), false);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":823,"byte_end":863,"line_start":32,"line_end":32,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(value.get_bit(2), true);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":868,"byte_end":907,"line_start":33,"line_end":33,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":912,"byte_end":919,"line_start":34,"line_end":34,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":924,"byte_end":927,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ ## Panics","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":932,"byte_end":945,"line_start":36,"line_end":36,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":950,"byte_end":953,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ This method will panic if the bit index is out of bounds of the bit field.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":958,"byte_end":1036,"line_start":38,"line_end":38,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":1743,"byte_end":1751,"line_start":59,"line_end":59,"column_start":8,"column_end":16},"name":"get_bits","qualname":"::BitField::get_bits","value":"pub fn get_bits<T: RangeBounds<usize>>(&Self, T) -> Self","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" Obtains the range of bits specified by `range`; note that index 0 is the least significant\n bit, while index `length() - 1` is the most significant bit.","sig":null,"attributes":[{"value":"/ Obtains the range of bits specified by `range`; note that index 0 is the least significant","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":1085,"byte_end":1179,"line_start":41,"line_end":41,"column_start":5,"column_end":99}},{"value":"/ bit, while index `length() - 1` is the most significant bit.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":1184,"byte_end":1248,"line_start":42,"line_end":42,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":1253,"byte_end":1256,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":1261,"byte_end":1272,"line_start":44,"line_end":44,"column_start":5,"column_end":16}},{"value":"/ use bit_field::BitField;","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":1277,"byte_end":1305,"line_start":45,"line_end":45,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":1310,"byte_end":1313,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ let value: u32 = 0b110101;","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":1318,"byte_end":1348,"line_start":47,"line_end":47,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":1353,"byte_end":1356,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(value.get_bits(0..3), 0b101);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":1361,"byte_end":1405,"line_start":49,"line_end":49,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(value.get_bits(2..6), 0b1101);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":1410,"byte_end":1455,"line_start":50,"line_end":50,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(value.get_bits(..), 0b110101);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":1460,"byte_end":1505,"line_start":51,"line_end":51,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(value.get_bits(3..=3), value.get_bit(3) as u32);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":1510,"byte_end":1573,"line_start":52,"line_end":52,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":1578,"byte_end":1585,"line_start":53,"line_end":53,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":1590,"byte_end":1593,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ ## Panics","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":1598,"byte_end":1611,"line_start":55,"line_end":55,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":1616,"byte_end":1619,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ This method will panic if the start or end indexes of the range are out of bounds of the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":1624,"byte_end":1716,"line_start":57,"line_end":57,"column_start":5,"column_end":97}},{"value":"/ bit field.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":1721,"byte_end":1735,"line_start":58,"line_end":58,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":2505,"byte_end":2512,"line_start":83,"line_end":83,"column_start":8,"column_end":15},"name":"set_bit","qualname":"::BitField::set_bit","value":"pub fn set_bit(&mut Self, usize, bool) -> &mut Self","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" Sets the bit at the index `bit` to the value `value` (where true means a value of '1' and\n false means a value of '0'); note that index 0 is the least significant bit, while index\n `length() - 1` is the most significant bit.","sig":null,"attributes":[{"value":"/ Sets the bit at the index `bit` to the value `value` (where true means a value of '1' and","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":1806,"byte_end":1899,"line_start":61,"line_end":61,"column_start":5,"column_end":98}},{"value":"/ false means a value of '0'); note that index 0 is the least significant bit, while index","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":1904,"byte_end":1996,"line_start":62,"line_end":62,"column_start":5,"column_end":97}},{"value":"/ `length() - 1` is the most significant bit.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":2001,"byte_end":2048,"line_start":63,"line_end":63,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":2053,"byte_end":2056,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":2061,"byte_end":2072,"line_start":65,"line_end":65,"column_start":5,"column_end":16}},{"value":"/ use bit_field::BitField;","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":2077,"byte_end":2105,"line_start":66,"line_end":66,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":2110,"byte_end":2113,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ let mut value = 0u32;","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":2118,"byte_end":2143,"line_start":68,"line_end":68,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":2148,"byte_end":2151,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ value.set_bit(1, true);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":2156,"byte_end":2183,"line_start":70,"line_end":70,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(value, 2u32);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":2188,"byte_end":2216,"line_start":71,"line_end":71,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":2221,"byte_end":2224,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ value.set_bit(3, true);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":2229,"byte_end":2256,"line_start":73,"line_end":73,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(value, 10u32);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":2261,"byte_end":2290,"line_start":74,"line_end":74,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":2295,"byte_end":2298,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ value.set_bit(1, false);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":2303,"byte_end":2331,"line_start":76,"line_end":76,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(value, 8u32);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":2336,"byte_end":2364,"line_start":77,"line_end":77,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":2369,"byte_end":2376,"line_start":78,"line_end":78,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":2381,"byte_end":2384,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ ## Panics","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":2389,"byte_end":2402,"line_start":80,"line_end":80,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":2407,"byte_end":2410,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ This method will panic if the bit index is out of the bounds of the bit field.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":2415,"byte_end":2497,"line_start":82,"line_end":82,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":3362,"byte_end":3370,"line_start":108,"line_end":108,"column_start":8,"column_end":16},"name":"set_bits","qualname":"::BitField::set_bits","value":"pub fn set_bits<T: RangeBounds<usize>>(&mut Self, T, Self) -> &mut Self","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" Sets the range of bits defined by the range `range` to the lower bits of `value`; to be\n specific, if the range is N bits long, the N lower bits of `value` will be used; if any of\n the other bits in `value` are set to 1, this function will panic.","sig":null,"attributes":[{"value":"/ Sets the range of bits defined by the range `range` to the lower bits of `value`; to be","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":2568,"byte_end":2659,"line_start":85,"line_end":85,"column_start":5,"column_end":96}},{"value":"/ specific, if the range is N bits long, the N lower bits of `value` will be used; if any of","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":2664,"byte_end":2758,"line_start":86,"line_end":86,"column_start":5,"column_end":99}},{"value":"/ the other bits in `value` are set to 1, this function will panic.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":2763,"byte_end":2832,"line_start":87,"line_end":87,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":2837,"byte_end":2840,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":2845,"byte_end":2856,"line_start":89,"line_end":89,"column_start":5,"column_end":16}},{"value":"/ use bit_field::BitField;","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":2861,"byte_end":2889,"line_start":90,"line_end":90,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":2894,"byte_end":2897,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ let mut value = 0u32;","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":2902,"byte_end":2927,"line_start":92,"line_end":92,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":2932,"byte_end":2935,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ value.set_bits(0..2, 0b11);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":2940,"byte_end":2971,"line_start":94,"line_end":94,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(value, 0b11);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":2976,"byte_end":3004,"line_start":95,"line_end":95,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":3009,"byte_end":3012,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ value.set_bits(2..=3, 0b11);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":3017,"byte_end":3049,"line_start":97,"line_end":97,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(value, 0b1111);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":3054,"byte_end":3084,"line_start":98,"line_end":98,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":3089,"byte_end":3092,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ value.set_bits(..4, 0b1010);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":3097,"byte_end":3129,"line_start":100,"line_end":100,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(value, 0b1010);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":3134,"byte_end":3164,"line_start":101,"line_end":101,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":3169,"byte_end":3176,"line_start":102,"line_end":102,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":3181,"byte_end":3184,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ ## Panics","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":3189,"byte_end":3202,"line_start":104,"line_end":104,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":3207,"byte_end":3210,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ This method will panic if the range is out of bounds of the bit field, or if there are `1`s","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":3215,"byte_end":3310,"line_start":106,"line_end":106,"column_start":5,"column_end":100}},{"value":"/ not in the lower N bits of `value`.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":3315,"byte_end":3354,"line_start":107,"line_end":107,"column_start":5,"column_end":44}}]},{"kind":"Trait","id":{"krate":0,"index":22},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":3455,"byte_end":3463,"line_start":111,"line_end":111,"column_start":11,"column_end":19},"name":"BitArray","qualname":"::BitArray","value":"BitArray<T: BitField>","parent":null,"children":[{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":29}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":3734,"byte_end":3744,"line_start":120,"line_end":120,"column_start":8,"column_end":18},"name":"bit_length","qualname":"::BitArray::bit_length","value":"pub fn bit_length(&Self) -> usize","parent":{"krate":0,"index":22},"children":[],"decl_id":null,"docs":" Returns the length, eg number of bits, in this bit array.","sig":null,"attributes":[{"value":"/ Returns the length, eg number of bits, in this bit array.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":3483,"byte_end":3544,"line_start":112,"line_end":112,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":3549,"byte_end":3552,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":3557,"byte_end":3568,"line_start":114,"line_end":114,"column_start":5,"column_end":16}},{"value":"/ use bit_field::BitArray;","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":3573,"byte_end":3601,"line_start":115,"line_end":115,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":3606,"byte_end":3609,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ assert_eq!([0u8, 4u8, 8u8].bit_length(), 24);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":3614,"byte_end":3663,"line_start":117,"line_end":117,"column_start":5,"column_end":54}},{"value":"/ assert_eq!([0u32, 5u32].bit_length(), 64);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":3668,"byte_end":3714,"line_start":118,"line_end":118,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":3719,"byte_end":3726,"line_start":119,"line_end":119,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":4259,"byte_end":4266,"line_start":137,"line_end":137,"column_start":8,"column_end":15},"name":"get_bit","qualname":"::BitArray::get_bit","value":"pub fn get_bit(&Self, usize) -> bool","parent":{"krate":0,"index":22},"children":[],"decl_id":null,"docs":" Obtains the bit at the index `bit`; note that index 0 is the least significant bit, while\n index `length() - 1` is the most significant bit.","sig":null,"attributes":[{"value":"/ Obtains the bit at the index `bit`; note that index 0 is the least significant bit, while","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":3767,"byte_end":3860,"line_start":122,"line_end":122,"column_start":5,"column_end":98}},{"value":"/ index `length() - 1` is the most significant bit.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":3865,"byte_end":3918,"line_start":123,"line_end":123,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":3923,"byte_end":3926,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":3931,"byte_end":3942,"line_start":125,"line_end":125,"column_start":5,"column_end":16}},{"value":"/ use bit_field::BitArray;","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":3947,"byte_end":3975,"line_start":126,"line_end":126,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":3980,"byte_end":3983,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ let value: [u32; 1] = [0b110101];","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":3988,"byte_end":4025,"line_start":128,"line_end":128,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":4030,"byte_end":4033,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(value.get_bit(1), false);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":4038,"byte_end":4078,"line_start":130,"line_end":130,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(value.get_bit(2), true);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":4083,"byte_end":4122,"line_start":131,"line_end":131,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":4127,"byte_end":4134,"line_start":132,"line_end":132,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":4139,"byte_end":4142,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ ## Panics","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":4147,"byte_end":4160,"line_start":134,"line_end":134,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":4165,"byte_end":4168,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ This method will panic if the bit index is out of bounds of the bit array.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":4173,"byte_end":4251,"line_start":136,"line_end":136,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":5087,"byte_end":5095,"line_start":158,"line_end":158,"column_start":8,"column_end":16},"name":"get_bits","qualname":"::BitArray::get_bits","value":"pub fn get_bits<U: RangeBounds<usize>>(&Self, U) -> T","parent":{"krate":0,"index":22},"children":[],"decl_id":null,"docs":" Obtains the range of bits specified by `range`; note that index 0 is the least significant\n bit, while index `length() - 1` is the most significant bit.","sig":null,"attributes":[{"value":"/ Obtains the range of bits specified by `range`; note that index 0 is the least significant","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":4300,"byte_end":4394,"line_start":139,"line_end":139,"column_start":5,"column_end":99}},{"value":"/ bit, while index `length() - 1` is the most significant bit.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":4399,"byte_end":4463,"line_start":140,"line_end":140,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":4468,"byte_end":4471,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":4476,"byte_end":4487,"line_start":142,"line_end":142,"column_start":5,"column_end":16}},{"value":"/ use bit_field::BitArray;","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":4492,"byte_end":4520,"line_start":143,"line_end":143,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":4525,"byte_end":4528,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ let value: [u32; 2] = [0b110101, 0b11];","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":4533,"byte_end":4576,"line_start":145,"line_end":145,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":4581,"byte_end":4584,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(value.get_bits(0..3), 0b101);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":4589,"byte_end":4633,"line_start":147,"line_end":147,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(value.get_bits(..6), 0b110101);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":4638,"byte_end":4684,"line_start":148,"line_end":148,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(value.get_bits(31..33), 0b10);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":4689,"byte_end":4734,"line_start":149,"line_end":149,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(value.get_bits(5..=32), 0b1_0000_0000_0000_0000_0000_0000_001);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":4739,"byte_end":4817,"line_start":150,"line_end":150,"column_start":5,"column_end":83}},{"value":"/ assert_eq!(value.get_bits(34..), 0);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":4822,"byte_end":4862,"line_start":151,"line_end":151,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":4867,"byte_end":4874,"line_start":152,"line_end":152,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":4879,"byte_end":4882,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ ## Panics","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":4887,"byte_end":4900,"line_start":154,"line_end":154,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":4905,"byte_end":4908,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ This method will panic if the start or end indexes of the range are out of bounds of the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":4913,"byte_end":5005,"line_start":156,"line_end":156,"column_start":5,"column_end":97}},{"value":"/ bit array, or if the range can't be contained by the bit field T.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":5010,"byte_end":5079,"line_start":157,"line_end":157,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":5854,"byte_end":5861,"line_start":182,"line_end":182,"column_start":8,"column_end":15},"name":"set_bit","qualname":"::BitArray::set_bit","value":"pub fn set_bit(&mut Self, usize, bool)","parent":{"krate":0,"index":22},"children":[],"decl_id":null,"docs":" Sets the bit at the index `bit` to the value `value` (where true means a value of '1' and\n false means a value of '0'); note that index 0 is the least significant bit, while index\n `length() - 1` is the most significant bit.","sig":null,"attributes":[{"value":"/ Sets the bit at the index `bit` to the value `value` (where true means a value of '1' and","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":5147,"byte_end":5240,"line_start":160,"line_end":160,"column_start":5,"column_end":98}},{"value":"/ false means a value of '0'); note that index 0 is the least significant bit, while index","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":5245,"byte_end":5337,"line_start":161,"line_end":161,"column_start":5,"column_end":97}},{"value":"/ `length() - 1` is the most significant bit.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":5342,"byte_end":5389,"line_start":162,"line_end":162,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":5394,"byte_end":5397,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":5402,"byte_end":5413,"line_start":164,"line_end":164,"column_start":5,"column_end":16}},{"value":"/ use bit_field::BitArray;","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":5418,"byte_end":5446,"line_start":165,"line_end":165,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":5451,"byte_end":5454,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ let mut value = [0u32];","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":5459,"byte_end":5486,"line_start":167,"line_end":167,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":5491,"byte_end":5494,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ value.set_bit(1, true);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":5499,"byte_end":5526,"line_start":169,"line_end":169,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(value, [2u32]);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":5531,"byte_end":5561,"line_start":170,"line_end":170,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":5566,"byte_end":5569,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ value.set_bit(3, true);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":5574,"byte_end":5601,"line_start":172,"line_end":172,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(value, [10u32]);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":5606,"byte_end":5637,"line_start":173,"line_end":173,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":5642,"byte_end":5645,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ value.set_bit(1, false);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":5650,"byte_end":5678,"line_start":175,"line_end":175,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(value, [8u32]);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":5683,"byte_end":5713,"line_start":176,"line_end":176,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":5718,"byte_end":5725,"line_start":177,"line_end":177,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":5730,"byte_end":5733,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ ## Panics","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":5738,"byte_end":5751,"line_start":179,"line_end":179,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":5756,"byte_end":5759,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ This method will panic if the bit index is out of the bounds of the bit array.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":5764,"byte_end":5846,"line_start":181,"line_end":181,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":6706,"byte_end":6714,"line_start":205,"line_end":205,"column_start":8,"column_end":16},"name":"set_bits","qualname":"::BitArray::set_bits","value":"pub fn set_bits<U: RangeBounds<usize>>(&mut Self, U, T)","parent":{"krate":0,"index":22},"children":[],"decl_id":null,"docs":" Sets the range of bits defined by the range `range` to the lower bits of `value`; to be\n specific, if the range is N bits long, the N lower bits of `value` will be used; if any of\n the other bits in `value` are set to 1, this function will panic.","sig":null,"attributes":[{"value":"/ Sets the range of bits defined by the range `range` to the lower bits of `value`; to be","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":5904,"byte_end":5995,"line_start":184,"line_end":184,"column_start":5,"column_end":96}},{"value":"/ specific, if the range is N bits long, the N lower bits of `value` will be used; if any of","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":6000,"byte_end":6094,"line_start":185,"line_end":185,"column_start":5,"column_end":99}},{"value":"/ the other bits in `value` are set to 1, this function will panic.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":6099,"byte_end":6168,"line_start":186,"line_end":186,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":6173,"byte_end":6176,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":6181,"byte_end":6192,"line_start":188,"line_end":188,"column_start":5,"column_end":16}},{"value":"/ use bit_field::BitArray;","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":6197,"byte_end":6225,"line_start":189,"line_end":189,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":6230,"byte_end":6233,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ let mut value = [0u32, 0u32];","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":6238,"byte_end":6271,"line_start":191,"line_end":191,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":6276,"byte_end":6279,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ value.set_bits(0..2, 0b11);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":6284,"byte_end":6315,"line_start":193,"line_end":193,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(value, [0b11, 0u32]);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":6320,"byte_end":6356,"line_start":194,"line_end":194,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":6361,"byte_end":6364,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ value.set_bits(31..35, 0b1010);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":6369,"byte_end":6404,"line_start":196,"line_end":196,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(value, [0x0003, 0b101]);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":6409,"byte_end":6448,"line_start":197,"line_end":197,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":6453,"byte_end":6460,"line_start":198,"line_end":198,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":6465,"byte_end":6468,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ ## Panics","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":6473,"byte_end":6486,"line_start":200,"line_end":200,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":6491,"byte_end":6494,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ This method will panic if the range is out of bounds of the bit array,","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":6499,"byte_end":6573,"line_start":202,"line_end":202,"column_start":5,"column_end":79}},{"value":"/ if the range can't be contained by the bit field T, or if there are `1`s","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":6578,"byte_end":6654,"line_start":203,"line_end":203,"column_start":5,"column_end":81}},{"value":"/ not in the lower N bits of `value`.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/bit_field-0.10.1/src/lib.rs","byte_start":6659,"byte_end":6698,"line_start":204,"line_end":204,"column_start":5,"column_end":44}}]}],"impls":[],"refs":[],"macro_refs":[],"relations":[]}