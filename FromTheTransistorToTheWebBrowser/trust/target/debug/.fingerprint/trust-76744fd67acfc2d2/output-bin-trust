{"message":"unreachable expression","code":{"code":"unreachable_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/fco/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs","byte_start":513,"byte_end":543,"line_start":18,"line_end":18,"column_start":9,"column_end":39,"is_primary":true,"text":[{"text":"        $crate::panicking::panic($msg)","highlight_start":9,"highlight_end":39}],"label":"unreachable expression","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/fco/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs","byte_start":22756,"byte_end":22789,"line_start":669,"line_end":669,"column_start":12,"column_end":45,"is_primary":false,"text":[{"text":"    () => ($crate::panic!(\"not implemented\"));","highlight_start":12,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/fco/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs","byte_start":22756,"byte_end":22789,"line_start":669,"line_end":669,"column_start":12,"column_end":45,"is_primary":false,"text":[{"text":"    () => ($crate::panic!(\"not implemented\"));","highlight_start":12,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/tcp.rs","byte_start":925,"byte_end":941,"line_start":40,"line_end":40,"column_start":21,"column_end":37,"is_primary":false,"text":[{"text":"                    unimplemented!(),","highlight_start":21,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"unimplemented!","def_site_span":{"file_name":"/home/fco/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs","byte_start":22716,"byte_end":22887,"line_start":668,"line_end":671,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! unimplemented {","highlight_start":1,"highlight_end":1},{"text":"    () => ($crate::panic!(\"not implemented\"));","highlight_start":1,"highlight_end":1},{"text":"    ($($arg:tt)+) => ($crate::panic!(\"not implemented: {}\", $crate::format_args!($($arg)+)));","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::panic!","def_site_span":{"file_name":"/home/fco/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs","byte_start":221,"byte_end":436,"line_start":7,"line_end":13,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! panic {","highlight_start":1,"highlight_end":21},{"text":"    // Expands to either `$crate::panic::panic_2015` or `$crate::panic::panic_2021`","highlight_start":1,"highlight_end":84},{"text":"    // depending on the edition of the caller.","highlight_start":1,"highlight_end":47},{"text":"    ($($arg:tt)*) => {","highlight_start":1,"highlight_end":23},{"text":"        /* compiler built-in */","highlight_start":1,"highlight_end":32},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::panic::panic_2015!","def_site_span":{"file_name":"/home/fco/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs","byte_start":382,"byte_end":745,"line_start":13,"line_end":26,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub macro panic_2015 {","highlight_start":1,"highlight_end":1},{"text":"    () => (","highlight_start":1,"highlight_end":1},{"text":"        $crate::panicking::panic(\"explicit panic\")","highlight_start":1,"highlight_end":1},{"text":"    ),","highlight_start":1,"highlight_end":1},{"text":"    ($msg:literal $(,)?) => (","highlight_start":1,"highlight_end":1},{"text":"        $crate::panicking::panic($msg)","highlight_start":1,"highlight_end":1},{"text":"    ),","highlight_start":1,"highlight_end":1},{"text":"    ($msg:expr $(,)?) => (","highlight_start":1,"highlight_end":1},{"text":"        $crate::panicking::panic_str($msg)","highlight_start":1,"highlight_end":1},{"text":"    ),","highlight_start":1,"highlight_end":1},{"text":"    ($fmt:expr, $($arg:tt)+) => (","highlight_start":1,"highlight_end":1},{"text":"        $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+))","highlight_start":1,"highlight_end":1},{"text":"    ),","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/home/fco/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs","byte_start":513,"byte_end":543,"line_start":18,"line_end":18,"column_start":9,"column_end":39,"is_primary":false,"text":[{"text":"        $crate::panicking::panic($msg)","highlight_start":9,"highlight_end":39}],"label":"any code following this expression is unreachable","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/fco/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs","byte_start":22756,"byte_end":22789,"line_start":669,"line_end":669,"column_start":12,"column_end":45,"is_primary":false,"text":[{"text":"    () => ($crate::panic!(\"not implemented\"));","highlight_start":12,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/fco/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs","byte_start":22756,"byte_end":22789,"line_start":669,"line_end":669,"column_start":12,"column_end":45,"is_primary":false,"text":[{"text":"    () => ($crate::panic!(\"not implemented\"));","highlight_start":12,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/tcp.rs","byte_start":887,"byte_end":903,"line_start":39,"line_end":39,"column_start":21,"column_end":37,"is_primary":false,"text":[{"text":"                    unimplemented!(),","highlight_start":21,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"unimplemented!","def_site_span":{"file_name":"/home/fco/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs","byte_start":22716,"byte_end":22887,"line_start":668,"line_end":671,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! unimplemented {","highlight_start":1,"highlight_end":29},{"text":"    () => ($crate::panic!(\"not implemented\"));","highlight_start":1,"highlight_end":47},{"text":"    ($($arg:tt)+) => ($crate::panic!(\"not implemented: {}\", $crate::format_args!($($arg)+)));","highlight_start":1,"highlight_end":94},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::panic!","def_site_span":{"file_name":"/home/fco/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs","byte_start":221,"byte_end":436,"line_start":7,"line_end":13,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! panic {","highlight_start":1,"highlight_end":21},{"text":"    // Expands to either `$crate::panic::panic_2015` or `$crate::panic::panic_2021`","highlight_start":1,"highlight_end":84},{"text":"    // depending on the edition of the caller.","highlight_start":1,"highlight_end":47},{"text":"    ($($arg:tt)*) => {","highlight_start":1,"highlight_end":23},{"text":"        /* compiler built-in */","highlight_start":1,"highlight_end":32},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::panic::panic_2015!","def_site_span":{"file_name":"/home/fco/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs","byte_start":382,"byte_end":745,"line_start":13,"line_end":26,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub macro panic_2015 {","highlight_start":1,"highlight_end":23},{"text":"    () => (","highlight_start":1,"highlight_end":12},{"text":"        $crate::panicking::panic(\"explicit panic\")","highlight_start":1,"highlight_end":51},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    ($msg:literal $(,)?) => (","highlight_start":1,"highlight_end":30},{"text":"        $crate::panicking::panic($msg)","highlight_start":1,"highlight_end":39},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    ($msg:expr $(,)?) => (","highlight_start":1,"highlight_end":27},{"text":"        $crate::panicking::panic_str($msg)","highlight_start":1,"highlight_end":43},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"    ($fmt:expr, $($arg:tt)+) => (","highlight_start":1,"highlight_end":34},{"text":"        $crate::panicking::panic_fmt($crate::format_args!($fmt, $($arg)+))","highlight_start":1,"highlight_end":75},{"text":"    ),","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"`#[warn(unreachable_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unreachable expression\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/tcp.rs:40:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    unimplemented!(),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12many code following this expression is unreachable\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    unimplemented!(),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33munreachable expression\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unreachable_code)]` on by default\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the type `[u8]` cannot be indexed by `RangeTo<()>`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/tcp.rs","byte_start":1903,"byte_end":1919,"line_start":67,"line_end":67,"column_start":27,"column_end":43,"is_primary":true,"text":[{"text":"                nic.send(&buf[..unwritten])","highlight_start":27,"highlight_end":43}],"label":"slice indices are of type `usize` or ranges of `usize`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `SliceIndex<[u8]>` is not implemented for `RangeTo<()>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because of the requirements on the impl of `Index<RangeTo<()>>` for `[u8]`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the type `[u8]` cannot be indexed by `RangeTo<()>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/tcp.rs:67:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                nic.send(&buf[..unwritten])\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mslice indices are of type `usize` or ranges of `usize`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `SliceIndex<[u8]>` is not implemented for `RangeTo<()>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because of the requirements on the impl of `Index<RangeTo<()>>` for `[u8]`\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/tcp.rs","byte_start":1893,"byte_end":1920,"line_start":67,"line_end":67,"column_start":17,"column_end":44,"is_primary":true,"text":[{"text":"                nic.send(&buf[..unwritten])","highlight_start":17,"highlight_end":44}],"label":"expected `()`, found enum `Result`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/tcp.rs","byte_start":472,"byte_end":1944,"line_start":26,"line_end":69,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        match *self {","highlight_start":9,"highlight_end":22},{"text":"            State::Closed => {","highlight_start":1,"highlight_end":31},{"text":"                return Ok(0);","highlight_start":1,"highlight_end":30},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            State::Listen => {","highlight_start":1,"highlight_end":31},{"text":"                if !tcph.syn() {","highlight_start":1,"highlight_end":33},{"text":"                    // got unexpected SYN","highlight_start":1,"highlight_end":42},{"text":"                    return Ok(0);","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut syn_ack = etherparse::TcpHeader::new(","highlight_start":1,"highlight_end":62},{"text":"                    tcph.destination_port(),","highlight_start":1,"highlight_end":45},{"text":"                    tcph.source_port(),","highlight_start":1,"highlight_end":40},{"text":"                    unimplemented!(),","highlight_start":1,"highlight_end":38},{"text":"                    unimplemented!(),","highlight_start":1,"highlight_end":38},{"text":"                );","highlight_start":1,"highlight_end":19},{"text":"                syn_ack.syn = true;","highlight_start":1,"highlight_end":36},{"text":"                syn_ack.ack = true;","highlight_start":1,"highlight_end":36},{"text":"                let mut ip = etherparse::Ipv4Header::new(","highlight_start":1,"highlight_end":58},{"text":"                    syn_ack.header_len(),","highlight_start":1,"highlight_end":42},{"text":"                    64,","highlight_start":1,"highlight_end":24},{"text":"                    etherparse::IpTrafficClass::Tcp,","highlight_start":1,"highlight_end":53},{"text":"                    [","highlight_start":1,"highlight_end":22},{"text":"                    iph.destination()[0],","highlight_start":1,"highlight_end":42},{"text":"                    iph.destination()[1],","highlight_start":1,"highlight_end":42},{"text":"                    iph.destination()[2],","highlight_start":1,"highlight_end":42},{"text":"                    iph.destination()[3],","highlight_start":1,"highlight_end":42},{"text":"                    ],","highlight_start":1,"highlight_end":23},{"text":"                    [","highlight_start":1,"highlight_end":22},{"text":"                    iph.source()[0],","highlight_start":1,"highlight_end":37},{"text":"                    iph.source()[1],","highlight_start":1,"highlight_end":37},{"text":"                    iph.source()[2],","highlight_start":1,"highlight_end":37},{"text":"                    iph.source()[3],","highlight_start":1,"highlight_end":37},{"text":"                    ],","highlight_start":1,"highlight_end":23},{"text":"                );","highlight_start":1,"highlight_end":19},{"text":"                let unwritten = {","highlight_start":1,"highlight_end":34},{"text":"                    let mut unwritten = &mut buf[..];","highlight_start":1,"highlight_end":54},{"text":"                    ip.write(&mut unwritten);","highlight_start":1,"highlight_end":46},{"text":"                    syn_ack.write(&mut unwritten);","highlight_start":1,"highlight_end":51},{"text":"                    unwritten.len();","highlight_start":1,"highlight_end":37},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"                nic.send(&buf[..unwritten])","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":"expected this to be `()`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected unit type `()`\n        found enum `Result<usize, std::io::Error>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using a semicolon here","code":null,"level":"help","spans":[{"file_name":"src/tcp.rs","byte_start":1920,"byte_end":1920,"line_start":67,"line_end":67,"column_start":44,"column_end":44,"is_primary":true,"text":[{"text":"                nic.send(&buf[..unwritten])","highlight_start":44,"highlight_end":44}],"label":null,"suggested_replacement":";","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null},{"message":"consider using a semicolon here","code":null,"level":"help","spans":[{"file_name":"src/tcp.rs","byte_start":1944,"byte_end":1944,"line_start":69,"line_end":69,"column_start":10,"column_end":10,"is_primary":true,"text":[{"text":"        }","highlight_start":10,"highlight_end":10}],"label":null,"suggested_replacement":";","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null},{"message":"you might have meant to return this value","code":null,"level":"help","spans":[{"file_name":"src/tcp.rs","byte_start":1893,"byte_end":1893,"line_start":67,"line_end":67,"column_start":17,"column_end":17,"is_primary":true,"text":[{"text":"                nic.send(&buf[..unwritten])","highlight_start":17,"highlight_end":17}],"label":null,"suggested_replacement":"return ","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/tcp.rs","byte_start":1920,"byte_end":1920,"line_start":67,"line_end":67,"column_start":44,"column_end":44,"is_primary":true,"text":[{"text":"                nic.send(&buf[..unwritten])","highlight_start":44,"highlight_end":44}],"label":null,"suggested_replacement":";","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/tcp.rs:67:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        match *self {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            State::Closed => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                return Ok(0);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                nic.send(&buf[..unwritten])\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `()`, found enum `Result`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected this to be `()`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected unit type `\u001b[0m\u001b[0m\u001b[1m()\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                   found enum `\u001b[0m\u001b[0m\u001b[1mResult<usize, std::io::Error>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider using a semicolon here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                nic.send(&buf[..unwritten]);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider using a semicolon here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        };\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you might have meant to return this value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                return nic.send(&buf[..unwritten]);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^\u001b[0m\n\n"}
{"message":"unreachable statement","code":{"code":"unreachable_code","explanation":null},"level":"warning","spans":[{"file_name":"/home/fco/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs","byte_start":4381,"byte_end":4452,"line_start":155,"line_end":157,"column_start":23,"column_end":6,"is_primary":true,"text":[{"text":"    ($($arg:tt)*) => ({","highlight_start":23,"highlight_end":24},{"text":"        $crate::io::_eprint($crate::format_args_nl!($($arg)*));","highlight_start":1,"highlight_end":64},{"text":"    })","highlight_start":1,"highlight_end":6}],"label":"unreachable statement","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/tcp.rs","byte_start":1954,"byte_end":2180,"line_start":71,"line_end":78,"column_start":9,"column_end":11,"is_primary":false,"text":[{"text":"        eprintln!(","highlight_start":9,"highlight_end":19},{"text":"            \"{} : {} -> {} : {} {}b of tcp\",","highlight_start":1,"highlight_end":45},{"text":"            iph.source_addr(),","highlight_start":1,"highlight_end":31},{"text":"            tcph.source_port(),","highlight_start":1,"highlight_end":32},{"text":"            iph.destination_addr(),","highlight_start":1,"highlight_end":36},{"text":"            tcph.destination_port(),","highlight_start":1,"highlight_end":37},{"text":"            data.len(),","highlight_start":1,"highlight_end":24},{"text":"        );","highlight_start":1,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"eprintln!","def_site_span":{"file_name":"/home/fco/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/macros.rs","byte_start":4300,"byte_end":4455,"line_start":153,"line_end":158,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! eprintln {","highlight_start":1,"highlight_end":1},{"text":"    () => ($crate::eprint!(\"\\n\"));","highlight_start":1,"highlight_end":1},{"text":"    ($($arg:tt)*) => ({","highlight_start":1,"highlight_end":1},{"text":"        $crate::io::_eprint($crate::format_args_nl!($($arg)*));","highlight_start":1,"highlight_end":1},{"text":"    })","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/tcp.rs","byte_start":472,"byte_end":1944,"line_start":26,"line_end":69,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        match *self {","highlight_start":9,"highlight_end":22},{"text":"            State::Closed => {","highlight_start":1,"highlight_end":31},{"text":"                return Ok(0);","highlight_start":1,"highlight_end":30},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            State::Listen => {","highlight_start":1,"highlight_end":31},{"text":"                if !tcph.syn() {","highlight_start":1,"highlight_end":33},{"text":"                    // got unexpected SYN","highlight_start":1,"highlight_end":42},{"text":"                    return Ok(0);","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                let mut syn_ack = etherparse::TcpHeader::new(","highlight_start":1,"highlight_end":62},{"text":"                    tcph.destination_port(),","highlight_start":1,"highlight_end":45},{"text":"                    tcph.source_port(),","highlight_start":1,"highlight_end":40},{"text":"                    unimplemented!(),","highlight_start":1,"highlight_end":38},{"text":"                    unimplemented!(),","highlight_start":1,"highlight_end":38},{"text":"                );","highlight_start":1,"highlight_end":19},{"text":"                syn_ack.syn = true;","highlight_start":1,"highlight_end":36},{"text":"                syn_ack.ack = true;","highlight_start":1,"highlight_end":36},{"text":"                let mut ip = etherparse::Ipv4Header::new(","highlight_start":1,"highlight_end":58},{"text":"                    syn_ack.header_len(),","highlight_start":1,"highlight_end":42},{"text":"                    64,","highlight_start":1,"highlight_end":24},{"text":"                    etherparse::IpTrafficClass::Tcp,","highlight_start":1,"highlight_end":53},{"text":"                    [","highlight_start":1,"highlight_end":22},{"text":"                    iph.destination()[0],","highlight_start":1,"highlight_end":42},{"text":"                    iph.destination()[1],","highlight_start":1,"highlight_end":42},{"text":"                    iph.destination()[2],","highlight_start":1,"highlight_end":42},{"text":"                    iph.destination()[3],","highlight_start":1,"highlight_end":42},{"text":"                    ],","highlight_start":1,"highlight_end":23},{"text":"                    [","highlight_start":1,"highlight_end":22},{"text":"                    iph.source()[0],","highlight_start":1,"highlight_end":37},{"text":"                    iph.source()[1],","highlight_start":1,"highlight_end":37},{"text":"                    iph.source()[2],","highlight_start":1,"highlight_end":37},{"text":"                    iph.source()[3],","highlight_start":1,"highlight_end":37},{"text":"                    ],","highlight_start":1,"highlight_end":23},{"text":"                );","highlight_start":1,"highlight_end":19},{"text":"                let unwritten = {","highlight_start":1,"highlight_end":34},{"text":"                    let mut unwritten = &mut buf[..];","highlight_start":1,"highlight_end":54},{"text":"                    ip.write(&mut unwritten);","highlight_start":1,"highlight_end":46},{"text":"                    syn_ack.write(&mut unwritten);","highlight_start":1,"highlight_end":51},{"text":"                    unwritten.len();","highlight_start":1,"highlight_end":37},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"                nic.send(&buf[..unwritten])","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":"any code following this `match` expression is unreachable, as all arms diverge","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unreachable statement\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/tcp.rs:71:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        match *self {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            State::Closed => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                return Ok(0);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12many code following this `match` expression is unreachable, as all arms diverge\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        eprintln!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"{} : {} -> {} : {} {}b of tcp\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            iph.source_addr(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            tcph.source_port(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m77\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            data.len(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m78\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        );\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|__________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33munreachable statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to 2 previous errors; 2 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors; 2 warnings emitted\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0277, E0308.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0277, E0308.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
