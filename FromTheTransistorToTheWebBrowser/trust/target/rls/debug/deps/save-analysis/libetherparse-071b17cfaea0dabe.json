{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3","program":"/home/fco/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","etherparse","--edition=2018","/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=071b17cfaea0dabe","-C","extra-filename=-071b17cfaea0dabe","--out-dir","/home/fco/Desktop/Projects/FromTheTransistorToTheWebBrowser/trust/target/rls/debug/deps","-L","dependency=/home/fco/Desktop/Projects/FromTheTransistorToTheWebBrowser/trust/target/rls/debug/deps","--extern","byteorder=/home/fco/Desktop/Projects/FromTheTransistorToTheWebBrowser/trust/target/rls/debug/deps/libbyteorder-90ffcf84185c2b3b.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/fco/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/fco/Desktop/Projects/FromTheTransistorToTheWebBrowser/trust/target/rls/debug/deps/libetherparse-071b17cfaea0dabe.rmeta"},"prelude":{"crate_id":{"name":"etherparse","disambiguator":[9440779315062599569,12101020410183925886]},"crate_root":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src","external_crates":[{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[397594041871667817,11704163070354659695]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[17044353007700780372,2918200604221815240]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[15333840167806743833,9889193056877993824]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4550415707075219492,6623162258675921486]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[8289379911494056514,13856099756999900329]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[10514502805115346386,576110030083780649]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[9878185313679130060,1975285035821961205]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[4010603182529655334,7152219772350788052]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[1807637986128902209,18379128151258407121]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[11140927657351163542,6267109750485550558]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[13809795498598848728,13320395723520943315]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[13869841232067652907,9875669357213642224]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[15533050656730733495,14669839968799848603]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[14371692877540073659,8181723439448527964]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[639541300699627395,1995254029228069844]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","num":16,"id":{"name":"miniz_oxide","disambiguator":[12482123824895737424,11765111494567609733]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","num":17,"id":{"name":"adler","disambiguator":[1169880241773671279,8605314106566979368]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","num":18,"id":{"name":"panic_unwind","disambiguator":[5016943468141875609,13494347935157563341]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","num":19,"id":{"name":"byteorder","disambiguator":[13778836417791981908,11302133446922456731]}}],"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":0,"byte_end":17717,"line_start":1,"line_end":401,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":11348,"byte_end":11349,"line_start":204,"line_end":204,"column_start":32,"column_end":33},"alias_span":null,"name":"*","value":"Ethernet2Header, Ethernet2HeaderSlice, EtherType","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":11386,"byte_end":11387,"line_start":205,"line_end":205,"column_start":36,"column_end":37},"alias_span":null,"name":"*","value":"SingleVlanHeaderSlice, DoubleVlanHeader, SingleVlanHeader, VlanHeader, DoubleVlanHeaderSlice","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":11433,"byte_end":11434,"line_start":208,"line_end":208,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"IpHeader, IpTrafficClass","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":11467,"byte_end":11468,"line_start":209,"line_end":209,"column_start":32,"column_end":33},"alias_span":null,"name":"*","value":"Ipv4Header, Ipv4HeaderSlice","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":11501,"byte_end":11502,"line_start":210,"line_end":210,"column_start":32,"column_end":33},"alias_span":null,"name":"*","value":"Ipv6Header, IPV6_MAX_NUM_HEADER_EXTENSIONS, Ipv6HeaderSlice, Ipv6ExtensionHeaderSlice","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":11551,"byte_end":11552,"line_start":213,"line_end":213,"column_start":32,"column_end":33},"alias_span":null,"name":"*","value":"TcpOptionReadError, TcpOptionWriteError, TcpOptionElement, TcpHeaderSlice, TcpHeader","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":11585,"byte_end":11586,"line_start":214,"line_end":214,"column_start":32,"column_end":33},"alias_span":null,"name":"*","value":"UdpHeader, UdpHeaderSlice","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1665},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":11614,"byte_end":11629,"line_start":215,"line_end":215,"column_start":27,"column_end":42},"alias_span":null,"name":"TransportHeader","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":11683,"byte_end":11684,"line_start":218,"line_end":218,"column_start":32,"column_end":33},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":11738,"byte_end":11739,"line_start":221,"line_end":221,"column_start":32,"column_end":33},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":11793,"byte_end":11794,"line_start":224,"line_end":224,"column_start":32,"column_end":33},"alias_span":null,"name":"*","value":"VlanSlice, SlicedPacket, LinkSlice, InternetSlice, TransportSlice","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":0,"byte_end":17717,"line_start":1,"line_end":401,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":565},{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":724},{"krate":0,"index":725},{"krate":0,"index":744},{"krate":0,"index":1956},{"krate":0,"index":1986},{"krate":0,"index":746},{"krate":0,"index":749},{"krate":0,"index":1988},{"krate":0,"index":1998},{"krate":0,"index":751},{"krate":0,"index":753},{"krate":0,"index":2000},{"krate":0,"index":2028},{"krate":0,"index":2030},{"krate":0,"index":2031},{"krate":0,"index":2034},{"krate":0,"index":2035},{"krate":0,"index":2037},{"krate":0,"index":755},{"krate":0,"index":2039},{"krate":0,"index":2058},{"krate":0,"index":2060},{"krate":0,"index":2061},{"krate":0,"index":2063},{"krate":0,"index":2064},{"krate":0,"index":2066},{"krate":0,"index":757},{"krate":0,"index":761},{"krate":0,"index":765},{"krate":0,"index":769},{"krate":0,"index":771}],"decl_id":null,"docs":" A zero allocation library for parsing & writing a bunch of packet based protocols (EthernetII, IPv4, IPv6, UDP, TCP ...).\n \n Currently supported are:\n * Ethernet II\n * IEEE 802.1Q VLAN Tagging Header\n * IPv4\n * IPv6 (missing extension headers, but supporting skipping them)\n * UDP\n * TCP\n \n # Usage\n \n First, add the following to your `Cargo.toml`:\n \n ```toml\n [dependencies]\n etherparse = \"0.8.3\"\n ```\n \n Next, add this to your crate root:\n \n ```\n extern crate etherparse;\n ```\n \n # What is etherparse?\n Etherparse is intended to provide the basic network parsing functions that allow for easy analysis, transformation or generation of recorded network data.\n \n Some key points are:\n \n * It is completly written in Rust and thoroughly tested.\n * Special attention has been paid to not use allocations or syscalls.\n * The package is still in development and can & will still change. \n * The current focus of development is on the most popular protocols in the internet & transport layer.","sig":null,"attributes":[{"value":"/ A zero allocation library for parsing & writing a bunch of packet based protocols (EthernetII, IPv4, IPv6, UDP, TCP ...).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":0,"byte_end":125,"line_start":1,"line_end":1,"column_start":1,"column_end":126}},{"value":"/ ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":126,"byte_end":130,"line_start":2,"line_end":2,"column_start":1,"column_end":5}},{"value":"/ Currently supported are:","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":131,"byte_end":159,"line_start":3,"line_end":3,"column_start":1,"column_end":29}},{"value":"/ * Ethernet II","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":160,"byte_end":177,"line_start":4,"line_end":4,"column_start":1,"column_end":18}},{"value":"/ * IEEE 802.1Q VLAN Tagging Header","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":178,"byte_end":215,"line_start":5,"line_end":5,"column_start":1,"column_end":38}},{"value":"/ * IPv4","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":216,"byte_end":226,"line_start":6,"line_end":6,"column_start":1,"column_end":11}},{"value":"/ * IPv6 (missing extension headers, but supporting skipping them)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":227,"byte_end":295,"line_start":7,"line_end":7,"column_start":1,"column_end":69}},{"value":"/ * UDP","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":296,"byte_end":305,"line_start":8,"line_end":8,"column_start":1,"column_end":10}},{"value":"/ * TCP","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":306,"byte_end":315,"line_start":9,"line_end":9,"column_start":1,"column_end":10}},{"value":"/ ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":316,"byte_end":320,"line_start":10,"line_end":10,"column_start":1,"column_end":5}},{"value":"/ # Usage","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":321,"byte_end":332,"line_start":11,"line_end":11,"column_start":1,"column_end":12}},{"value":"/ ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":333,"byte_end":337,"line_start":12,"line_end":12,"column_start":1,"column_end":5}},{"value":"/ First, add the following to your `Cargo.toml`:","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":338,"byte_end":388,"line_start":13,"line_end":13,"column_start":1,"column_end":51}},{"value":"/ ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":389,"byte_end":393,"line_start":14,"line_end":14,"column_start":1,"column_end":5}},{"value":"/ ```toml","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":394,"byte_end":405,"line_start":15,"line_end":15,"column_start":1,"column_end":12}},{"value":"/ [dependencies]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":406,"byte_end":424,"line_start":16,"line_end":16,"column_start":1,"column_end":19}},{"value":"/ etherparse = \"0.8.3\"","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":425,"byte_end":449,"line_start":17,"line_end":17,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":450,"byte_end":457,"line_start":18,"line_end":18,"column_start":1,"column_end":8}},{"value":"/ ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":458,"byte_end":462,"line_start":19,"line_end":19,"column_start":1,"column_end":5}},{"value":"/ Next, add this to your crate root:","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":463,"byte_end":501,"line_start":20,"line_end":20,"column_start":1,"column_end":39}},{"value":"/ ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":502,"byte_end":506,"line_start":21,"line_end":21,"column_start":1,"column_end":5}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":507,"byte_end":514,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/ extern crate etherparse;","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":515,"byte_end":543,"line_start":23,"line_end":23,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":544,"byte_end":551,"line_start":24,"line_end":24,"column_start":1,"column_end":8}},{"value":"/ ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":552,"byte_end":556,"line_start":25,"line_end":25,"column_start":1,"column_end":5}},{"value":"/ # What is etherparse?","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":557,"byte_end":582,"line_start":26,"line_end":26,"column_start":1,"column_end":26}},{"value":"/ Etherparse is intended to provide the basic network parsing functions that allow for easy analysis, transformation or generation of recorded network data.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":583,"byte_end":741,"line_start":27,"line_end":27,"column_start":1,"column_end":159}},{"value":"/ ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":742,"byte_end":746,"line_start":28,"line_end":28,"column_start":1,"column_end":5}},{"value":"/ Some key points are:","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":747,"byte_end":771,"line_start":29,"line_end":29,"column_start":1,"column_end":25}},{"value":"/ ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":772,"byte_end":776,"line_start":30,"line_end":30,"column_start":1,"column_end":5}},{"value":"/ * It is completly written in Rust and thoroughly tested.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":777,"byte_end":837,"line_start":31,"line_end":31,"column_start":1,"column_end":61}},{"value":"/ * Special attention has been paid to not use allocations or syscalls.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":838,"byte_end":911,"line_start":32,"line_end":32,"column_start":1,"column_end":74}},{"value":"/ * The package is still in development and can & will still change. ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":912,"byte_end":983,"line_start":33,"line_end":33,"column_start":1,"column_end":72}},{"value":"/ * The current focus of development is on the most popular protocols in the internet & transport layer.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":984,"byte_end":1090,"line_start":34,"line_end":34,"column_start":1,"column_end":107}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":1091,"byte_end":1094,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ # How to parse network packages?","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":1095,"byte_end":1131,"line_start":36,"line_end":36,"column_start":1,"column_end":37}},{"value":"/ Etherparse gives you two options for parsing network packages automatically:","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":1132,"byte_end":1212,"line_start":37,"line_end":37,"column_start":1,"column_end":81}},{"value":"/ ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":1213,"byte_end":1217,"line_start":38,"line_end":38,"column_start":1,"column_end":5}},{"value":"/ ## Slicing the packet","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":1218,"byte_end":1243,"line_start":39,"line_end":39,"column_start":1,"column_end":26}},{"value":"/ Here the different components in a packet are seperated without parsing all their fields. For each header a slice is generated that allows access to the fields of a header.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":1244,"byte_end":1420,"line_start":40,"line_end":40,"column_start":1,"column_end":177}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":1421,"byte_end":1428,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"/ # use etherparse::{SlicedPacket, PacketBuilder};","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":1429,"byte_end":1481,"line_start":42,"line_end":42,"column_start":1,"column_end":53}},{"value":"/ # let builder = PacketBuilder::","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":1482,"byte_end":1517,"line_start":43,"line_end":43,"column_start":1,"column_end":36}},{"value":"/ #    ethernet2([1,2,3,4,5,6],     //source mac","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":1518,"byte_end":1568,"line_start":44,"line_end":44,"column_start":1,"column_end":51}},{"value":"/ #               [7,8,9,10,11,12]) //destionation mac","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":1569,"byte_end":1625,"line_start":45,"line_end":45,"column_start":1,"column_end":57}},{"value":"/ #    .ipv4([192,168,1,1], //source ip","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":1626,"byte_end":1667,"line_start":46,"line_end":46,"column_start":1,"column_end":42}},{"value":"/ #          [192,168,1,2], //desitionation ip","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":1668,"byte_end":1716,"line_start":47,"line_end":47,"column_start":1,"column_end":49}},{"value":"/ #          20)            //time to life","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":1717,"byte_end":1761,"line_start":48,"line_end":48,"column_start":1,"column_end":45}},{"value":"/ #    .udp(21,    //source port ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":1762,"byte_end":1797,"line_start":49,"line_end":49,"column_start":1,"column_end":36}},{"value":"/ #         1234); //desitnation port","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":1798,"byte_end":1837,"line_start":50,"line_end":50,"column_start":1,"column_end":40}},{"value":"/ #    //payload of the udp packet","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":1838,"byte_end":1874,"line_start":51,"line_end":51,"column_start":1,"column_end":37}},{"value":"/ #    let payload = [1,2,3,4,5,6,7,8];","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":1875,"byte_end":1916,"line_start":52,"line_end":52,"column_start":1,"column_end":42}},{"value":"/ #    //get some memory to store the serialized data","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":1917,"byte_end":1972,"line_start":53,"line_end":53,"column_start":1,"column_end":56}},{"value":"/ #    let mut packet = Vec::<u8>::with_capacity(","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":1973,"byte_end":2024,"line_start":54,"line_end":54,"column_start":1,"column_end":52}},{"value":"/ #                            builder.size(payload.len()));","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":2025,"byte_end":2087,"line_start":55,"line_end":55,"column_start":1,"column_end":63}},{"value":"/ #    builder.write(&mut packet, &payload).unwrap();","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":2088,"byte_end":2143,"line_start":56,"line_end":56,"column_start":1,"column_end":56}},{"value":"/ match SlicedPacket::from_ethernet(&packet) {","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":2144,"byte_end":2192,"line_start":57,"line_end":57,"column_start":1,"column_end":49}},{"value":"/     Err(value) => println!(\"Err {:?}\", value),","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":2193,"byte_end":2243,"line_start":58,"line_end":58,"column_start":1,"column_end":51}},{"value":"/     Ok(value) => {","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":2244,"byte_end":2266,"line_start":59,"line_end":59,"column_start":1,"column_end":23}},{"value":"/         println!(\"link: {:?}\", value.link);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":2267,"byte_end":2314,"line_start":60,"line_end":60,"column_start":1,"column_end":48}},{"value":"/         println!(\"vlan: {:?}\", value.vlan);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":2315,"byte_end":2362,"line_start":61,"line_end":61,"column_start":1,"column_end":48}},{"value":"/         println!(\"ip: {:?}\", value.ip);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":2363,"byte_end":2406,"line_start":62,"line_end":62,"column_start":1,"column_end":44}},{"value":"/         println!(\"transport: {:?}\", value.transport);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":2407,"byte_end":2464,"line_start":63,"line_end":63,"column_start":1,"column_end":58}},{"value":"/     }","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":2465,"byte_end":2474,"line_start":64,"line_end":64,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":2475,"byte_end":2480,"line_start":65,"line_end":65,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":2481,"byte_end":2488,"line_start":66,"line_end":66,"column_start":1,"column_end":8}},{"value":"/ This is the faster option if your code is not interested in all fields of all the headers. It is a good choice if you just want filter or find packages based on a subset of the headers and/or their fields.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":2489,"byte_end":2698,"line_start":67,"line_end":67,"column_start":1,"column_end":210}},{"value":"/ ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":2699,"byte_end":2703,"line_start":68,"line_end":68,"column_start":1,"column_end":5}},{"value":"/ Depending from which point downward you want to slice a package check out the functions:","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":2704,"byte_end":2796,"line_start":69,"line_end":69,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":2797,"byte_end":2800,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ * [`SlicedPacket.from_ethernet`](struct.SlicedPacket.html#method.from_ethernet) for parsing from an Ethernet II header downwards","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":2801,"byte_end":2933,"line_start":71,"line_end":71,"column_start":1,"column_end":133}},{"value":"/ * [`SlicedPacket.from_ip`](struct.SlicedPacket.html#method.from_ip) for parsing from an IPv4 or IPv6 downwards","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":2934,"byte_end":3048,"line_start":72,"line_end":72,"column_start":1,"column_end":115}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":3049,"byte_end":3052,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ ## Deserializing all headers into structs","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":3053,"byte_end":3098,"line_start":74,"line_end":74,"column_start":1,"column_end":46}},{"value":"/ This option deserializes all known headers and transferes their contents to header structs.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":3099,"byte_end":3194,"line_start":75,"line_end":75,"column_start":1,"column_end":96}},{"value":"/ ```rust","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":3195,"byte_end":3206,"line_start":76,"line_end":76,"column_start":1,"column_end":12}},{"value":"/ # use etherparse::{PacketHeaders, PacketBuilder};","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":3207,"byte_end":3260,"line_start":77,"line_end":77,"column_start":1,"column_end":54}},{"value":"/ # let builder = PacketBuilder::","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":3261,"byte_end":3296,"line_start":78,"line_end":78,"column_start":1,"column_end":36}},{"value":"/ #    ethernet2([1,2,3,4,5,6],     //source mac","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":3297,"byte_end":3347,"line_start":79,"line_end":79,"column_start":1,"column_end":51}},{"value":"/ #               [7,8,9,10,11,12]) //destionation mac","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":3348,"byte_end":3404,"line_start":80,"line_end":80,"column_start":1,"column_end":57}},{"value":"/ #    .ipv4([192,168,1,1], //source ip","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":3405,"byte_end":3446,"line_start":81,"line_end":81,"column_start":1,"column_end":42}},{"value":"/ #          [192,168,1,2], //desitionation ip","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":3447,"byte_end":3495,"line_start":82,"line_end":82,"column_start":1,"column_end":49}},{"value":"/ #          20)            //time to life","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":3496,"byte_end":3540,"line_start":83,"line_end":83,"column_start":1,"column_end":45}},{"value":"/ #    .udp(21,    //source port ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":3541,"byte_end":3576,"line_start":84,"line_end":84,"column_start":1,"column_end":36}},{"value":"/ #         1234); //desitnation port","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":3577,"byte_end":3616,"line_start":85,"line_end":85,"column_start":1,"column_end":40}},{"value":"/ #    //payload of the udp packet","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":3617,"byte_end":3653,"line_start":86,"line_end":86,"column_start":1,"column_end":37}},{"value":"/ #    let payload = [1,2,3,4,5,6,7,8];","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":3654,"byte_end":3695,"line_start":87,"line_end":87,"column_start":1,"column_end":42}},{"value":"/ #    //get some memory to store the serialized data","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":3696,"byte_end":3751,"line_start":88,"line_end":88,"column_start":1,"column_end":56}},{"value":"/ #    let mut packet = Vec::<u8>::with_capacity(","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":3752,"byte_end":3803,"line_start":89,"line_end":89,"column_start":1,"column_end":52}},{"value":"/ #                            builder.size(payload.len()));","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":3804,"byte_end":3866,"line_start":90,"line_end":90,"column_start":1,"column_end":63}},{"value":"/ #    builder.write(&mut packet, &payload).unwrap();","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":3867,"byte_end":3922,"line_start":91,"line_end":91,"column_start":1,"column_end":56}},{"value":"/ match PacketHeaders::from_ethernet_slice(&packet) {","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":3923,"byte_end":3978,"line_start":92,"line_end":92,"column_start":1,"column_end":56}},{"value":"/     Err(value) => println!(\"Err {:?}\", value),","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":3979,"byte_end":4029,"line_start":93,"line_end":93,"column_start":1,"column_end":51}},{"value":"/     Ok(value) => {","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":4030,"byte_end":4052,"line_start":94,"line_end":94,"column_start":1,"column_end":23}},{"value":"/         println!(\"link: {:?}\", value.link);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":4053,"byte_end":4100,"line_start":95,"line_end":95,"column_start":1,"column_end":48}},{"value":"/         println!(\"vlan: {:?}\", value.vlan);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":4101,"byte_end":4148,"line_start":96,"line_end":96,"column_start":1,"column_end":48}},{"value":"/         println!(\"ip: {:?}\", value.ip);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":4149,"byte_end":4192,"line_start":97,"line_end":97,"column_start":1,"column_end":44}},{"value":"/         println!(\"transport: {:?}\", value.transport);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":4193,"byte_end":4250,"line_start":98,"line_end":98,"column_start":1,"column_end":58}},{"value":"/     }","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":4251,"byte_end":4260,"line_start":99,"line_end":99,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":4261,"byte_end":4266,"line_start":100,"line_end":100,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":4267,"byte_end":4274,"line_start":101,"line_end":101,"column_start":1,"column_end":8}},{"value":"/ This option is slower then slicing when only few fields are accessed. But it can be the faster option or useful if you are interested in most fields anyways or if you want to re-serialize the headers with modified values.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":4275,"byte_end":4500,"line_start":102,"line_end":102,"column_start":1,"column_end":226}},{"value":"/ ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":4501,"byte_end":4505,"line_start":103,"line_end":103,"column_start":1,"column_end":5}},{"value":"/ Depending from which point downward you want to unpack a package check out the functions","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":4506,"byte_end":4598,"line_start":104,"line_end":104,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":4599,"byte_end":4602,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ * [`PacketHeaders.from_ethernet_slice`](struct.PacketHeaders.html#method.from_ethernet_slice) for parsing from an Ethernet II header downwards","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":4603,"byte_end":4749,"line_start":106,"line_end":106,"column_start":1,"column_end":147}},{"value":"/ * [`PacketHeaders.from_ip_slice`](struct.PacketHeaders.html#method.from_ip_slice) for parsing from an IPv4 or IPv6 downwards","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":4750,"byte_end":4878,"line_start":107,"line_end":107,"column_start":1,"column_end":129}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":4879,"byte_end":4882,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ ## Manually slicing & parsing packets","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":4883,"byte_end":4924,"line_start":109,"line_end":109,"column_start":1,"column_end":42}},{"value":"/ It is also possible to manually slice & parse a packet. For each header type there is are metods that create a slice or struct from a memory slice. ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":4925,"byte_end":5077,"line_start":110,"line_end":110,"column_start":1,"column_end":153}},{"value":"/ ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":5078,"byte_end":5082,"line_start":111,"line_end":111,"column_start":1,"column_end":5}},{"value":"/ Have a look at the documentation for the <NAME>Slice.from_slice methods, if you want to create your own slices:","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":5083,"byte_end":5198,"line_start":112,"line_end":112,"column_start":1,"column_end":116}},{"value":"/ ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":5199,"byte_end":5203,"line_start":113,"line_end":113,"column_start":1,"column_end":5}},{"value":"/ * [`Ethernet2HeaderSlice.from_slice`](struct.Ethernet2HeaderSlice.html#method.from_slice)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":5204,"byte_end":5297,"line_start":114,"line_end":114,"column_start":1,"column_end":94}},{"value":"/ * [`SingleVlanHeaderSlice.from_slice`](struct.SingleVlanHeaderSlice.html#method.from_slice)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":5298,"byte_end":5393,"line_start":115,"line_end":115,"column_start":1,"column_end":96}},{"value":"/ * [`DoubleVlanHeaderSlice.from_slice`](struct.DoubleVlanHeaderSlice.html#method.from_slice)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":5394,"byte_end":5489,"line_start":116,"line_end":116,"column_start":1,"column_end":96}},{"value":"/ * [`Ipv4HeaderSlice.from_slice`](struct.Ipv4HeaderSlice.html#method.from_slice)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":5490,"byte_end":5573,"line_start":117,"line_end":117,"column_start":1,"column_end":84}},{"value":"/ * [`Ipv6HeaderSlice.from_slice`](struct.Ipv6HeaderSlice.html#method.from_slice)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":5574,"byte_end":5657,"line_start":118,"line_end":118,"column_start":1,"column_end":84}},{"value":"/ * [`Ipv6ExtensionHeaderSlice.from_slice`](struct.Ipv6ExtensionHeaderSlice.html)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":5658,"byte_end":5741,"line_start":119,"line_end":119,"column_start":1,"column_end":84}},{"value":"/ * [`UdpHeaderSlice.from_slice`](struct.UdpHeaderSlice.html#method.from_slice)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":5742,"byte_end":5823,"line_start":120,"line_end":120,"column_start":1,"column_end":82}},{"value":"/ * [`TcpHeaderSlice.from_slice`](struct.TcpHeaderSlice.html#method.from_slice)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":5824,"byte_end":5905,"line_start":121,"line_end":121,"column_start":1,"column_end":82}},{"value":"/ ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":5906,"byte_end":5910,"line_start":122,"line_end":122,"column_start":1,"column_end":5}},{"value":"/ And for deserialization into the corresponding header structs have a look at:","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":5911,"byte_end":5992,"line_start":123,"line_end":123,"column_start":1,"column_end":82}},{"value":"/ ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":5993,"byte_end":5997,"line_start":124,"line_end":124,"column_start":1,"column_end":5}},{"value":"/ * [`Ethernet2Header.read`](struct.Ethernet2Header.html#method.read) & [`Ethernet2Header.read_from_slice`](struct.Ethernet2Header.html#method.read_from_slice)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":5998,"byte_end":6159,"line_start":125,"line_end":125,"column_start":1,"column_end":162}},{"value":"/ * [`SingleVlanHeader.read`](struct.SingleVlanHeader.html#method.read) & [`SingleVlanHeader.read_from_slice`](struct.SingleVlanHeader.html#method.read_from_slice)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":6160,"byte_end":6325,"line_start":126,"line_end":126,"column_start":1,"column_end":166}},{"value":"/ * [`DoubleVlanHeader.read`](struct.DoubleVlanHeader.html#method.read) & [`DoubleVlanHeader.read_from_slice`](struct.DoubleVlanHeader.html#method.read_from_slice)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":6326,"byte_end":6491,"line_start":127,"line_end":127,"column_start":1,"column_end":166}},{"value":"/ * [`IpHeader.read`](enum.IpHeader.html#method.read) & [`IpHeader.read_from_slice`](enum.IpHeader.html#method.read_from_slice)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":6492,"byte_end":6621,"line_start":128,"line_end":128,"column_start":1,"column_end":130}},{"value":"/ * [`Ipv4Header.read`](struct.Ipv4Header.html#method.read) & [`Ipv4Header.read_from_slice`](struct.Ipv4Header.html#method.read_from_slice)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":6622,"byte_end":6763,"line_start":129,"line_end":129,"column_start":1,"column_end":142}},{"value":"/ * [`Ipv6Header.read`](struct.Ipv6Header.html#method.read) & [`Ipv6Header.read_from_slice`](struct.Ipv6Header.html#method.read_from_slice)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":6764,"byte_end":6905,"line_start":130,"line_end":130,"column_start":1,"column_end":142}},{"value":"/ * [`UdpHeader.read`](struct.UdpHeader.html#method.read) & [`UdpHeader.read_from_slice`](struct.UdpHeader.html#method.read_from_slice)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":6906,"byte_end":7043,"line_start":131,"line_end":131,"column_start":1,"column_end":138}},{"value":"/ * [`TcpHeader.read`](struct.TcpHeader.html#method.read) & [`TcpHeader.read_from_slice`](struct.TcpHeader.html#method.read_from_slice)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":7044,"byte_end":7181,"line_start":132,"line_end":132,"column_start":1,"column_end":138}},{"value":"/ ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":7182,"byte_end":7186,"line_start":133,"line_end":133,"column_start":1,"column_end":5}},{"value":"/ # How to generate fake packet data?","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":7187,"byte_end":7226,"line_start":134,"line_end":134,"column_start":1,"column_end":40}},{"value":"/ ## Packet Builder","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":7227,"byte_end":7248,"line_start":135,"line_end":135,"column_start":1,"column_end":22}},{"value":"/ The PacketBuilder struct provides a high level interface for quickly creating network packets. The PacketBuilder will automatically set fields which can be deduced from the content and compositions of the packet itself (e.g. checksums, lengths, ethertype, ip protocol number).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":7249,"byte_end":7529,"line_start":136,"line_end":136,"column_start":1,"column_end":281}},{"value":"/ ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":7530,"byte_end":7534,"line_start":137,"line_end":137,"column_start":1,"column_end":5}},{"value":"/ [Example:](https://github.com/JulianSchmid/etherparse/blob/0.8.0/examples/write_udp.rs)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":7535,"byte_end":7626,"line_start":138,"line_end":138,"column_start":1,"column_end":92}},{"value":"/ ```rust","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":7627,"byte_end":7638,"line_start":139,"line_end":139,"column_start":1,"column_end":12}},{"value":"/ use etherparse::PacketBuilder;","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":7639,"byte_end":7673,"line_start":140,"line_end":140,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":7674,"byte_end":7677,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ let builder = PacketBuilder::","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":7678,"byte_end":7711,"line_start":142,"line_end":142,"column_start":1,"column_end":34}},{"value":"/     ethernet2([1,2,3,4,5,6],     //source mac","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":7712,"byte_end":7761,"line_start":143,"line_end":143,"column_start":1,"column_end":50}},{"value":"/                [7,8,9,10,11,12]) //destination mac","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":7762,"byte_end":7816,"line_start":144,"line_end":144,"column_start":1,"column_end":55}},{"value":"/     .ipv4([192,168,1,1], //source ip","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":7817,"byte_end":7857,"line_start":145,"line_end":145,"column_start":1,"column_end":41}},{"value":"/           [192,168,1,2], //desitination ip","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":7858,"byte_end":7904,"line_start":146,"line_end":146,"column_start":1,"column_end":47}},{"value":"/           20)            //time to life","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":7905,"byte_end":7948,"line_start":147,"line_end":147,"column_start":1,"column_end":44}},{"value":"/     .udp(21,    //source port ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":7949,"byte_end":7983,"line_start":148,"line_end":148,"column_start":1,"column_end":35}},{"value":"/          1234); //desitnation port","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":7984,"byte_end":8022,"line_start":149,"line_end":149,"column_start":1,"column_end":39}},{"value":"/ ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":8023,"byte_end":8027,"line_start":150,"line_end":150,"column_start":1,"column_end":5}},{"value":"/ //payload of the udp packet","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":8028,"byte_end":8059,"line_start":151,"line_end":151,"column_start":1,"column_end":32}},{"value":"/ let payload = [1,2,3,4,5,6,7,8];","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":8060,"byte_end":8096,"line_start":152,"line_end":152,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":8097,"byte_end":8100,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ //get some memory to store the result","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":8101,"byte_end":8142,"line_start":154,"line_end":154,"column_start":1,"column_end":42}},{"value":"/ let mut result = Vec::<u8>::with_capacity(builder.size(payload.len()));","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":8143,"byte_end":8218,"line_start":155,"line_end":155,"column_start":1,"column_end":76}},{"value":"/ ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":8219,"byte_end":8223,"line_start":156,"line_end":156,"column_start":1,"column_end":5}},{"value":"/ //serialize","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":8224,"byte_end":8239,"line_start":157,"line_end":157,"column_start":1,"column_end":16}},{"value":"/ //this will automatically set all length fields, checksums and identifiers (ethertype & protocol)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":8240,"byte_end":8341,"line_start":158,"line_end":158,"column_start":1,"column_end":102}},{"value":"/ //before writing the packet out to \"result\"","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":8342,"byte_end":8389,"line_start":159,"line_end":159,"column_start":1,"column_end":48}},{"value":"/ builder.write(&mut result, &payload).unwrap();","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":8390,"byte_end":8440,"line_start":160,"line_end":160,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":8441,"byte_end":8448,"line_start":161,"line_end":161,"column_start":1,"column_end":8}},{"value":"/ ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":8449,"byte_end":8453,"line_start":162,"line_end":162,"column_start":1,"column_end":5}},{"value":"/ There is also an [example for TCP packets](https://github.com/JulianSchmid/etherparse/blob/0.8.0/examples/write_tcp.rs) available.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":8454,"byte_end":8588,"line_start":163,"line_end":163,"column_start":1,"column_end":135}},{"value":"/ ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":8589,"byte_end":8593,"line_start":164,"line_end":164,"column_start":1,"column_end":5}},{"value":"/ Check out the [PacketBuilder documentation](struct.PacketBuilder.html) for more informations.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":8594,"byte_end":8691,"line_start":165,"line_end":165,"column_start":1,"column_end":98}},{"value":"/ ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":8692,"byte_end":8696,"line_start":166,"line_end":166,"column_start":1,"column_end":5}},{"value":"/ ## Manually serialising each header","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":8697,"byte_end":8736,"line_start":167,"line_end":167,"column_start":1,"column_end":40}},{"value":"/ Alternativly it is possible to manually build a packet ([example](https://github.com/JulianSchmid/etherparse/blob/0.8.0/examples/write_ipv4_udp.rs)). Generally each struct representing a header has a \"write\" method that allows it to be serialized. These write methods sometimes automatically calculate checksums and fill them in. In case this is unwanted behavior (e.g. if you want to generate a packet with an invalid checksum), it is also possible to call a \"write_raw\" method that will simply serialize the data without doing checksum calculations.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":8737,"byte_end":9292,"line_start":168,"line_end":168,"column_start":1,"column_end":556}},{"value":"/ ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":9293,"byte_end":9297,"line_start":169,"line_end":169,"column_start":1,"column_end":5}},{"value":"/ Read the documentations of the different methods for a more details:","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":9298,"byte_end":9370,"line_start":170,"line_end":170,"column_start":1,"column_end":73}},{"value":"/ ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":9371,"byte_end":9375,"line_start":171,"line_end":171,"column_start":1,"column_end":5}},{"value":"/ * [`Ethernet2Header.write`](struct.Ethernet2Header.html#method.write)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":9376,"byte_end":9449,"line_start":172,"line_end":172,"column_start":1,"column_end":74}},{"value":"/ * [`SingleVlanHeader.write`](struct.SingleVlanHeader.html#method.write)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":9450,"byte_end":9525,"line_start":173,"line_end":173,"column_start":1,"column_end":76}},{"value":"/ * [`DoubleVlanHeader.write`](struct.DoubleVlanHeader.html#method.write)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":9526,"byte_end":9601,"line_start":174,"line_end":174,"column_start":1,"column_end":76}},{"value":"/ * [`Ipv4Header.write`](struct.Ipv4Header.html#method.write)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":9602,"byte_end":9665,"line_start":175,"line_end":175,"column_start":1,"column_end":64}},{"value":"/ * [`Ipv4Header.write_raw`](struct.Ipv4Header.html#method.write_raw)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":9666,"byte_end":9737,"line_start":176,"line_end":176,"column_start":1,"column_end":72}},{"value":"/ * [`Ipv6Header.write`](struct.Ipv6Header.html#method.write)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":9738,"byte_end":9801,"line_start":177,"line_end":177,"column_start":1,"column_end":64}},{"value":"/ * [`UdpHeader.write`](struct.UdpHeader.html#method.write)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":9802,"byte_end":9863,"line_start":178,"line_end":178,"column_start":1,"column_end":62}},{"value":"/ * [`TcpHeader.write`](struct.TcpHeader.html#method.write)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":9864,"byte_end":9925,"line_start":179,"line_end":179,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":9926,"byte_end":9929,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ # Roadmap","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":9930,"byte_end":9943,"line_start":181,"line_end":181,"column_start":1,"column_end":14}},{"value":"/ * Documentation","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":9944,"byte_end":9963,"line_start":182,"line_end":182,"column_start":1,"column_end":20}},{"value":"/   * Packet Builder","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":9964,"byte_end":9986,"line_start":183,"line_end":183,"column_start":1,"column_end":23}},{"value":"/ * MutPacketSlice -> modifaction of fields in slices directly?","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":9987,"byte_end":10052,"line_start":184,"line_end":184,"column_start":1,"column_end":66}},{"value":"/ * Reserializing SlicedPacket & MutSlicedPacket with corrected checksums & id's","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":10053,"byte_end":10135,"line_start":185,"line_end":185,"column_start":1,"column_end":83}},{"value":"/ * Slicing & reading packet from different layers then ethernet onward (e.g. ip, vlan...)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":10136,"byte_end":10228,"line_start":186,"line_end":186,"column_start":1,"column_end":93}},{"value":"/ * IEEE 802.3","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":10229,"byte_end":10245,"line_start":187,"line_end":187,"column_start":1,"column_end":17}},{"value":"/ ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":10246,"byte_end":10250,"line_start":188,"line_end":188,"column_start":1,"column_end":5}},{"value":"/ # References","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":10251,"byte_end":10267,"line_start":189,"line_end":189,"column_start":1,"column_end":17}},{"value":"/ * Darpa Internet Program Protocol Specification [RFC 791](https://tools.ietf.org/html/rfc791)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":10268,"byte_end":10365,"line_start":190,"line_end":190,"column_start":1,"column_end":98}},{"value":"/ * Internet Protocol, Version 6 (IPv6) Specification [RFC 8200](https://tools.ietf.org/html/rfc8200)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":10366,"byte_end":10469,"line_start":191,"line_end":191,"column_start":1,"column_end":104}},{"value":"/ * [IANA Protocol Numbers](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":10470,"byte_end":10573,"line_start":192,"line_end":192,"column_start":1,"column_end":104}},{"value":"/ * [Internet Protocol Version 6 (IPv6) Parameters](https://www.iana.org/assignments/ipv6-parameters/ipv6-parameters.xhtml)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":10574,"byte_end":10699,"line_start":193,"line_end":193,"column_start":1,"column_end":126}},{"value":"/ * [Wikipedia IEEE_802.1Q](https://en.wikipedia.org/w/index.php?title=IEEE_802.1Q&oldid=820983900)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":10700,"byte_end":10801,"line_start":194,"line_end":194,"column_start":1,"column_end":102}},{"value":"/ * User Datagram Protocol (UDP) [RFC 768](https://tools.ietf.org/html/rfc768)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":10802,"byte_end":10882,"line_start":195,"line_end":195,"column_start":1,"column_end":81}},{"value":"/ * Transmission Control Protocol [RFC 793](https://tools.ietf.org/html/rfc793)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":10883,"byte_end":10964,"line_start":196,"line_end":196,"column_start":1,"column_end":82}},{"value":"/ * TCP Extensions for High Performance [RFC 7323](https://tools.ietf.org/html/rfc7323)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":10965,"byte_end":11054,"line_start":197,"line_end":197,"column_start":1,"column_end":90}},{"value":"/ * The Addition of Explicit Congestion Notification (ECN) to IP [RFC 3168](https://tools.ietf.org/html/rfc3168)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":11055,"byte_end":11169,"line_start":198,"line_end":198,"column_start":1,"column_end":115}},{"value":"/ * Robust Explicit Congestion Notification (ECN) Signaling with Nonces [RFC 3540](https://tools.ietf.org/html/rfc3540)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":11170,"byte_end":11291,"line_start":199,"line_end":199,"column_start":1,"column_end":122}}]},{"kind":"TupleVariant","id":{"krate":0,"index":775},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":17992,"byte_end":17996,"line_start":11,"line_end":11,"column_start":5,"column_end":9},"name":"Ipv4","qualname":"::link::ethernet::EtherType::Ipv4","value":"EtherType::Ipv4","parent":{"krate":0,"index":774},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":778},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":18011,"byte_end":18015,"line_start":12,"line_end":12,"column_start":5,"column_end":9},"name":"Ipv6","qualname":"::link::ethernet::EtherType::Ipv6","value":"EtherType::Ipv6","parent":{"krate":0,"index":774},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":781},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":18030,"byte_end":18033,"line_start":13,"line_end":13,"column_start":5,"column_end":8},"name":"Arp","qualname":"::link::ethernet::EtherType::Arp","value":"EtherType::Arp","parent":{"krate":0,"index":774},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":784},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":18048,"byte_end":18057,"line_start":14,"line_end":14,"column_start":5,"column_end":14},"name":"WakeOnLan","qualname":"::link::ethernet::EtherType::WakeOnLan","value":"EtherType::WakeOnLan","parent":{"krate":0,"index":774},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":787},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":18072,"byte_end":18087,"line_start":15,"line_end":15,"column_start":5,"column_end":20},"name":"VlanTaggedFrame","qualname":"::link::ethernet::EtherType::VlanTaggedFrame","value":"EtherType::VlanTaggedFrame","parent":{"krate":0,"index":774},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":790},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":18102,"byte_end":18118,"line_start":16,"line_end":16,"column_start":5,"column_end":21},"name":"ProviderBridging","qualname":"::link::ethernet::EtherType::ProviderBridging","value":"EtherType::ProviderBridging","parent":{"krate":0,"index":774},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":793},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":18133,"byte_end":18154,"line_start":17,"line_end":17,"column_start":5,"column_end":26},"name":"VlanDoubleTaggedFrame","qualname":"::link::ethernet::EtherType::VlanDoubleTaggedFrame","value":"EtherType::VlanDoubleTaggedFrame","parent":{"krate":0,"index":774},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":774},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":17976,"byte_end":17985,"line_start":10,"line_end":10,"column_start":10,"column_end":19},"name":"EtherType","qualname":"::link::ethernet::EtherType","value":"pub enum EtherType {\n    Ipv4 = ,\n    Ipv6 = ,\n    Arp = ,\n    WakeOnLan = ,\n    VlanTaggedFrame = ,\n    ProviderBridging = ,\n    VlanDoubleTaggedFrame = ,\n}","parent":null,"children":[{"krate":0,"index":775},{"krate":0,"index":778},{"krate":0,"index":781},{"krate":0,"index":784},{"krate":0,"index":787},{"krate":0,"index":790},{"krate":0,"index":793}],"decl_id":null,"docs":"Ether type enum present in ethernet II header.\n","sig":null,"attributes":[{"value":"/Ether type enum present in ethernet II header.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":17878,"byte_end":17927,"line_start":8,"line_end":8,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":18309,"byte_end":18317,"line_start":22,"line_end":22,"column_start":12,"column_end":20},"name":"from_u16","qualname":"<EtherType>::from_u16","value":"pub fn from_u16(u16) -> Option<EtherType>","parent":null,"children":[],"decl_id":null,"docs":"Tries to convert a raw ether type value to the enum. Returns None if the value does not exist in the enum.\n","sig":null,"attributes":[{"value":"/Tries to convert a raw ether type value to the enum. Returns None if the value does not exist in the enum.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":18188,"byte_end":18297,"line_start":21,"line_end":21,"column_start":5,"column_end":114}}]},{"kind":"Struct","id":{"krate":0,"index":806},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":18812,"byte_end":18827,"line_start":39,"line_end":39,"column_start":12,"column_end":27},"name":"Ethernet2Header","qualname":"::link::ethernet::Ethernet2Header","value":"Ethernet2Header { source, destination, ether_type }","parent":null,"children":[{"krate":0,"index":807},{"krate":0,"index":809},{"krate":0,"index":811}],"decl_id":null,"docs":"Ethernet II header.\n","sig":null,"attributes":[{"value":"/Ethernet II header.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":18730,"byte_end":18752,"line_start":37,"line_end":37,"column_start":1,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":807},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":18838,"byte_end":18844,"line_start":40,"line_end":40,"column_start":9,"column_end":15},"name":"source","qualname":"::link::ethernet::Ethernet2Header::source","value":"[u8; 6]","parent":{"krate":0,"index":806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":809},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":18862,"byte_end":18873,"line_start":41,"line_end":41,"column_start":9,"column_end":20},"name":"destination","qualname":"::link::ethernet::Ethernet2Header::destination","value":"[u8; 6]","parent":{"krate":0,"index":806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":811},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":18891,"byte_end":18901,"line_start":42,"line_end":42,"column_start":9,"column_end":19},"name":"ether_type","qualname":"::link::ethernet::Ethernet2Header::ether_type","value":"u16","parent":{"krate":0,"index":806},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":19171,"byte_end":19186,"line_start":53,"line_end":53,"column_start":12,"column_end":27},"name":"read_from_slice","qualname":"<Ethernet2Header>::read_from_slice","value":"pub fn read_from_slice(&[u8]) -> Result<(Ethernet2Header, &[u8]), ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Read an Ethernet2Header from a slice and return the header & unused parts of the slice.\n","sig":null,"attributes":[{"value":"/Read an Ethernet2Header from a slice and return the header & unused parts of the slice.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":19069,"byte_end":19159,"line_start":52,"line_end":52,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":19496,"byte_end":19500,"line_start":61,"line_end":61,"column_start":12,"column_end":16},"name":"read","qualname":"<Ethernet2Header>::read","value":"pub fn read<T: io::Read + io::Seek + Sized>(&mut T)\n-> Result<Ethernet2Header, io::Error>","parent":null,"children":[],"decl_id":null,"docs":"Reads an Ethernet-II header from the current position of the read argument.\n","sig":null,"attributes":[{"value":"/Reads an Ethernet-II header from the current position of the read argument.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":19406,"byte_end":19484,"line_start":60,"line_end":60,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":20093,"byte_end":20107,"line_start":76,"line_end":76,"column_start":12,"column_end":26},"name":"write_to_slice","qualname":"<Ethernet2Header>::write_to_slice","value":"pub fn write_to_slice<'a>(&Self, &'a mut [u8])\n-> Result<&'a mut [u8], WriteError>","parent":null,"children":[],"decl_id":null,"docs":"Serialize the header to a given slice. Returns the unused part of the slice.\n","sig":null,"attributes":[{"value":"/Serialize the header to a given slice. Returns the unused part of the slice.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":20002,"byte_end":20081,"line_start":75,"line_end":75,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":20605,"byte_end":20610,"line_start":88,"line_end":88,"column_start":12,"column_end":17},"name":"write","qualname":"<Ethernet2Header>::write","value":"pub fn write<T: io::Write + Sized>(&Self, &mut T) -> Result<(), io::Error>","parent":null,"children":[],"decl_id":null,"docs":"Writes a given Ethernet-II header to the current position of the write argument.\n","sig":null,"attributes":[{"value":"/Writes a given Ethernet-II header to the current position of the write argument.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":20510,"byte_end":20593,"line_start":87,"line_end":87,"column_start":5,"column_end":88}}]},{"kind":"Struct","id":{"krate":0,"index":827},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":21286,"byte_end":21306,"line_start":104,"line_end":104,"column_start":12,"column_end":32},"name":"Ethernet2HeaderSlice","qualname":"::link::ethernet::Ethernet2HeaderSlice","value":"Ethernet2HeaderSlice {  }","parent":null,"children":[{"krate":0,"index":829}],"decl_id":null,"docs":"A slice containing an ethernet 2 header of a network package.\n","sig":null,"attributes":[{"value":"/A slice containing an ethernet 2 header of a network package.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":21171,"byte_end":21235,"line_start":102,"line_end":102,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":21436,"byte_end":21446,"line_start":110,"line_end":110,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<Ethernet2HeaderSlice>::from_slice","value":"pub fn from_slice(&'a [u8]) -> Result<Ethernet2HeaderSlice, ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Creates a ethernet slice from an other slice.\n","sig":null,"attributes":[{"value":"/Creates a ethernet slice from an other slice.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":21376,"byte_end":21424,"line_start":109,"line_end":109,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":21904,"byte_end":21909,"line_start":125,"line_end":125,"column_start":12,"column_end":17},"name":"slice","qualname":"<Ethernet2HeaderSlice>::slice","value":"pub fn slice(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":"Returns the slice containing the ethernet 2 header\n","sig":null,"attributes":[{"value":"/Returns the slice containing the ethernet 2 header","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":21825,"byte_end":21878,"line_start":123,"line_end":123,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":21883,"byte_end":21892,"line_start":124,"line_end":124,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":22008,"byte_end":22019,"line_start":130,"line_end":130,"column_start":12,"column_end":23},"name":"destination","qualname":"<Ethernet2HeaderSlice>::destination","value":"pub fn destination(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":"Read the destination mac address\n","sig":null,"attributes":[{"value":"/Read the destination mac address","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":21961,"byte_end":21996,"line_start":129,"line_end":129,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":22119,"byte_end":22125,"line_start":135,"line_end":135,"column_start":12,"column_end":18},"name":"source","qualname":"<Ethernet2HeaderSlice>::source","value":"pub fn source(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":"Read the source mac address\n","sig":null,"attributes":[{"value":"/Read the source mac address","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":22077,"byte_end":22107,"line_start":134,"line_end":134,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":22270,"byte_end":22280,"line_start":140,"line_end":140,"column_start":12,"column_end":22},"name":"ether_type","qualname":"<Ethernet2HeaderSlice>::ether_type","value":"pub fn ether_type(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"Read the ether_type field of the header (in system native byte order).\n","sig":null,"attributes":[{"value":"/Read the ether_type field of the header (in system native byte order).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":22185,"byte_end":22258,"line_start":139,"line_end":139,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":22437,"byte_end":22446,"line_start":145,"line_end":145,"column_start":12,"column_end":21},"name":"to_header","qualname":"<Ethernet2HeaderSlice>::to_header","value":"pub fn to_header(&Self) -> Ethernet2Header","parent":null,"children":[],"decl_id":null,"docs":"Decode all the fields and copy the results to a Ipv4Header struct\n","sig":null,"attributes":[{"value":"/Decode all the fields and copy the results to a Ipv4Header struct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":22357,"byte_end":22425,"line_start":144,"line_end":144,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":848},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":23231,"byte_end":23237,"line_start":12,"line_end":12,"column_start":5,"column_end":11},"name":"Single","qualname":"::link::vlan_tagging::VlanHeader::Single","value":"VlanHeader::Single(SingleVlanHeader)","parent":{"krate":0,"index":847},"children":[],"decl_id":null,"docs":"IEEE 802.1Q VLAN Tagging Header\n","sig":null,"attributes":[{"value":"/IEEE 802.1Q VLAN Tagging Header","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":23192,"byte_end":23226,"line_start":11,"line_end":11,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":851},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":23307,"byte_end":23313,"line_start":14,"line_end":14,"column_start":5,"column_end":11},"name":"Double","qualname":"::link::vlan_tagging::VlanHeader::Double","value":"VlanHeader::Double(DoubleVlanHeader)","parent":{"krate":0,"index":847},"children":[],"decl_id":null,"docs":"IEEE 802.1Q double VLAN Tagging Header\n","sig":null,"attributes":[{"value":"/IEEE 802.1Q double VLAN Tagging Header","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":23261,"byte_end":23302,"line_start":13,"line_end":13,"column_start":5,"column_end":46}}]},{"kind":"Enum","id":{"krate":0,"index":847},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":23175,"byte_end":23185,"line_start":10,"line_end":10,"column_start":10,"column_end":20},"name":"VlanHeader","qualname":"::link::vlan_tagging::VlanHeader","value":"pub enum VlanHeader { Single(SingleVlanHeader), Double(DoubleVlanHeader), }","parent":null,"children":[{"krate":0,"index":848},{"krate":0,"index":851}],"decl_id":null,"docs":"IEEE 802.1Q VLAN Tagging Header (can be single or double tagged).\n","sig":null,"attributes":[{"value":"/IEEE 802.1Q VLAN Tagging Header (can be single or double tagged).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":23058,"byte_end":23126,"line_start":8,"line_end":8,"column_start":1,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":865},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":23429,"byte_end":23445,"line_start":19,"line_end":19,"column_start":12,"column_end":28},"name":"SingleVlanHeader","qualname":"::link::vlan_tagging::SingleVlanHeader","value":"SingleVlanHeader { priority_code_point, drop_eligible_indicator, vlan_identifier, ether_type }","parent":null,"children":[{"krate":0,"index":866},{"krate":0,"index":867},{"krate":0,"index":868},{"krate":0,"index":869}],"decl_id":null,"docs":"IEEE 802.1Q VLAN Tagging Header\n","sig":null,"attributes":[{"value":"/IEEE 802.1Q VLAN Tagging Header","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":23335,"byte_end":23369,"line_start":17,"line_end":17,"column_start":1,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":866},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":23565,"byte_end":23584,"line_start":21,"line_end":21,"column_start":9,"column_end":28},"name":"priority_code_point","qualname":"::link::vlan_tagging::SingleVlanHeader::priority_code_point","value":"u8","parent":{"krate":0,"index":865},"children":[],"decl_id":null,"docs":"A 3 bit number which refers to the IEEE 802.1p class of service and maps to the frame priority level.\n","sig":null,"attributes":[{"value":"/A 3 bit number which refers to the IEEE 802.1p class of service and maps to the frame priority level.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":23452,"byte_end":23556,"line_start":20,"line_end":20,"column_start":5,"column_end":109}}]},{"kind":"Field","id":{"krate":0,"index":867},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":23678,"byte_end":23701,"line_start":23,"line_end":23,"column_start":9,"column_end":32},"name":"drop_eligible_indicator","qualname":"::link::vlan_tagging::SingleVlanHeader::drop_eligible_indicator","value":"bool","parent":{"krate":0,"index":865},"children":[],"decl_id":null,"docs":"Indicate that the frame may be dropped under the presence of congestion.\n","sig":null,"attributes":[{"value":"/Indicate that the frame may be dropped under the presence of congestion.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":23594,"byte_end":23669,"line_start":22,"line_end":22,"column_start":5,"column_end":80}}]},{"kind":"Field","id":{"krate":0,"index":868},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":23750,"byte_end":23765,"line_start":25,"line_end":25,"column_start":9,"column_end":24},"name":"vlan_identifier","qualname":"::link::vlan_tagging::SingleVlanHeader::vlan_identifier","value":"u16","parent":{"krate":0,"index":865},"children":[],"decl_id":null,"docs":"12 bits vland identifier.\n","sig":null,"attributes":[{"value":"/12 bits vland identifier.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":23713,"byte_end":23741,"line_start":24,"line_end":24,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":869},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":23918,"byte_end":23928,"line_start":27,"line_end":27,"column_start":9,"column_end":19},"name":"ether_type","qualname":"::link::vlan_tagging::SingleVlanHeader::ether_type","value":"u16","parent":{"krate":0,"index":865},"children":[],"decl_id":null,"docs":"\"Tag protocol identifier\": Type id of content after this header. Refer to the \"EtherType\" for a list of possible supported values.\n","sig":null,"attributes":[{"value":"/\"Tag protocol identifier\": Type id of content after this header. Refer to the \"EtherType\" for a list of possible supported values.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":23776,"byte_end":23909,"line_start":26,"line_end":26,"column_start":5,"column_end":138}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":24201,"byte_end":24216,"line_start":38,"line_end":38,"column_start":12,"column_end":27},"name":"read_from_slice","qualname":"<SingleVlanHeader>::read_from_slice","value":"pub fn read_from_slice(&[u8]) -> Result<(SingleVlanHeader, &[u8]), ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Read an SingleVlanHeader from a slice and return the header & unused parts of the slice.\n","sig":null,"attributes":[{"value":"/Read an SingleVlanHeader from a slice and return the header & unused parts of the slice.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":24098,"byte_end":24189,"line_start":37,"line_end":37,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":24494,"byte_end":24498,"line_start":46,"line_end":46,"column_start":12,"column_end":16},"name":"read","qualname":"<SingleVlanHeader>::read","value":"pub fn read<T: io::Read + io::Seek + Sized>(&mut T)\n-> Result<SingleVlanHeader, io::Error>","parent":null,"children":[],"decl_id":null,"docs":"Read a IEEE 802.1Q VLAN tagging header\n","sig":null,"attributes":[{"value":"/Read a IEEE 802.1Q VLAN tagging header","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":24441,"byte_end":24482,"line_start":45,"line_end":45,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":25312,"byte_end":25317,"line_start":66,"line_end":66,"column_start":12,"column_end":17},"name":"write","qualname":"<SingleVlanHeader>::write","value":"pub fn write<T: io::Write + Sized>(&Self, &mut T) -> Result<(), WriteError>","parent":null,"children":[],"decl_id":null,"docs":"Write the IEEE 802.1Q VLAN tagging header\n","sig":null,"attributes":[{"value":"/Write the IEEE 802.1Q VLAN tagging header","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":25256,"byte_end":25300,"line_start":65,"line_end":65,"column_start":5,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":883},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":26099,"byte_end":26115,"line_start":87,"line_end":87,"column_start":12,"column_end":28},"name":"DoubleVlanHeader","qualname":"::link::vlan_tagging::DoubleVlanHeader","value":"DoubleVlanHeader { outer, inner }","parent":null,"children":[{"krate":0,"index":884},{"krate":0,"index":885}],"decl_id":null,"docs":"IEEE 802.1Q double VLAN Tagging Header\n","sig":null,"attributes":[{"value":"/IEEE 802.1Q double VLAN Tagging Header","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":26007,"byte_end":26048,"line_start":85,"line_end":85,"column_start":1,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":884},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":26163,"byte_end":26168,"line_start":89,"line_end":89,"column_start":9,"column_end":14},"name":"outer","qualname":"::link::vlan_tagging::DoubleVlanHeader::outer","value":"link::vlan_tagging::SingleVlanHeader","parent":{"krate":0,"index":883},"children":[],"decl_id":null,"docs":"The outer vlan tagging header\n","sig":null,"attributes":[{"value":"/The outer vlan tagging header","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":26122,"byte_end":26154,"line_start":88,"line_end":88,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":885},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":26233,"byte_end":26238,"line_start":91,"line_end":91,"column_start":9,"column_end":14},"name":"inner","qualname":"::link::vlan_tagging::DoubleVlanHeader::inner","value":"link::vlan_tagging::SingleVlanHeader","parent":{"krate":0,"index":883},"children":[],"decl_id":null,"docs":"The inner vlan tagging header\n","sig":null,"attributes":[{"value":"/The inner vlan tagging header","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":26192,"byte_end":26224,"line_start":90,"line_end":90,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":26522,"byte_end":26537,"line_start":101,"line_end":101,"column_start":12,"column_end":27},"name":"read_from_slice","qualname":"<DoubleVlanHeader>::read_from_slice","value":"pub fn read_from_slice(&[u8]) -> Result<(DoubleVlanHeader, &[u8]), ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Read an DoubleVlanHeader from a slice and return the header & unused parts of the slice.\n","sig":null,"attributes":[{"value":"/Read an DoubleVlanHeader from a slice and return the header & unused parts of the slice.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":26419,"byte_end":26510,"line_start":100,"line_end":100,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":26827,"byte_end":26831,"line_start":109,"line_end":109,"column_start":12,"column_end":16},"name":"read","qualname":"<DoubleVlanHeader>::read","value":"pub fn read<T: io::Read + io::Seek + Sized>(&mut T)\n-> Result<DoubleVlanHeader, ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Read a double tagging header from the given source\n","sig":null,"attributes":[{"value":"/Read a double tagging header from the given source","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":26762,"byte_end":26815,"line_start":108,"line_end":108,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":27762,"byte_end":27767,"line_start":134,"line_end":134,"column_start":12,"column_end":17},"name":"write","qualname":"<DoubleVlanHeader>::write","value":"pub fn write<T: io::Write + Sized>(&Self, &mut T) -> Result<(), WriteError>","parent":null,"children":[],"decl_id":null,"docs":"Write the double IEEE 802.1Q VLAN tagging header\n","sig":null,"attributes":[{"value":"/Write the double IEEE 802.1Q VLAN tagging header","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":27699,"byte_end":27750,"line_start":133,"line_end":133,"column_start":5,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":897},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":28033,"byte_end":28054,"line_start":142,"line_end":142,"column_start":12,"column_end":33},"name":"SingleVlanHeaderSlice","qualname":"::link::vlan_tagging::SingleVlanHeaderSlice","value":"SingleVlanHeaderSlice {  }","parent":null,"children":[{"krate":0,"index":899}],"decl_id":null,"docs":"A slice containing a single vlan header of a network package.\n","sig":null,"attributes":[{"value":"/A slice containing a single vlan header of a network package.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":27918,"byte_end":27982,"line_start":140,"line_end":140,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":28181,"byte_end":28191,"line_start":148,"line_end":148,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<SingleVlanHeaderSlice>::from_slice","value":"pub fn from_slice(&'a [u8]) -> Result<SingleVlanHeaderSlice, ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Creates a vlan header slice from a slice.\n","sig":null,"attributes":[{"value":"/Creates a vlan header slice from a slice.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":28125,"byte_end":28169,"line_start":147,"line_end":147,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":28691,"byte_end":28696,"line_start":163,"line_end":163,"column_start":12,"column_end":17},"name":"slice","qualname":"<SingleVlanHeaderSlice>::slice","value":"pub fn slice(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":"Returns the slice containing the single vlan header\n","sig":null,"attributes":[{"value":"/Returns the slice containing the single vlan header","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":28611,"byte_end":28665,"line_start":161,"line_end":161,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":28670,"byte_end":28679,"line_start":162,"line_end":162,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":28925,"byte_end":28944,"line_start":168,"line_end":168,"column_start":12,"column_end":31},"name":"priority_code_point","qualname":"<SingleVlanHeaderSlice>::priority_code_point","value":"pub fn priority_code_point(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"Read the \"priority_code_point\" field from the slice. This is a 3 bit number which refers to the IEEE 802.1p class of service and maps to the frame priority level.\n","sig":null,"attributes":[{"value":"/Read the \"priority_code_point\" field from the slice. This is a 3 bit number which refers to the IEEE 802.1p class of service and maps to the frame priority level.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":28748,"byte_end":28913,"line_start":167,"line_end":167,"column_start":5,"column_end":170}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":29142,"byte_end":29165,"line_start":173,"line_end":173,"column_start":12,"column_end":35},"name":"drop_eligible_indicator","qualname":"<SingleVlanHeaderSlice>::drop_eligible_indicator","value":"pub fn drop_eligible_indicator(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Read the \"drop_eligible_indicator\" flag from the slice. Indicates that the frame may be dropped under the presence of congestion.\n","sig":null,"attributes":[{"value":"/Read the \"drop_eligible_indicator\" flag from the slice. Indicates that the frame may be dropped under the presence of congestion.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":28998,"byte_end":29130,"line_start":172,"line_end":172,"column_start":5,"column_end":137}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":29303,"byte_end":29318,"line_start":178,"line_end":178,"column_start":12,"column_end":27},"name":"vlan_identifier","qualname":"<SingleVlanHeaderSlice>::vlan_identifier","value":"pub fn vlan_identifier(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"Reads the 12 bits \"vland identifier\" field from the slice.\n","sig":null,"attributes":[{"value":"/Reads the 12 bits \"vland identifier\" field from the slice.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":29230,"byte_end":29291,"line_start":177,"line_end":177,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":29579,"byte_end":29589,"line_start":184,"line_end":184,"column_start":12,"column_end":22},"name":"ether_type","qualname":"<SingleVlanHeaderSlice>::ether_type","value":"pub fn ether_type(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"Read the \"Tag protocol identifier\" field from the slice. Refer to the \"EtherType\" for a list of possible supported values.\n","sig":null,"attributes":[{"value":"/Read the \"Tag protocol identifier\" field from the slice. Refer to the \"EtherType\" for a list of possible supported values.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":29442,"byte_end":29567,"line_start":183,"line_end":183,"column_start":5,"column_end":130}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":29750,"byte_end":29759,"line_start":189,"line_end":189,"column_start":12,"column_end":21},"name":"to_header","qualname":"<SingleVlanHeaderSlice>::to_header","value":"pub fn to_header(&Self) -> SingleVlanHeader","parent":null,"children":[],"decl_id":null,"docs":"Decode all the fields and copy the results to a SingleVlanHeader struct\n","sig":null,"attributes":[{"value":"/Decode all the fields and copy the results to a SingleVlanHeader struct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":29664,"byte_end":29738,"line_start":188,"line_end":188,"column_start":5,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":917},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":30177,"byte_end":30198,"line_start":201,"line_end":201,"column_start":12,"column_end":33},"name":"DoubleVlanHeaderSlice","qualname":"::link::vlan_tagging::DoubleVlanHeaderSlice","value":"DoubleVlanHeaderSlice {  }","parent":null,"children":[{"krate":0,"index":919}],"decl_id":null,"docs":"A slice containing an double vlan header of a network package.\n","sig":null,"attributes":[{"value":"/A slice containing an double vlan header of a network package.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":30061,"byte_end":30126,"line_start":199,"line_end":199,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":30327,"byte_end":30337,"line_start":207,"line_end":207,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<DoubleVlanHeaderSlice>::from_slice","value":"pub fn from_slice(&'a [u8]) -> Result<DoubleVlanHeaderSlice, ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Creates a double header slice from a slice.\n","sig":null,"attributes":[{"value":"/Creates a double header slice from a slice.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":30269,"byte_end":30315,"line_start":206,"line_end":206,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":31439,"byte_end":31444,"line_start":238,"line_end":238,"column_start":12,"column_end":17},"name":"slice","qualname":"<DoubleVlanHeaderSlice>::slice","value":"pub fn slice(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":"Returns the slice containing the double vlan header\n","sig":null,"attributes":[{"value":"/Returns the slice containing the double vlan header","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":31359,"byte_end":31413,"line_start":236,"line_end":236,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":31418,"byte_end":31427,"line_start":237,"line_end":237,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":31553,"byte_end":31558,"line_start":243,"line_end":243,"column_start":12,"column_end":17},"name":"outer","qualname":"<DoubleVlanHeaderSlice>::outer","value":"pub fn outer(&Self) -> SingleVlanHeaderSlice","parent":null,"children":[],"decl_id":null,"docs":"Returns a slice with the outer vlan header\n","sig":null,"attributes":[{"value":"/Returns a slice with the outer vlan header","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":31496,"byte_end":31541,"line_start":242,"line_end":242,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":31782,"byte_end":31787,"line_start":250,"line_end":250,"column_start":12,"column_end":17},"name":"inner","qualname":"<DoubleVlanHeaderSlice>::inner","value":"pub fn inner(&Self) -> SingleVlanHeaderSlice","parent":null,"children":[],"decl_id":null,"docs":"Returns a slice with the inner vlan header.\n","sig":null,"attributes":[{"value":"/Returns a slice with the inner vlan header.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":31724,"byte_end":31770,"line_start":249,"line_end":249,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":32074,"byte_end":32083,"line_start":257,"line_end":257,"column_start":12,"column_end":21},"name":"to_header","qualname":"<DoubleVlanHeaderSlice>::to_header","value":"pub fn to_header(&Self) -> DoubleVlanHeader","parent":null,"children":[],"decl_id":null,"docs":"Decode all the fields and copy the results to a DoubleVlanHeader struct\n","sig":null,"attributes":[{"value":"/Decode all the fields and copy the results to a DoubleVlanHeader struct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":31988,"byte_end":32062,"line_start":256,"line_end":256,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":938},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":32475,"byte_end":32483,"line_start":9,"line_end":9,"column_start":5,"column_end":13},"name":"Version4","qualname":"::internet::ip::IpHeader::Version4","value":"IpHeader::Version4(Ipv4Header)","parent":{"krate":0,"index":937},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":941},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":32501,"byte_end":32509,"line_start":10,"line_end":10,"column_start":5,"column_end":13},"name":"Version6","qualname":"::internet::ip::IpHeader::Version6","value":"IpHeader::Version6(Ipv6Header)","parent":{"krate":0,"index":937},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":937},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":32460,"byte_end":32468,"line_start":8,"line_end":8,"column_start":10,"column_end":18},"name":"IpHeader","qualname":"::internet::ip::IpHeader","value":"pub enum IpHeader { Version4(Ipv4Header), Version6(Ipv6Header), }","parent":null,"children":[{"krate":0,"index":938},{"krate":0,"index":941}],"decl_id":null,"docs":"Internet protocol headers version 4 & 6\n","sig":null,"attributes":[{"value":"/Internet protocol headers version 4 & 6","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":32369,"byte_end":32411,"line_start":6,"line_end":6,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":32641,"byte_end":32656,"line_start":15,"line_end":15,"column_start":12,"column_end":27},"name":"read_from_slice","qualname":"<IpHeader>::read_from_slice","value":"pub fn read_from_slice(&[u8]) -> Result<(IpHeader, &[u8]), ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Read an IpvHeader from a slice and return the header & unused parts of the slice.\n","sig":null,"attributes":[{"value":"/Read an IpvHeader from a slice and return the header & unused parts of the slice.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":32545,"byte_end":32629,"line_start":14,"line_end":14,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":33387,"byte_end":33391,"line_start":35,"line_end":35,"column_start":12,"column_end":16},"name":"read","qualname":"<IpHeader>::read","value":"pub fn read<T: io::Read + io::Seek + Sized>(&mut T)\n-> Result<IpHeader, ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Reads an IP (v4 or v6) header from the current position.\n","sig":null,"attributes":[{"value":"/Reads an IP (v4 or v6) header from the current position.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":33316,"byte_end":33375,"line_start":34,"line_end":34,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":33891,"byte_end":33896,"line_start":44,"line_end":44,"column_start":12,"column_end":17},"name":"write","qualname":"<IpHeader>::write","value":"pub fn write<T: io::Write + Sized>(&Self, &mut T) -> Result<(), WriteError>","parent":null,"children":[],"decl_id":null,"docs":"Writes an IP (v4 or v6) header to the current position\n","sig":null,"attributes":[{"value":"/Writes an IP (v4 or v6) header to the current position","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":33822,"byte_end":33879,"line_start":43,"line_end":43,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":956},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":34358,"byte_end":34376,"line_start":57,"line_end":57,"column_start":5,"column_end":23},"name":"IPv6HeaderHopByHop","qualname":"::internet::ip::IpTrafficClass::IPv6HeaderHopByHop","value":"IpTrafficClass::IPv6HeaderHopByHop","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"IPv6 Hop-by-Hop Option [RFC8200]\n","sig":null,"attributes":[{"value":"/IPv6 Hop-by-Hop Option [RFC8200]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":34318,"byte_end":34353,"line_start":56,"line_end":56,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":959},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":34427,"byte_end":34431,"line_start":59,"line_end":59,"column_start":5,"column_end":9},"name":"Icmp","qualname":"::internet::ip::IpTrafficClass::Icmp","value":"IpTrafficClass::Icmp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Internet Control Message [RFC792]\n","sig":null,"attributes":[{"value":"/Internet Control Message [RFC792]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":34386,"byte_end":34422,"line_start":58,"line_end":58,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":962},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":34484,"byte_end":34488,"line_start":61,"line_end":61,"column_start":5,"column_end":9},"name":"Igmp","qualname":"::internet::ip::IpTrafficClass::Igmp","value":"IpTrafficClass::Igmp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Internet Group Management [RFC1112]\n","sig":null,"attributes":[{"value":"/Internet Group Management [RFC1112]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":34441,"byte_end":34479,"line_start":60,"line_end":60,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":965},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":34533,"byte_end":34536,"line_start":63,"line_end":63,"column_start":5,"column_end":8},"name":"Ggp","qualname":"::internet::ip::IpTrafficClass::Ggp","value":"IpTrafficClass::Ggp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Gateway-to-Gateway [RFC823]\n","sig":null,"attributes":[{"value":"/Gateway-to-Gateway [RFC823]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":34498,"byte_end":34528,"line_start":62,"line_end":62,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":968},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":34582,"byte_end":34586,"line_start":65,"line_end":65,"column_start":5,"column_end":9},"name":"IPv4","qualname":"::internet::ip::IpTrafficClass::IPv4","value":"IpTrafficClass::IPv4","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"IPv4 encapsulation [RFC2003]\n","sig":null,"attributes":[{"value":"/IPv4 encapsulation [RFC2003]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":34546,"byte_end":34577,"line_start":64,"line_end":64,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":971},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":34629,"byte_end":34635,"line_start":67,"line_end":67,"column_start":5,"column_end":11},"name":"Stream","qualname":"::internet::ip::IpTrafficClass::Stream","value":"IpTrafficClass::Stream","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Stream [RFC1190][RFC1819]\n","sig":null,"attributes":[{"value":"/Stream [RFC1190][RFC1819]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":34596,"byte_end":34624,"line_start":66,"line_end":66,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":974},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":34682,"byte_end":34685,"line_start":69,"line_end":69,"column_start":5,"column_end":8},"name":"Tcp","qualname":"::internet::ip::IpTrafficClass::Tcp","value":"IpTrafficClass::Tcp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Transmission Control [RFC793]\n","sig":null,"attributes":[{"value":"/Transmission Control [RFC793]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":34645,"byte_end":34677,"line_start":68,"line_end":68,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":977},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":34723,"byte_end":34726,"line_start":71,"line_end":71,"column_start":5,"column_end":8},"name":"Cbt","qualname":"::internet::ip::IpTrafficClass::Cbt","value":"IpTrafficClass::Cbt","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"CBT [Tony_Ballardie]\n","sig":null,"attributes":[{"value":"/CBT [Tony_Ballardie]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":34695,"byte_end":34718,"line_start":70,"line_end":70,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":980},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":34791,"byte_end":34794,"line_start":73,"line_end":73,"column_start":5,"column_end":8},"name":"Egp","qualname":"::internet::ip::IpTrafficClass::Egp","value":"IpTrafficClass::Egp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Exterior Gateway Protocol [RFC888][David_Mills]\n","sig":null,"attributes":[{"value":"/Exterior Gateway Protocol [RFC888][David_Mills]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":34736,"byte_end":34786,"line_start":72,"line_end":72,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":983},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":34909,"byte_end":34912,"line_start":75,"line_end":75,"column_start":5,"column_end":8},"name":"Igp","qualname":"::internet::ip::IpTrafficClass::Igp","value":"IpTrafficClass::Igp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"any private interior gateway (used by Cisco for their IGRP) [Internet_Assigned_Numbers_Authority]\n","sig":null,"attributes":[{"value":"/any private interior gateway (used by Cisco for their IGRP) [Internet_Assigned_Numbers_Authority]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":34804,"byte_end":34904,"line_start":74,"line_end":74,"column_start":5,"column_end":105}}]},{"kind":"TupleVariant","id":{"krate":0,"index":986},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":34964,"byte_end":34973,"line_start":77,"line_end":77,"column_start":5,"column_end":14},"name":"BbnRccMon","qualname":"::internet::ip::IpTrafficClass::BbnRccMon","value":"IpTrafficClass::BbnRccMon","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"BBN RCC Monitoring [Steve_Chipman]\n","sig":null,"attributes":[{"value":"/BBN RCC Monitoring [Steve_Chipman]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":34922,"byte_end":34959,"line_start":76,"line_end":76,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":989},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":35037,"byte_end":35042,"line_start":79,"line_end":79,"column_start":5,"column_end":10},"name":"NvpII","qualname":"::internet::ip::IpTrafficClass::NvpII","value":"IpTrafficClass::NvpII","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Network Voice Protocol [RFC741][Steve_Casner]\n","sig":null,"attributes":[{"value":"/Network Voice Protocol [RFC741][Steve_Casner]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":34984,"byte_end":35032,"line_start":78,"line_end":78,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":992},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":35064,"byte_end":35067,"line_start":81,"line_end":81,"column_start":5,"column_end":8},"name":"Pup","qualname":"::internet::ip::IpTrafficClass::Pup","value":"IpTrafficClass::Pup","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"PUP\n","sig":null,"attributes":[{"value":"/PUP","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":35053,"byte_end":35059,"line_start":80,"line_end":80,"column_start":5,"column_end":11}}]},{"kind":"TupleVariant","id":{"krate":0,"index":995},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":35125,"byte_end":35130,"line_start":83,"line_end":83,"column_start":5,"column_end":10},"name":"Argus","qualname":"::internet::ip::IpTrafficClass::Argus","value":"IpTrafficClass::Argus","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"ARGUS (deprecated) [Robert_W_Scheifler]\n","sig":null,"attributes":[{"value":"/ARGUS (deprecated) [Robert_W_Scheifler]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":35078,"byte_end":35120,"line_start":82,"line_end":82,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":998},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":35174,"byte_end":35179,"line_start":85,"line_end":85,"column_start":5,"column_end":10},"name":"Emcon","qualname":"::internet::ip::IpTrafficClass::Emcon","value":"IpTrafficClass::Emcon","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"EMCON [<mystery contact>]\n","sig":null,"attributes":[{"value":"/EMCON [<mystery contact>]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":35141,"byte_end":35169,"line_start":84,"line_end":84,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1001},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":35316,"byte_end":35320,"line_start":87,"line_end":87,"column_start":5,"column_end":9},"name":"Xnet","qualname":"::internet::ip::IpTrafficClass::Xnet","value":"IpTrafficClass::Xnet","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Cross Net Debugger [Haverty, J., \"XNET Formats for Internet Protocol Version 4\", IEN 158, October 1980.][Jack_Haverty]\n","sig":null,"attributes":[{"value":"/Cross Net Debugger [Haverty, J., \"XNET Formats for Internet Protocol Version 4\", IEN 158, October 1980.][Jack_Haverty]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":35190,"byte_end":35311,"line_start":86,"line_end":86,"column_start":5,"column_end":126}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1004},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":35361,"byte_end":35366,"line_start":89,"line_end":89,"column_start":5,"column_end":10},"name":"Chaos","qualname":"::internet::ip::IpTrafficClass::Chaos","value":"IpTrafficClass::Chaos","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Chaos [J_Noel_Chiappa]\n","sig":null,"attributes":[{"value":"/Chaos [J_Noel_Chiappa]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":35331,"byte_end":35356,"line_start":88,"line_end":88,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1007},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":35419,"byte_end":35422,"line_start":91,"line_end":91,"column_start":5,"column_end":8},"name":"Udp","qualname":"::internet::ip::IpTrafficClass::Udp","value":"IpTrafficClass::Udp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"User Datagram [RFC768][Jon_Postel]\n","sig":null,"attributes":[{"value":"/User Datagram [RFC768][Jon_Postel]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":35377,"byte_end":35414,"line_start":90,"line_end":90,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1010},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":35571,"byte_end":35574,"line_start":93,"line_end":93,"column_start":5,"column_end":8},"name":"Mux","qualname":"::internet::ip::IpTrafficClass::Mux","value":"IpTrafficClass::Mux","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Multiplexing [Cohen, D. and J. Postel, \"Multiplexing Protocol\", IEN 90, USC/Information Sciences Institute, May 1979.][Jon_Postel]\n","sig":null,"attributes":[{"value":"/Multiplexing [Cohen, D. and J. Postel, \"Multiplexing Protocol\", IEN 90, USC/Information Sciences Institute, May 1979.][Jon_Postel]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":35433,"byte_end":35566,"line_start":92,"line_end":92,"column_start":5,"column_end":138}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1013},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":35633,"byte_end":35640,"line_start":95,"line_end":95,"column_start":5,"column_end":12},"name":"DcnMeas","qualname":"::internet::ip::IpTrafficClass::DcnMeas","value":"IpTrafficClass::DcnMeas","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"DCN Measurement Subsystems [David_Mills]\n","sig":null,"attributes":[{"value":"/DCN Measurement Subsystems [David_Mills]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":35585,"byte_end":35628,"line_start":94,"line_end":94,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1016},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":35695,"byte_end":35698,"line_start":97,"line_end":97,"column_start":5,"column_end":8},"name":"Hmp","qualname":"::internet::ip::IpTrafficClass::Hmp","value":"IpTrafficClass::Hmp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Host Monitoring [RFC869][Bob_Hinden]\n","sig":null,"attributes":[{"value":"/Host Monitoring [RFC869][Bob_Hinden]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":35651,"byte_end":35690,"line_start":96,"line_end":96,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1019},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":35755,"byte_end":35758,"line_start":99,"line_end":99,"column_start":5,"column_end":8},"name":"Prm","qualname":"::internet::ip::IpTrafficClass::Prm","value":"IpTrafficClass::Prm","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Packet Radio Measurement [Zaw_Sing_Su]\n","sig":null,"attributes":[{"value":"/Packet Radio Measurement [Zaw_Sing_Su]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":35709,"byte_end":35750,"line_start":98,"line_end":98,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1022},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":35789,"byte_end":35795,"line_start":101,"line_end":101,"column_start":5,"column_end":11},"name":"XnsIdp","qualname":"::internet::ip::IpTrafficClass::XnsIdp","value":"IpTrafficClass::XnsIdp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"XEROX NS IDP\n","sig":null,"attributes":[{"value":"/XEROX NS IDP","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":35769,"byte_end":35784,"line_start":100,"line_end":100,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1025},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":35835,"byte_end":35841,"line_start":103,"line_end":103,"column_start":5,"column_end":11},"name":"Trunk1","qualname":"::internet::ip::IpTrafficClass::Trunk1","value":"IpTrafficClass::Trunk1","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Trunk-1 [Barry_Boehm]\n","sig":null,"attributes":[{"value":"/Trunk-1 [Barry_Boehm]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":35806,"byte_end":35830,"line_start":102,"line_end":102,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1028},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":35881,"byte_end":35887,"line_start":105,"line_end":105,"column_start":5,"column_end":11},"name":"Trunk2","qualname":"::internet::ip::IpTrafficClass::Trunk2","value":"IpTrafficClass::Trunk2","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Trunk-2 [Barry_Boehm]\n","sig":null,"attributes":[{"value":"/Trunk-2 [Barry_Boehm]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":35852,"byte_end":35876,"line_start":104,"line_end":104,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1031},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":35926,"byte_end":35931,"line_start":107,"line_end":107,"column_start":5,"column_end":10},"name":"Leaf1","qualname":"::internet::ip::IpTrafficClass::Leaf1","value":"IpTrafficClass::Leaf1","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Leaf-1 [Barry_Boehm]\n","sig":null,"attributes":[{"value":"/Leaf-1 [Barry_Boehm]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":35898,"byte_end":35921,"line_start":106,"line_end":106,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1034},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":35970,"byte_end":35975,"line_start":109,"line_end":109,"column_start":5,"column_end":10},"name":"Leaf2","qualname":"::internet::ip::IpTrafficClass::Leaf2","value":"IpTrafficClass::Leaf2","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Leaf-2 [Barry_Boehm]\n","sig":null,"attributes":[{"value":"/Leaf-2 [Barry_Boehm]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":35942,"byte_end":35965,"line_start":108,"line_end":108,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1037},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":36037,"byte_end":36040,"line_start":111,"line_end":111,"column_start":5,"column_end":8},"name":"Rdp","qualname":"::internet::ip::IpTrafficClass::Rdp","value":"IpTrafficClass::Rdp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Reliable Data Protocol [RFC908][Bob_Hinden]\n","sig":null,"attributes":[{"value":"/Reliable Data Protocol [RFC908][Bob_Hinden]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":35986,"byte_end":36032,"line_start":110,"line_end":110,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1040},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":36111,"byte_end":36115,"line_start":113,"line_end":113,"column_start":5,"column_end":9},"name":"Irtp","qualname":"::internet::ip::IpTrafficClass::Irtp","value":"IpTrafficClass::Irtp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Internet Reliable Transaction [RFC938][Trudy_Miller]\n","sig":null,"attributes":[{"value":"/Internet Reliable Transaction [RFC938][Trudy_Miller]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":36051,"byte_end":36106,"line_start":112,"line_end":112,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1043},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":36192,"byte_end":36198,"line_start":115,"line_end":115,"column_start":5,"column_end":11},"name":"IsoTp4","qualname":"::internet::ip::IpTrafficClass::IsoTp4","value":"IpTrafficClass::IsoTp4","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"ISO Transport Protocol Class 4 [RFC905][<mystery contact>]\n","sig":null,"attributes":[{"value":"/ISO Transport Protocol Class 4 [RFC905][<mystery contact>]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":36126,"byte_end":36187,"line_start":114,"line_end":114,"column_start":5,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1046},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":36266,"byte_end":36272,"line_start":117,"line_end":117,"column_start":5,"column_end":11},"name":"NetBlt","qualname":"::internet::ip::IpTrafficClass::NetBlt","value":"IpTrafficClass::NetBlt","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Bulk Data Transfer Protocol [RFC969][David_Clark]\n","sig":null,"attributes":[{"value":"/Bulk Data Transfer Protocol [RFC969][David_Clark]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":36209,"byte_end":36261,"line_start":116,"line_end":116,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1049},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":36481,"byte_end":36487,"line_start":119,"line_end":119,"column_start":5,"column_end":11},"name":"MfeNsp","qualname":"::internet::ip::IpTrafficClass::MfeNsp","value":"IpTrafficClass::MfeNsp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"MFE Network Services Protocol [Shuttleworth, B., \"A Documentary of MFENet, a National Computer Network\", UCRL-52317, Lawrence Livermore Labs, Livermore, California, June 1977.][Barry_Howard]\n","sig":null,"attributes":[{"value":"/MFE Network Services Protocol [Shuttleworth, B., \"A Documentary of MFENet, a National Computer Network\", UCRL-52317, Lawrence Livermore Labs, Livermore, California, June 1977.][Barry_Howard]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":36283,"byte_end":36476,"line_start":118,"line_end":118,"column_start":5,"column_end":198}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1052},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":36551,"byte_end":36559,"line_start":121,"line_end":121,"column_start":5,"column_end":13},"name":"MeritInp","qualname":"::internet::ip::IpTrafficClass::MeritInp","value":"IpTrafficClass::MeritInp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"MERIT Internodal Protocol [Hans_Werner_Braun]\n","sig":null,"attributes":[{"value":"/MERIT Internodal Protocol [Hans_Werner_Braun]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":36498,"byte_end":36546,"line_start":120,"line_end":120,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1055},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":36624,"byte_end":36628,"line_start":123,"line_end":123,"column_start":5,"column_end":9},"name":"Dccp","qualname":"::internet::ip::IpTrafficClass::Dccp","value":"IpTrafficClass::Dccp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Datagram Congestion Control Protocol [RFC4340]\n","sig":null,"attributes":[{"value":"/Datagram Congestion Control Protocol [RFC4340]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":36570,"byte_end":36619,"line_start":122,"line_end":122,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1058},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":36696,"byte_end":36721,"line_start":125,"line_end":125,"column_start":5,"column_end":30},"name":"ThirdPartyConnectProtocol","qualname":"::internet::ip::IpTrafficClass::ThirdPartyConnectProtocol","value":"IpTrafficClass::ThirdPartyConnectProtocol","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Third Party Connect Protocol [Stuart_A_Friedberg]\n","sig":null,"attributes":[{"value":"/Third Party Connect Protocol [Stuart_A_Friedberg]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":36639,"byte_end":36691,"line_start":124,"line_end":124,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1061},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":36796,"byte_end":36800,"line_start":127,"line_end":127,"column_start":5,"column_end":9},"name":"Idpr","qualname":"::internet::ip::IpTrafficClass::Idpr","value":"IpTrafficClass::Idpr","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Inter-Domain Policy Routing Protocol [Martha_Steenstrup]\n","sig":null,"attributes":[{"value":"/Inter-Domain Policy Routing Protocol [Martha_Steenstrup]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":36732,"byte_end":36791,"line_start":126,"line_end":126,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1064},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":36837,"byte_end":36840,"line_start":129,"line_end":129,"column_start":5,"column_end":8},"name":"Xtp","qualname":"::internet::ip::IpTrafficClass::Xtp","value":"IpTrafficClass::Xtp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"XTP [Greg_Chesson]\n","sig":null,"attributes":[{"value":"/XTP [Greg_Chesson]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":36811,"byte_end":36832,"line_start":128,"line_end":128,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1067},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":36900,"byte_end":36903,"line_start":131,"line_end":131,"column_start":5,"column_end":8},"name":"Ddp","qualname":"::internet::ip::IpTrafficClass::Ddp","value":"IpTrafficClass::Ddp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Datagram Delivery Protocol [Wesley_Craig]\n","sig":null,"attributes":[{"value":"/Datagram Delivery Protocol [Wesley_Craig]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":36851,"byte_end":36895,"line_start":130,"line_end":130,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1070},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":36978,"byte_end":36986,"line_start":133,"line_end":133,"column_start":5,"column_end":13},"name":"IdprCmtp","qualname":"::internet::ip::IpTrafficClass::IdprCmtp","value":"IpTrafficClass::IdprCmtp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"IDPR Control Message Transport Proto [Martha_Steenstrup]\n","sig":null,"attributes":[{"value":"/IDPR Control Message Transport Proto [Martha_Steenstrup]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":36914,"byte_end":36973,"line_start":132,"line_end":132,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1073},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":37044,"byte_end":37054,"line_start":135,"line_end":135,"column_start":5,"column_end":15},"name":"TpPlusPlus","qualname":"::internet::ip::IpTrafficClass::TpPlusPlus","value":"IpTrafficClass::TpPlusPlus","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"TP++ Transport Protocol [Dirk_Fromhein]\n","sig":null,"attributes":[{"value":"/TP++ Transport Protocol [Dirk_Fromhein]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":36997,"byte_end":37039,"line_start":134,"line_end":134,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1076},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":37110,"byte_end":37112,"line_start":137,"line_end":137,"column_start":5,"column_end":7},"name":"Il","qualname":"::internet::ip::IpTrafficClass::Il","value":"IpTrafficClass::Il","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"IL Transport Protocol [Dave_Presotto]\n","sig":null,"attributes":[{"value":"/IL Transport Protocol [Dave_Presotto]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":37065,"byte_end":37105,"line_start":136,"line_end":136,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1079},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":37159,"byte_end":37163,"line_start":139,"line_end":139,"column_start":5,"column_end":9},"name":"Ipv6","qualname":"::internet::ip::IpTrafficClass::Ipv6","value":"IpTrafficClass::Ipv6","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"IPv6 encapsulation [RFC2473]\n","sig":null,"attributes":[{"value":"/IPv6 encapsulation [RFC2473]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":37123,"byte_end":37154,"line_start":138,"line_end":138,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1082},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":37229,"byte_end":37233,"line_start":141,"line_end":141,"column_start":5,"column_end":9},"name":"Sdrp","qualname":"::internet::ip::IpTrafficClass::Sdrp","value":"IpTrafficClass::Sdrp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Source Demand Routing Protocol [Deborah_Estrin]\n","sig":null,"attributes":[{"value":"/Source Demand Routing Protocol [Deborah_Estrin]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":37174,"byte_end":37224,"line_start":140,"line_end":140,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1085},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":37291,"byte_end":37306,"line_start":143,"line_end":143,"column_start":5,"column_end":20},"name":"IPv6RouteHeader","qualname":"::internet::ip::IpTrafficClass::IPv6RouteHeader","value":"IpTrafficClass::IPv6RouteHeader","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Routing Header for IPv6 [Steve_Deering]\n","sig":null,"attributes":[{"value":"/Routing Header for IPv6 [Steve_Deering]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":37244,"byte_end":37286,"line_start":142,"line_end":142,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1088},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":37365,"byte_end":37388,"line_start":145,"line_end":145,"column_start":5,"column_end":28},"name":"IPv6FragmentationHeader","qualname":"::internet::ip::IpTrafficClass::IPv6FragmentationHeader","value":"IpTrafficClass::IPv6FragmentationHeader","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Fragment Header for IPv6 [Steve_Deering]\n","sig":null,"attributes":[{"value":"/Fragment Header for IPv6 [Steve_Deering]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":37317,"byte_end":37360,"line_start":144,"line_end":144,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1091},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":37448,"byte_end":37452,"line_start":147,"line_end":147,"column_start":5,"column_end":9},"name":"Idrp","qualname":"::internet::ip::IpTrafficClass::Idrp","value":"IpTrafficClass::Idrp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Inter-Domain Routing Protocol [Sue_Hares]\n","sig":null,"attributes":[{"value":"/Inter-Domain Routing Protocol [Sue_Hares]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":37399,"byte_end":37443,"line_start":146,"line_end":146,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1094},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":37522,"byte_end":37526,"line_start":149,"line_end":149,"column_start":5,"column_end":9},"name":"Rsvp","qualname":"::internet::ip::IpTrafficClass::Rsvp","value":"IpTrafficClass::Rsvp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Reservation Protocol [RFC2205][RFC3209][Bob_Braden]\n","sig":null,"attributes":[{"value":"/Reservation Protocol [RFC2205][RFC3209][Bob_Braden]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":37463,"byte_end":37517,"line_start":148,"line_end":148,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1097},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":37593,"byte_end":37596,"line_start":151,"line_end":151,"column_start":5,"column_end":8},"name":"Gre","qualname":"::internet::ip::IpTrafficClass::Gre","value":"IpTrafficClass::Gre","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Generic Routing Encapsulation [RFC2784][Tony_Li]\n","sig":null,"attributes":[{"value":"/Generic Routing Encapsulation [RFC2784][Tony_Li]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":37537,"byte_end":37588,"line_start":150,"line_end":150,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1100},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":37656,"byte_end":37659,"line_start":153,"line_end":153,"column_start":5,"column_end":8},"name":"Dsr","qualname":"::internet::ip::IpTrafficClass::Dsr","value":"IpTrafficClass::Dsr","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Dynamic Source Routing Protocol [RFC4728]\n","sig":null,"attributes":[{"value":"/Dynamic Source Routing Protocol [RFC4728]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":37607,"byte_end":37651,"line_start":152,"line_end":152,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1103},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":37696,"byte_end":37699,"line_start":155,"line_end":155,"column_start":5,"column_end":8},"name":"Bna","qualname":"::internet::ip::IpTrafficClass::Bna","value":"IpTrafficClass::Bna","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"BNA [Gary Salamon]\n","sig":null,"attributes":[{"value":"/BNA [Gary Salamon]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":37670,"byte_end":37691,"line_start":154,"line_end":154,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1106},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":37750,"byte_end":37774,"line_start":157,"line_end":157,"column_start":5,"column_end":29},"name":"IPv6EncapSecurityPayload","qualname":"::internet::ip::IpTrafficClass::IPv6EncapSecurityPayload","value":"IpTrafficClass::IPv6EncapSecurityPayload","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Encap Security Payload [RFC4303]\n","sig":null,"attributes":[{"value":"/Encap Security Payload [RFC4303]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":37710,"byte_end":37745,"line_start":156,"line_end":156,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1109},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":37824,"byte_end":37848,"line_start":159,"line_end":159,"column_start":5,"column_end":29},"name":"IPv6AuthenticationHeader","qualname":"::internet::ip::IpTrafficClass::IPv6AuthenticationHeader","value":"IpTrafficClass::IPv6AuthenticationHeader","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Authentication Header [RFC4302]\n","sig":null,"attributes":[{"value":"/Authentication Header [RFC4302]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":37785,"byte_end":37819,"line_start":158,"line_end":158,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1112},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":37919,"byte_end":37924,"line_start":161,"line_end":161,"column_start":5,"column_end":10},"name":"Inlsp","qualname":"::internet::ip::IpTrafficClass::Inlsp","value":"IpTrafficClass::Inlsp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Integrated Net Layer Security  TUBA [K_Robert_Glenn]\n","sig":null,"attributes":[{"value":"/Integrated Net Layer Security  TUBA [K_Robert_Glenn]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":37859,"byte_end":37914,"line_start":160,"line_end":160,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1115},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":37991,"byte_end":37996,"line_start":163,"line_end":163,"column_start":5,"column_end":10},"name":"Swipe","qualname":"::internet::ip::IpTrafficClass::Swipe","value":"IpTrafficClass::Swipe","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"IP with Encryption (deprecated) [John_Ioannidis]\n","sig":null,"attributes":[{"value":"/IP with Encryption (deprecated) [John_Ioannidis]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":37935,"byte_end":37986,"line_start":162,"line_end":162,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1118},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":38057,"byte_end":38061,"line_start":165,"line_end":165,"column_start":5,"column_end":9},"name":"Narp","qualname":"::internet::ip::IpTrafficClass::Narp","value":"IpTrafficClass::Narp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"NBMA Address Resolution Protocol [RFC1735]\n","sig":null,"attributes":[{"value":"/NBMA Address Resolution Protocol [RFC1735]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":38007,"byte_end":38052,"line_start":164,"line_end":164,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1121},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":38109,"byte_end":38115,"line_start":167,"line_end":167,"column_start":5,"column_end":11},"name":"Mobile","qualname":"::internet::ip::IpTrafficClass::Mobile","value":"IpTrafficClass::Mobile","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"IP Mobility [Charlie_Perkins]\n","sig":null,"attributes":[{"value":"/IP Mobility [Charlie_Perkins]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":38072,"byte_end":38104,"line_start":166,"line_end":166,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1124},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":38215,"byte_end":38219,"line_start":169,"line_end":169,"column_start":5,"column_end":9},"name":"Tlsp","qualname":"::internet::ip::IpTrafficClass::Tlsp","value":"IpTrafficClass::Tlsp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Transport Layer Security Protocol using Kryptonet key management [Christer_Oberg]\n","sig":null,"attributes":[{"value":"/Transport Layer Security Protocol using Kryptonet key management [Christer_Oberg]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":38126,"byte_end":38210,"line_start":168,"line_end":168,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1127},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":38256,"byte_end":38260,"line_start":171,"line_end":171,"column_start":5,"column_end":9},"name":"Skip","qualname":"::internet::ip::IpTrafficClass::Skip","value":"IpTrafficClass::Skip","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"SKIP [Tom_Markson]\n","sig":null,"attributes":[{"value":"/SKIP [Tom_Markson]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":38230,"byte_end":38251,"line_start":170,"line_end":170,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1130},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":38302,"byte_end":38310,"line_start":173,"line_end":173,"column_start":5,"column_end":13},"name":"IPv6Icmp","qualname":"::internet::ip::IpTrafficClass::IPv6Icmp","value":"IpTrafficClass::IPv6Icmp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"ICMP for IPv6 [RFC8200]\n","sig":null,"attributes":[{"value":"/ICMP for IPv6 [RFC8200]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":38271,"byte_end":38297,"line_start":172,"line_end":172,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1133},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":38362,"byte_end":38378,"line_start":175,"line_end":175,"column_start":5,"column_end":21},"name":"IPv6NoNextHeader","qualname":"::internet::ip::IpTrafficClass::IPv6NoNextHeader","value":"IpTrafficClass::IPv6NoNextHeader","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"No Next Header for IPv6 [RFC8200]\n","sig":null,"attributes":[{"value":"/No Next Header for IPv6 [RFC8200]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":38321,"byte_end":38357,"line_start":174,"line_end":174,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1136},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":38435,"byte_end":38457,"line_start":177,"line_end":177,"column_start":5,"column_end":27},"name":"IPv6DestinationOptions","qualname":"::internet::ip::IpTrafficClass::IPv6DestinationOptions","value":"IpTrafficClass::IPv6DestinationOptions","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Destination Options for IPv6 [RFC8200]\n","sig":null,"attributes":[{"value":"/Destination Options for IPv6 [RFC8200]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":38389,"byte_end":38430,"line_start":176,"line_end":176,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1139},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":38540,"byte_end":38563,"line_start":179,"line_end":179,"column_start":5,"column_end":28},"name":"AnyHostInternalProtocol","qualname":"::internet::ip::IpTrafficClass::AnyHostInternalProtocol","value":"IpTrafficClass::AnyHostInternalProtocol","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"any host internal protocol [Internet_Assigned_Numbers_Authority]\n","sig":null,"attributes":[{"value":"/any host internal protocol [Internet_Assigned_Numbers_Authority]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":38468,"byte_end":38535,"line_start":178,"line_end":178,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1142},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":38682,"byte_end":38686,"line_start":181,"line_end":181,"column_start":5,"column_end":9},"name":"Cftp","qualname":"::internet::ip::IpTrafficClass::Cftp","value":"IpTrafficClass::Cftp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"CFTP [Forsdick, H., \"CFTP\", Network Message, Bolt Beranek and Newman, January 1982.][Harry_Forsdick]\n","sig":null,"attributes":[{"value":"/CFTP [Forsdick, H., \"CFTP\", Network Message, Bolt Beranek and Newman, January 1982.][Harry_Forsdick]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":38574,"byte_end":38677,"line_start":180,"line_end":180,"column_start":5,"column_end":108}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1145},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":38760,"byte_end":38775,"line_start":183,"line_end":183,"column_start":5,"column_end":20},"name":"AnyLocalNetwork","qualname":"::internet::ip::IpTrafficClass::AnyLocalNetwork","value":"IpTrafficClass::AnyLocalNetwork","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"any local network [Internet_Assigned_Numbers_Authority]\n","sig":null,"attributes":[{"value":"/any local network [Internet_Assigned_Numbers_Authority]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":38697,"byte_end":38755,"line_start":182,"line_end":182,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1148},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":38839,"byte_end":38847,"line_start":185,"line_end":185,"column_start":5,"column_end":13},"name":"SatExpak","qualname":"::internet::ip::IpTrafficClass::SatExpak","value":"IpTrafficClass::SatExpak","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"SATNET and Backroom EXPAK [Steven_Blumenthal]\n","sig":null,"attributes":[{"value":"/SATNET and Backroom EXPAK [Steven_Blumenthal]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":38786,"byte_end":38834,"line_start":184,"line_end":184,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1151},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":38886,"byte_end":38894,"line_start":187,"line_end":187,"column_start":5,"column_end":13},"name":"Krytolan","qualname":"::internet::ip::IpTrafficClass::Krytolan","value":"IpTrafficClass::Krytolan","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Kryptolan [Paul Liu]\n","sig":null,"attributes":[{"value":"/Kryptolan [Paul Liu]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":38858,"byte_end":38881,"line_start":186,"line_end":186,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1154},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":38965,"byte_end":38968,"line_start":189,"line_end":189,"column_start":5,"column_end":8},"name":"Rvd","qualname":"::internet::ip::IpTrafficClass::Rvd","value":"IpTrafficClass::Rvd","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"MIT Remote Virtual Disk Protocol [Michael_Greenwald]\n","sig":null,"attributes":[{"value":"/MIT Remote Virtual Disk Protocol [Michael_Greenwald]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":38905,"byte_end":38960,"line_start":188,"line_end":188,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1157},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":39036,"byte_end":39040,"line_start":191,"line_end":191,"column_start":5,"column_end":9},"name":"Ippc","qualname":"::internet::ip::IpTrafficClass::Ippc","value":"IpTrafficClass::Ippc","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Internet Pluribus Packet Core [Steven_Blumenthal]\n","sig":null,"attributes":[{"value":"/Internet Pluribus Packet Core [Steven_Blumenthal]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":38979,"byte_end":39031,"line_start":190,"line_end":190,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1160},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":39124,"byte_end":39148,"line_start":193,"line_end":193,"column_start":5,"column_end":29},"name":"AnyDistributedFileSystem","qualname":"::internet::ip::IpTrafficClass::AnyDistributedFileSystem","value":"IpTrafficClass::AnyDistributedFileSystem","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"any distributed file system [Internet_Assigned_Numbers_Authority]\n","sig":null,"attributes":[{"value":"/any distributed file system [Internet_Assigned_Numbers_Authority]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":39051,"byte_end":39119,"line_start":192,"line_end":192,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1163},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":39204,"byte_end":39210,"line_start":195,"line_end":195,"column_start":5,"column_end":11},"name":"SatMon","qualname":"::internet::ip::IpTrafficClass::SatMon","value":"IpTrafficClass::SatMon","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"SATNET Monitoring [Steven_Blumenthal]\n","sig":null,"attributes":[{"value":"/SATNET Monitoring [Steven_Blumenthal]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":39159,"byte_end":39199,"line_start":194,"line_end":194,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1166},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":39256,"byte_end":39260,"line_start":197,"line_end":197,"column_start":5,"column_end":9},"name":"Visa","qualname":"::internet::ip::IpTrafficClass::Visa","value":"IpTrafficClass::Visa","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"VISA Protocol [Gene_Tsudik]\n","sig":null,"attributes":[{"value":"/VISA Protocol [Gene_Tsudik]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":39221,"byte_end":39251,"line_start":196,"line_end":196,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1169},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":39327,"byte_end":39331,"line_start":199,"line_end":199,"column_start":5,"column_end":9},"name":"Ipcv","qualname":"::internet::ip::IpTrafficClass::Ipcv","value":"IpTrafficClass::Ipcv","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Internet Packet Core Utility [Steven_Blumenthal]\n","sig":null,"attributes":[{"value":"/Internet Packet Core Utility [Steven_Blumenthal]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":39271,"byte_end":39322,"line_start":198,"line_end":198,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1172},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":39403,"byte_end":39407,"line_start":201,"line_end":201,"column_start":5,"column_end":9},"name":"Cpnx","qualname":"::internet::ip::IpTrafficClass::Cpnx","value":"IpTrafficClass::Cpnx","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Computer Protocol Network Executive [David Mittnacht]\n","sig":null,"attributes":[{"value":"/Computer Protocol Network Executive [David Mittnacht]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":39342,"byte_end":39398,"line_start":200,"line_end":200,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1175},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":39472,"byte_end":39476,"line_start":203,"line_end":203,"column_start":5,"column_end":9},"name":"Cphb","qualname":"::internet::ip::IpTrafficClass::Cphb","value":"IpTrafficClass::Cphb","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Computer Protocol Heart Beat [David Mittnacht]\n","sig":null,"attributes":[{"value":"/Computer Protocol Heart Beat [David Mittnacht]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":39418,"byte_end":39467,"line_start":202,"line_end":202,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1178},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":39530,"byte_end":39533,"line_start":205,"line_end":205,"column_start":5,"column_end":8},"name":"Wsn","qualname":"::internet::ip::IpTrafficClass::Wsn","value":"IpTrafficClass::Wsn","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Wang Span Network [Victor Dafoulas]\n","sig":null,"attributes":[{"value":"/Wang Span Network [Victor Dafoulas]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":39487,"byte_end":39525,"line_start":204,"line_end":204,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1181},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":39588,"byte_end":39591,"line_start":207,"line_end":207,"column_start":5,"column_end":8},"name":"Pvp","qualname":"::internet::ip::IpTrafficClass::Pvp","value":"IpTrafficClass::Pvp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Packet Video Protocol [Steve_Casner]\n","sig":null,"attributes":[{"value":"/Packet Video Protocol [Steve_Casner]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":39544,"byte_end":39583,"line_start":206,"line_end":206,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1184},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":39656,"byte_end":39664,"line_start":209,"line_end":209,"column_start":5,"column_end":13},"name":"BrSatMon","qualname":"::internet::ip::IpTrafficClass::BrSatMon","value":"IpTrafficClass::BrSatMon","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Backroom SATNET Monitoring [Steven_Blumenthal]\n","sig":null,"attributes":[{"value":"/Backroom SATNET Monitoring [Steven_Blumenthal]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":39602,"byte_end":39651,"line_start":208,"line_end":208,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1187},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":39725,"byte_end":39730,"line_start":211,"line_end":211,"column_start":5,"column_end":10},"name":"SunNd","qualname":"::internet::ip::IpTrafficClass::SunNd","value":"IpTrafficClass::SunNd","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"SUN ND PROTOCOL-Temporary [William_Melohn]\n","sig":null,"attributes":[{"value":"/SUN ND PROTOCOL-Temporary [William_Melohn]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":39675,"byte_end":39720,"line_start":210,"line_end":210,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1190},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":39788,"byte_end":39793,"line_start":213,"line_end":213,"column_start":5,"column_end":10},"name":"WbMon","qualname":"::internet::ip::IpTrafficClass::WbMon","value":"IpTrafficClass::WbMon","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"WIDEBAND Monitoring [Steven_Blumenthal]\n","sig":null,"attributes":[{"value":"/WIDEBAND Monitoring [Steven_Blumenthal]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":39741,"byte_end":39783,"line_start":212,"line_end":212,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1193},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":39846,"byte_end":39853,"line_start":215,"line_end":215,"column_start":5,"column_end":12},"name":"WbExpak","qualname":"::internet::ip::IpTrafficClass::WbExpak","value":"IpTrafficClass::WbExpak","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"WIDEBAND EXPAK [Steven_Blumenthal]\n","sig":null,"attributes":[{"value":"/WIDEBAND EXPAK [Steven_Blumenthal]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":39804,"byte_end":39841,"line_start":214,"line_end":214,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1196},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":39911,"byte_end":39916,"line_start":217,"line_end":217,"column_start":5,"column_end":10},"name":"IsoIp","qualname":"::internet::ip::IpTrafficClass::IsoIp","value":"IpTrafficClass::IsoIp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"ISO Internet Protocol [Marshall_T_Rose]\n","sig":null,"attributes":[{"value":"/ISO Internet Protocol [Marshall_T_Rose]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":39864,"byte_end":39906,"line_start":216,"line_end":216,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1199},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":39955,"byte_end":39959,"line_start":219,"line_end":219,"column_start":5,"column_end":9},"name":"Vmtp","qualname":"::internet::ip::IpTrafficClass::Vmtp","value":"IpTrafficClass::Vmtp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"VMTP [Dave_Cheriton]\n","sig":null,"attributes":[{"value":"/VMTP [Dave_Cheriton]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":39927,"byte_end":39950,"line_start":218,"line_end":218,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1202},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":40005,"byte_end":40015,"line_start":221,"line_end":221,"column_start":5,"column_end":15},"name":"SecureVmtp","qualname":"::internet::ip::IpTrafficClass::SecureVmtp","value":"IpTrafficClass::SecureVmtp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"SECURE-VMTP [Dave_Cheriton]\n","sig":null,"attributes":[{"value":"/SECURE-VMTP [Dave_Cheriton]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":39970,"byte_end":40000,"line_start":220,"line_end":220,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1205},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":40052,"byte_end":40057,"line_start":223,"line_end":223,"column_start":5,"column_end":10},"name":"Vines","qualname":"::internet::ip::IpTrafficClass::Vines","value":"IpTrafficClass::Vines","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"VINES [Brian Horn]\n","sig":null,"attributes":[{"value":"/VINES [Brian Horn]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":40026,"byte_end":40047,"line_start":222,"line_end":222,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1208},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":40157,"byte_end":40166,"line_start":225,"line_end":225,"column_start":5,"column_end":14},"name":"TtpOrIptm","qualname":"::internet::ip::IpTrafficClass::TtpOrIptm","value":"IpTrafficClass::TtpOrIptm","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Transaction Transport Protocol or Internet Protocol Traffic Manager [Jim_Stevens]\n","sig":null,"attributes":[{"value":"/Transaction Transport Protocol or Internet Protocol Traffic Manager [Jim_Stevens]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":40068,"byte_end":40152,"line_start":224,"line_end":224,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1211},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":40215,"byte_end":40224,"line_start":227,"line_end":227,"column_start":5,"column_end":14},"name":"NsfnetIgp","qualname":"::internet::ip::IpTrafficClass::NsfnetIgp","value":"IpTrafficClass::NsfnetIgp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"NSFNET-IGP [Hans_Werner_Braun]\n","sig":null,"attributes":[{"value":"/NSFNET-IGP [Hans_Werner_Braun]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":40177,"byte_end":40210,"line_start":226,"line_end":226,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1214},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":40415,"byte_end":40418,"line_start":229,"line_end":229,"column_start":5,"column_end":8},"name":"Dgp","qualname":"::internet::ip::IpTrafficClass::Dgp","value":"IpTrafficClass::Dgp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Dissimilar Gateway Protocol [M/A-COM Government Systems, \"Dissimilar Gateway Protocol Specification, Draft Version\", Contract no. CS901145, November 16, 1987.][Mike_Little]\n","sig":null,"attributes":[{"value":"/Dissimilar Gateway Protocol [M/A-COM Government Systems, \"Dissimilar Gateway Protocol Specification, Draft Version\", Contract no. CS901145, November 16, 1987.][Mike_Little]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":40235,"byte_end":40410,"line_start":228,"line_end":228,"column_start":5,"column_end":180}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1217},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":40461,"byte_end":40464,"line_start":231,"line_end":231,"column_start":5,"column_end":8},"name":"Tcf","qualname":"::internet::ip::IpTrafficClass::Tcf","value":"IpTrafficClass::Tcf","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"TCF [Guillermo_A_Loyola]\n","sig":null,"attributes":[{"value":"/TCF [Guillermo_A_Loyola]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":40429,"byte_end":40456,"line_start":230,"line_end":230,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1220},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":40498,"byte_end":40503,"line_start":233,"line_end":233,"column_start":5,"column_end":10},"name":"Eigrp","qualname":"::internet::ip::IpTrafficClass::Eigrp","value":"IpTrafficClass::Eigrp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"EIGRP [RFC7868]\n","sig":null,"attributes":[{"value":"/EIGRP [RFC7868]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":40475,"byte_end":40493,"line_start":232,"line_end":232,"column_start":5,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1223},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":40567,"byte_end":40574,"line_start":235,"line_end":235,"column_start":5,"column_end":12},"name":"Ospfigp","qualname":"::internet::ip::IpTrafficClass::Ospfigp","value":"IpTrafficClass::Ospfigp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"OSPFIGP [RFC1583][RFC2328][RFC5340][John_Moy]\n","sig":null,"attributes":[{"value":"/OSPFIGP [RFC1583][RFC2328][RFC5340][John_Moy]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":40514,"byte_end":40562,"line_start":234,"line_end":234,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1226},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":40786,"byte_end":40795,"line_start":237,"line_end":237,"column_start":5,"column_end":14},"name":"SpriteRpc","qualname":"::internet::ip::IpTrafficClass::SpriteRpc","value":"IpTrafficClass::SpriteRpc","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Sprite RPC Protocol [Welch, B., \"The Sprite Remote Procedure Call System\", Technical Report, UCB/Computer Science Dept., 86/302, University of California at Berkeley, June 1986.][Bruce Willins]\n","sig":null,"attributes":[{"value":"/Sprite RPC Protocol [Welch, B., \"The Sprite Remote Procedure Call System\", Technical Report, UCB/Computer Science Dept., 86/302, University of California at Berkeley, June 1986.][Bruce Willins]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":40585,"byte_end":40781,"line_start":236,"line_end":236,"column_start":5,"column_end":201}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1229},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":40860,"byte_end":40864,"line_start":239,"line_end":239,"column_start":5,"column_end":9},"name":"Larp","qualname":"::internet::ip::IpTrafficClass::Larp","value":"IpTrafficClass::Larp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Locus Address Resolution Protocol [Brian Horn]\n","sig":null,"attributes":[{"value":"/Locus Address Resolution Protocol [Brian Horn]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":40806,"byte_end":40855,"line_start":238,"line_end":238,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1232},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":40929,"byte_end":40932,"line_start":241,"line_end":241,"column_start":5,"column_end":8},"name":"Mtp","qualname":"::internet::ip::IpTrafficClass::Mtp","value":"IpTrafficClass::Mtp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Multicast Transport Protocol [Susie_Armstrong]\n","sig":null,"attributes":[{"value":"/Multicast Transport Protocol [Susie_Armstrong]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":40875,"byte_end":40924,"line_start":240,"line_end":240,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1235},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":40978,"byte_end":40982,"line_start":243,"line_end":243,"column_start":5,"column_end":9},"name":"Ax25","qualname":"::internet::ip::IpTrafficClass::Ax25","value":"IpTrafficClass::Ax25","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"AX.25 Frames [Brian_Kantor]\n","sig":null,"attributes":[{"value":"/AX.25 Frames [Brian_Kantor]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":40943,"byte_end":40973,"line_start":242,"line_end":242,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1238},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":41053,"byte_end":41057,"line_start":245,"line_end":245,"column_start":5,"column_end":9},"name":"Ipip","qualname":"::internet::ip::IpTrafficClass::Ipip","value":"IpTrafficClass::Ipip","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"IP-within-IP Encapsulation Protocol [John_Ioannidis]\n","sig":null,"attributes":[{"value":"/IP-within-IP Encapsulation Protocol [John_Ioannidis]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":40993,"byte_end":41048,"line_start":244,"line_end":244,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1241},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":41141,"byte_end":41145,"line_start":247,"line_end":247,"column_start":5,"column_end":9},"name":"Micp","qualname":"::internet::ip::IpTrafficClass::Micp","value":"IpTrafficClass::Micp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Mobile Internetworking Control Pro. (deprecated) [John_Ioannidis]\n","sig":null,"attributes":[{"value":"/Mobile Internetworking Control Pro. (deprecated) [John_Ioannidis]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":41068,"byte_end":41136,"line_start":246,"line_end":246,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1244},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":41212,"byte_end":41217,"line_start":249,"line_end":249,"column_start":5,"column_end":10},"name":"SccSp","qualname":"::internet::ip::IpTrafficClass::SccSp","value":"IpTrafficClass::SccSp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Semaphore Communications Sec. Pro. [Howard_Hart]\n","sig":null,"attributes":[{"value":"/Semaphore Communications Sec. Pro. [Howard_Hart]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":41156,"byte_end":41207,"line_start":248,"line_end":248,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1247},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":41278,"byte_end":41285,"line_start":251,"line_end":251,"column_start":5,"column_end":12},"name":"EtherIp","qualname":"::internet::ip::IpTrafficClass::EtherIp","value":"IpTrafficClass::EtherIp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Ethernet-within-IP Encapsulation [RFC3378]\n","sig":null,"attributes":[{"value":"/Ethernet-within-IP Encapsulation [RFC3378]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":41228,"byte_end":41273,"line_start":250,"line_end":250,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1250},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":41351,"byte_end":41356,"line_start":253,"line_end":253,"column_start":5,"column_end":10},"name":"Encap","qualname":"::internet::ip::IpTrafficClass::Encap","value":"IpTrafficClass::Encap","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Encapsulation Header [RFC1241][Robert_Woodburn]\n","sig":null,"attributes":[{"value":"/Encapsulation Header [RFC1241][Robert_Woodburn]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":41296,"byte_end":41346,"line_start":252,"line_end":252,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1253},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":41388,"byte_end":41392,"line_start":255,"line_end":255,"column_start":5,"column_end":9},"name":"Gmtp","qualname":"::internet::ip::IpTrafficClass::Gmtp","value":"IpTrafficClass::Gmtp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"GMTP [[RXB5]]\n","sig":null,"attributes":[{"value":"/GMTP [[RXB5]]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":41367,"byte_end":41383,"line_start":254,"line_end":254,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1256},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":41479,"byte_end":41483,"line_start":257,"line_end":257,"column_start":5,"column_end":9},"name":"Ifmp","qualname":"::internet::ip::IpTrafficClass::Ifmp","value":"IpTrafficClass::Ifmp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Ipsilon Flow Management Protocol [Bob_Hinden][November 1995, 1997.]\n","sig":null,"attributes":[{"value":"/Ipsilon Flow Management Protocol [Bob_Hinden][November 1995, 1997.]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":41404,"byte_end":41474,"line_start":256,"line_end":256,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1259},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":41529,"byte_end":41533,"line_start":259,"line_end":259,"column_start":5,"column_end":9},"name":"Pnni","qualname":"::internet::ip::IpTrafficClass::Pnni","value":"IpTrafficClass::Pnni","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"PNNI over IP [Ross_Callon]\n","sig":null,"attributes":[{"value":"/PNNI over IP [Ross_Callon]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":41495,"byte_end":41524,"line_start":258,"line_end":258,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1262},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":41609,"byte_end":41612,"line_start":261,"line_end":261,"column_start":5,"column_end":8},"name":"Pim","qualname":"::internet::ip::IpTrafficClass::Pim","value":"IpTrafficClass::Pim","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Protocol Independent Multicast [RFC7761][Dino_Farinacci]\n","sig":null,"attributes":[{"value":"/Protocol Independent Multicast [RFC7761][Dino_Farinacci]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":41545,"byte_end":41604,"line_start":260,"line_end":260,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1265},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":41652,"byte_end":41656,"line_start":263,"line_end":263,"column_start":5,"column_end":9},"name":"Aris","qualname":"::internet::ip::IpTrafficClass::Aris","value":"IpTrafficClass::Aris","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"ARIS [Nancy_Feldman]\n","sig":null,"attributes":[{"value":"/ARIS [Nancy_Feldman]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":41624,"byte_end":41647,"line_start":262,"line_end":262,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1268},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":41695,"byte_end":41699,"line_start":265,"line_end":265,"column_start":5,"column_end":9},"name":"Scps","qualname":"::internet::ip::IpTrafficClass::Scps","value":"IpTrafficClass::Scps","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"SCPS [Robert_Durst]\n","sig":null,"attributes":[{"value":"/SCPS [Robert_Durst]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":41668,"byte_end":41690,"line_start":264,"line_end":264,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1271},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":41739,"byte_end":41742,"line_start":267,"line_end":267,"column_start":5,"column_end":8},"name":"Qnx","qualname":"::internet::ip::IpTrafficClass::Qnx","value":"IpTrafficClass::Qnx","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"QNX [Michael_Hunter]\n","sig":null,"attributes":[{"value":"/QNX [Michael_Hunter]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":41711,"byte_end":41734,"line_start":266,"line_end":266,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1274},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":41790,"byte_end":41804,"line_start":269,"line_end":269,"column_start":5,"column_end":19},"name":"ActiveNetworks","qualname":"::internet::ip::IpTrafficClass::ActiveNetworks","value":"IpTrafficClass::ActiveNetworks","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Active Networks [Bob_Braden]\n","sig":null,"attributes":[{"value":"/Active Networks [Bob_Braden]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":41754,"byte_end":41785,"line_start":268,"line_end":268,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1277},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":41865,"byte_end":41871,"line_start":271,"line_end":271,"column_start":5,"column_end":11},"name":"IpComp","qualname":"::internet::ip::IpTrafficClass::IpComp","value":"IpTrafficClass::IpComp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"IP Payload Compression Protocol [RFC2393]\n","sig":null,"attributes":[{"value":"/IP Payload Compression Protocol [RFC2393]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":41816,"byte_end":41860,"line_start":270,"line_end":270,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1280},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":41936,"byte_end":41957,"line_start":273,"line_end":273,"column_start":5,"column_end":26},"name":"SitraNetworksProtocol","qualname":"::internet::ip::IpTrafficClass::SitraNetworksProtocol","value":"IpTrafficClass::SitraNetworksProtocol","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Sitara Networks Protocol [Manickam_R_Sridhar]\n","sig":null,"attributes":[{"value":"/Sitara Networks Protocol [Manickam_R_Sridhar]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":41883,"byte_end":41931,"line_start":272,"line_end":272,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1283},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":42012,"byte_end":42022,"line_start":275,"line_end":275,"column_start":5,"column_end":15},"name":"CompaqPeer","qualname":"::internet::ip::IpTrafficClass::CompaqPeer","value":"IpTrafficClass::CompaqPeer","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Compaq Peer Protocol [Victor_Volpe]\n","sig":null,"attributes":[{"value":"/Compaq Peer Protocol [Victor_Volpe]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":41969,"byte_end":42007,"line_start":274,"line_end":274,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1286},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":42060,"byte_end":42067,"line_start":277,"line_end":277,"column_start":5,"column_end":12},"name":"IpxInIp","qualname":"::internet::ip::IpTrafficClass::IpxInIp","value":"IpTrafficClass::IpxInIp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"IPX in IP [CJ_Lee]\n","sig":null,"attributes":[{"value":"/IPX in IP [CJ_Lee]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":42034,"byte_end":42055,"line_start":276,"line_end":276,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1289},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":42131,"byte_end":42135,"line_start":279,"line_end":279,"column_start":5,"column_end":9},"name":"Vrrp","qualname":"::internet::ip::IpTrafficClass::Vrrp","value":"IpTrafficClass::Vrrp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Virtual Router Redundancy Protocol [RFC5798]\n","sig":null,"attributes":[{"value":"/Virtual Router Redundancy Protocol [RFC5798]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":42079,"byte_end":42126,"line_start":278,"line_end":278,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1292},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":42202,"byte_end":42205,"line_start":281,"line_end":281,"column_start":5,"column_end":8},"name":"Pgm","qualname":"::internet::ip::IpTrafficClass::Pgm","value":"IpTrafficClass::Pgm","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"PGM Reliable Transport Protocol [Tony_Speakman]\n","sig":null,"attributes":[{"value":"/PGM Reliable Transport Protocol [Tony_Speakman]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":42147,"byte_end":42197,"line_start":280,"line_end":280,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1295},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":42281,"byte_end":42299,"line_start":283,"line_end":283,"column_start":5,"column_end":23},"name":"AnyZeroHopProtocol","qualname":"::internet::ip::IpTrafficClass::AnyZeroHopProtocol","value":"IpTrafficClass::AnyZeroHopProtocol","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"any 0-hop protocol [Internet_Assigned_Numbers_Authority]\n","sig":null,"attributes":[{"value":"/any 0-hop protocol [Internet_Assigned_Numbers_Authority]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":42217,"byte_end":42276,"line_start":282,"line_end":282,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1298},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":42372,"byte_end":42395,"line_start":285,"line_end":285,"column_start":5,"column_end":28},"name":"Layer2TunnelingProtocol","qualname":"::internet::ip::IpTrafficClass::Layer2TunnelingProtocol","value":"IpTrafficClass::Layer2TunnelingProtocol","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Layer Two Tunneling Protocol [RFC3931][Bernard_Aboba]\n","sig":null,"attributes":[{"value":"/Layer Two Tunneling Protocol [RFC3931][Bernard_Aboba]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":42311,"byte_end":42367,"line_start":284,"line_end":284,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1301},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":42453,"byte_end":42456,"line_start":287,"line_end":287,"column_start":5,"column_end":8},"name":"Ddx","qualname":"::internet::ip::IpTrafficClass::Ddx","value":"IpTrafficClass::Ddx","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"D-II Data Exchange (DDX) [John_Worley]\n","sig":null,"attributes":[{"value":"/D-II Data Exchange (DDX) [John_Worley]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":42407,"byte_end":42448,"line_start":286,"line_end":286,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1304},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":42525,"byte_end":42529,"line_start":289,"line_end":289,"column_start":5,"column_end":9},"name":"Iatp","qualname":"::internet::ip::IpTrafficClass::Iatp","value":"IpTrafficClass::Iatp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Interactive Agent Transfer Protocol [John_Murphy]\n","sig":null,"attributes":[{"value":"/Interactive Agent Transfer Protocol [John_Murphy]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":42468,"byte_end":42520,"line_start":288,"line_end":288,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1307},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":42596,"byte_end":42599,"line_start":291,"line_end":291,"column_start":5,"column_end":8},"name":"Stp","qualname":"::internet::ip::IpTrafficClass::Stp","value":"IpTrafficClass::Stp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Schedule Transfer Protocol [Jean_Michel_Pittet]\n","sig":null,"attributes":[{"value":"/Schedule Transfer Protocol [Jean_Michel_Pittet]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":42541,"byte_end":42591,"line_start":290,"line_end":290,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1310},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":42661,"byte_end":42664,"line_start":293,"line_end":293,"column_start":5,"column_end":8},"name":"Srp","qualname":"::internet::ip::IpTrafficClass::Srp","value":"IpTrafficClass::Srp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"SpectraLink Radio Protocol [Mark_Hamilton]\n","sig":null,"attributes":[{"value":"/SpectraLink Radio Protocol [Mark_Hamilton]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":42611,"byte_end":42656,"line_start":292,"line_end":292,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1313},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":42704,"byte_end":42707,"line_start":295,"line_end":295,"column_start":5,"column_end":8},"name":"Uti","qualname":"::internet::ip::IpTrafficClass::Uti","value":"IpTrafficClass::Uti","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"UTI [Peter_Lothberg]\n","sig":null,"attributes":[{"value":"/UTI [Peter_Lothberg]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":42676,"byte_end":42699,"line_start":294,"line_end":294,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1316},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":42764,"byte_end":42785,"line_start":297,"line_end":297,"column_start":5,"column_end":26},"name":"SimpleMessageProtocol","qualname":"::internet::ip::IpTrafficClass::SimpleMessageProtocol","value":"IpTrafficClass::SimpleMessageProtocol","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Simple Message Protocol [Leif_Ekblad]\n","sig":null,"attributes":[{"value":"/Simple Message Protocol [Leif_Ekblad]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":42719,"byte_end":42759,"line_start":296,"line_end":296,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1319},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":42891,"byte_end":42893,"line_start":299,"line_end":299,"column_start":5,"column_end":7},"name":"Sm","qualname":"::internet::ip::IpTrafficClass::Sm","value":"IpTrafficClass::Sm","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Simple Multicast Protocol (deprecated) [Jon_Crowcroft][draft-perlman-simple-multicast]\n","sig":null,"attributes":[{"value":"/Simple Multicast Protocol (deprecated) [Jon_Crowcroft][draft-perlman-simple-multicast]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":42797,"byte_end":42886,"line_start":298,"line_end":298,"column_start":5,"column_end":94}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1322},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":42962,"byte_end":42965,"line_start":301,"line_end":301,"column_start":5,"column_end":8},"name":"Ptp","qualname":"::internet::ip::IpTrafficClass::Ptp","value":"IpTrafficClass::Ptp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Performance Transparency Protocol [Michael_Welzl]\n","sig":null,"attributes":[{"value":"/Performance Transparency Protocol [Michael_Welzl]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":42905,"byte_end":42957,"line_start":300,"line_end":300,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1325},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":43017,"byte_end":43029,"line_start":303,"line_end":303,"column_start":5,"column_end":17},"name":"IsisOverIpv4","qualname":"::internet::ip::IpTrafficClass::IsisOverIpv4","value":"IpTrafficClass::IsisOverIpv4","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"ISIS over IPv4 [Tony_Przygienda]\n","sig":null,"attributes":[{"value":"/ISIS over IPv4 [Tony_Przygienda]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":42977,"byte_end":43012,"line_start":302,"line_end":302,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1328},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":43071,"byte_end":43075,"line_start":305,"line_end":305,"column_start":5,"column_end":9},"name":"Fire","qualname":"::internet::ip::IpTrafficClass::Fire","value":"IpTrafficClass::Fire","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"FIRE [Criag_Partridge]\n","sig":null,"attributes":[{"value":"/FIRE [Criag_Partridge]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":43041,"byte_end":43066,"line_start":304,"line_end":304,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1331},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":43143,"byte_end":43147,"line_start":307,"line_end":307,"column_start":5,"column_end":9},"name":"Crtp","qualname":"::internet::ip::IpTrafficClass::Crtp","value":"IpTrafficClass::Crtp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Combat Radio Transport Protocol [Robert_Sautter]\n","sig":null,"attributes":[{"value":"/Combat Radio Transport Protocol [Robert_Sautter]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":43087,"byte_end":43138,"line_start":306,"line_end":306,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1334},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":43210,"byte_end":43215,"line_start":309,"line_end":309,"column_start":5,"column_end":10},"name":"Crudp","qualname":"::internet::ip::IpTrafficClass::Crudp","value":"IpTrafficClass::Crudp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Combat Radio User Datagram [Robert_Sautter]\n","sig":null,"attributes":[{"value":"/Combat Radio User Datagram [Robert_Sautter]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":43159,"byte_end":43205,"line_start":308,"line_end":308,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1337},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":43256,"byte_end":43264,"line_start":311,"line_end":311,"column_start":5,"column_end":13},"name":"Sscopmce","qualname":"::internet::ip::IpTrafficClass::Sscopmce","value":"IpTrafficClass::Sscopmce","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"SSCOPMCE [Kurt_Waber]\n","sig":null,"attributes":[{"value":"/SSCOPMCE [Kurt_Waber]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":43227,"byte_end":43251,"line_start":310,"line_end":310,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1340},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":43301,"byte_end":43305,"line_start":313,"line_end":313,"column_start":5,"column_end":9},"name":"Iplt","qualname":"::internet::ip::IpTrafficClass::Iplt","value":"IpTrafficClass::Iplt","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"IPLT [[Hollbach]]\n","sig":null,"attributes":[{"value":"/IPLT [[Hollbach]]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":43276,"byte_end":43296,"line_start":312,"line_end":312,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1343},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":43361,"byte_end":43364,"line_start":315,"line_end":315,"column_start":5,"column_end":8},"name":"Sps","qualname":"::internet::ip::IpTrafficClass::Sps","value":"IpTrafficClass::Sps","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Secure Packet Shield [Bill_McIntosh]\n","sig":null,"attributes":[{"value":"/Secure Packet Shield [Bill_McIntosh]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":43317,"byte_end":43356,"line_start":314,"line_end":314,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1346},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":43435,"byte_end":43439,"line_start":317,"line_end":317,"column_start":5,"column_end":9},"name":"Pipe","qualname":"::internet::ip::IpTrafficClass::Pipe","value":"IpTrafficClass::Pipe","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Private IP Encapsulation within IP [Bernhard_Petri]\n","sig":null,"attributes":[{"value":"/Private IP Encapsulation within IP [Bernhard_Petri]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":43376,"byte_end":43430,"line_start":316,"line_end":316,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1349},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":43515,"byte_end":43519,"line_start":319,"line_end":319,"column_start":5,"column_end":9},"name":"Sctp","qualname":"::internet::ip::IpTrafficClass::Sctp","value":"IpTrafficClass::Sctp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Stream Control Transmission Protocol [Randall_R_Stewart]\n","sig":null,"attributes":[{"value":"/Stream Control Transmission Protocol [Randall_R_Stewart]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":43451,"byte_end":43510,"line_start":318,"line_end":318,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1352},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":43580,"byte_end":43582,"line_start":321,"line_end":321,"column_start":5,"column_end":7},"name":"Fc","qualname":"::internet::ip::IpTrafficClass::Fc","value":"IpTrafficClass::Fc","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Fibre Channel [Murali_Rajagopal][RFC6172]\n","sig":null,"attributes":[{"value":"/Fibre Channel [Murali_Rajagopal][RFC6172]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":43531,"byte_end":43575,"line_start":320,"line_end":320,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1355},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":43627,"byte_end":43640,"line_start":323,"line_end":323,"column_start":5,"column_end":18},"name":"RsvpE2eIgnore","qualname":"::internet::ip::IpTrafficClass::RsvpE2eIgnore","value":"IpTrafficClass::RsvpE2eIgnore","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"RSVP-E2E-IGNORE [RFC3175]\n","sig":null,"attributes":[{"value":"/RSVP-E2E-IGNORE [RFC3175]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":43594,"byte_end":43622,"line_start":322,"line_end":322,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1358},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":43684,"byte_end":43698,"line_start":325,"line_end":325,"column_start":5,"column_end":19},"name":"MobilityHeader","qualname":"::internet::ip::IpTrafficClass::MobilityHeader","value":"IpTrafficClass::MobilityHeader","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"MobilityHeader [RFC6275]\n","sig":null,"attributes":[{"value":"/MobilityHeader [RFC6275]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":43652,"byte_end":43679,"line_start":324,"line_end":324,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1361},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":43735,"byte_end":43742,"line_start":327,"line_end":327,"column_start":5,"column_end":12},"name":"UdpLite","qualname":"::internet::ip::IpTrafficClass::UdpLite","value":"IpTrafficClass::UdpLite","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"UDPLite [RFC3828]\n","sig":null,"attributes":[{"value":"/UDPLite [RFC3828]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":43710,"byte_end":43730,"line_start":326,"line_end":326,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1364},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":43772,"byte_end":43780,"line_start":329,"line_end":329,"column_start":5,"column_end":13},"name":"MplsInIp","qualname":"::internet::ip::IpTrafficClass::MplsInIp","value":"IpTrafficClass::MplsInIp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":" [RFC4023]\n","sig":null,"attributes":[{"value":"/ [RFC4023]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":43754,"byte_end":43767,"line_start":328,"line_end":328,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1367},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":43825,"byte_end":43830,"line_start":331,"line_end":331,"column_start":5,"column_end":10},"name":"Manet","qualname":"::internet::ip::IpTrafficClass::Manet","value":"IpTrafficClass::Manet","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"MANET Protocols [RFC5498]\n","sig":null,"attributes":[{"value":"/MANET Protocols [RFC5498]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":43792,"byte_end":43820,"line_start":330,"line_end":330,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1370},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":43882,"byte_end":43885,"line_start":333,"line_end":333,"column_start":5,"column_end":8},"name":"Hip","qualname":"::internet::ip::IpTrafficClass::Hip","value":"IpTrafficClass::Hip","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Host Identity Protocol [RFC7401]\n","sig":null,"attributes":[{"value":"/Host Identity Protocol [RFC7401]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":43842,"byte_end":43877,"line_start":332,"line_end":332,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1373},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":43929,"byte_end":43934,"line_start":335,"line_end":335,"column_start":5,"column_end":10},"name":"Shim6","qualname":"::internet::ip::IpTrafficClass::Shim6","value":"IpTrafficClass::Shim6","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Shim6 Protocol [RFC5533]\n","sig":null,"attributes":[{"value":"/Shim6 Protocol [RFC5533]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":43897,"byte_end":43924,"line_start":334,"line_end":334,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1376},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":44002,"byte_end":44006,"line_start":337,"line_end":337,"column_start":5,"column_end":9},"name":"Wesp","qualname":"::internet::ip::IpTrafficClass::Wesp","value":"IpTrafficClass::Wesp","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Wrapped Encapsulating Security Payload [RFC5840]\n","sig":null,"attributes":[{"value":"/Wrapped Encapsulating Security Payload [RFC5840]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":43946,"byte_end":43997,"line_start":336,"line_end":336,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1379},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":44061,"byte_end":44065,"line_start":339,"line_end":339,"column_start":5,"column_end":9},"name":"Rohc","qualname":"::internet::ip::IpTrafficClass::Rohc","value":"IpTrafficClass::Rohc","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Robust Header Compression [RFC5858]\n","sig":null,"attributes":[{"value":"/Robust Header Compression [RFC5858]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":44018,"byte_end":44056,"line_start":338,"line_end":338,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1382},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":44120,"byte_end":44143,"line_start":341,"line_end":341,"column_start":5,"column_end":28},"name":"ExperimentalAndTesting0","qualname":"::internet::ip::IpTrafficClass::ExperimentalAndTesting0","value":"IpTrafficClass::ExperimentalAndTesting0","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Use for experimentation and testing\n","sig":null,"attributes":[{"value":"/Use for experimentation and testing","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":44077,"byte_end":44115,"line_start":340,"line_end":340,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1385},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":44198,"byte_end":44221,"line_start":343,"line_end":343,"column_start":5,"column_end":28},"name":"ExperimentalAndTesting1","qualname":"::internet::ip::IpTrafficClass::ExperimentalAndTesting1","value":"IpTrafficClass::ExperimentalAndTesting1","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"Use for experimentation and testing\n","sig":null,"attributes":[{"value":"/Use for experimentation and testing","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":44155,"byte_end":44193,"line_start":342,"line_end":342,"column_start":5,"column_end":43}}]},{"kind":"Enum","id":{"krate":0,"index":955},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":34297,"byte_end":34311,"line_start":55,"line_end":55,"column_start":10,"column_end":24},"name":"IpTrafficClass","qualname":"::internet::ip::IpTrafficClass","value":"pub enum IpTrafficClass {\n    IPv6HeaderHopByHop = ,\n    Icmp = ,\n    Igmp = ,\n    Ggp = ,\n    IPv4 = ,\n    Stream = ,\n    Tcp = ,\n    Cbt = ,\n    Egp = ,\n    Igp = ,\n    BbnRccMon = ,\n    NvpII = ,\n    Pup = ,\n    Argus = ,\n    Emcon = ,\n    Xnet = ,\n    Chaos = ,\n    Udp = ,\n    Mux = ,\n    DcnMeas = ,\n    Hmp = ,\n    Prm = ,\n    XnsIdp = ,\n    Trunk1 = ,\n    Trunk2 = ,\n    Leaf1 = ,\n    Leaf2 = ,\n    Rdp = ,\n    Irtp = ,\n    IsoTp4 = ,\n    NetBlt = ,\n    MfeNsp = ,\n    MeritInp = ,\n    Dccp = ,\n    ThirdPartyConnectProtocol = ,\n    Idpr = ,\n    Xtp = ,\n    Ddp = ,\n    IdprCmtp = ,\n    TpPlusPlus = ,\n    Il = ,\n    Ipv6 = ,\n    Sdrp = ,\n    IPv6RouteHeader = ,\n    IPv6FragmentationHeader = ,\n    Idrp = ,\n    Rsvp = ,\n    Gre = ,\n    Dsr = ,\n    Bna = ,\n    IPv6EncapSecurityPayload = ,\n    IPv6AuthenticationHeader = ,\n    Inlsp = ,\n    Swipe = ,\n    Narp = ,\n    Mobile = ,\n    Tlsp = ,\n    Skip = ,\n    IPv6Icmp = ,\n    IPv6NoNextHeader = ,\n    IPv6DestinationOptions = ,\n    AnyHostInternalProtocol = ,\n    Cftp = ,\n    AnyLocalNetwork = ,\n    SatExpak = ,\n    Krytolan = ,\n    Rvd = ,\n    Ippc = ,\n    AnyDistributedFileSystem = ,\n    SatMon = ,\n    Visa = ,\n    Ipcv = ,\n    Cpnx = ,\n    Cphb = ,\n    Wsn = ,\n    Pvp = ,\n    BrSatMon = ,\n    SunNd = ,\n    WbMon = ,\n    WbExpak = ,\n    IsoIp = ,\n    Vmtp = ,\n    SecureVmtp = ,\n    Vines = ,\n    TtpOrIptm = ,\n    NsfnetIgp = ,\n    Dgp = ,\n    Tcf = ,\n    Eigrp = ,\n    Ospfigp = ,\n    SpriteRpc = ,\n    Larp = ,\n    Mtp = ,\n    Ax25 = ,\n    Ipip = ,\n    Micp = ,\n    SccSp = ,\n    EtherIp = ,\n    Encap = ,\n    Gmtp = ,\n    Ifmp = ,\n    Pnni = ,\n    Pim = ,\n    Aris = ,\n    Scps = ,\n    Qnx = ,\n    ActiveNetworks = ,\n    IpComp = ,\n    SitraNetworksProtocol = ,\n    CompaqPeer = ,\n    IpxInIp = ,\n    Vrrp = ,\n    Pgm = ,\n    AnyZeroHopProtocol = ,\n    Layer2TunnelingProtocol = ,\n    Ddx = ,\n    Iatp = ,\n    Stp = ,\n    Srp = ,\n    Uti = ,\n    SimpleMessageProtocol = ,\n    Sm = ,\n    Ptp = ,\n    IsisOverIpv4 = ,\n    Fire = ,\n    Crtp = ,\n    Crudp = ,\n    Sscopmce = ,\n    Iplt = ,\n    Sps = ,\n    Pipe = ,\n    Sctp = ,\n    Fc = ,\n    RsvpE2eIgnore = ,\n    MobilityHeader = ,\n    UdpLite = ,\n    MplsInIp = ,\n    Manet = ,\n    Hip = ,\n    Shim6 = ,\n    Wesp = ,\n    Rohc = ,\n    ExperimentalAndTesting0 = ,\n    ExperimentalAndTesting1 = ,\n}","parent":null,"children":[{"krate":0,"index":956},{"krate":0,"index":959},{"krate":0,"index":962},{"krate":0,"index":965},{"krate":0,"index":968},{"krate":0,"index":971},{"krate":0,"index":974},{"krate":0,"index":977},{"krate":0,"index":980},{"krate":0,"index":983},{"krate":0,"index":986},{"krate":0,"index":989},{"krate":0,"index":992},{"krate":0,"index":995},{"krate":0,"index":998},{"krate":0,"index":1001},{"krate":0,"index":1004},{"krate":0,"index":1007},{"krate":0,"index":1010},{"krate":0,"index":1013},{"krate":0,"index":1016},{"krate":0,"index":1019},{"krate":0,"index":1022},{"krate":0,"index":1025},{"krate":0,"index":1028},{"krate":0,"index":1031},{"krate":0,"index":1034},{"krate":0,"index":1037},{"krate":0,"index":1040},{"krate":0,"index":1043},{"krate":0,"index":1046},{"krate":0,"index":1049},{"krate":0,"index":1052},{"krate":0,"index":1055},{"krate":0,"index":1058},{"krate":0,"index":1061},{"krate":0,"index":1064},{"krate":0,"index":1067},{"krate":0,"index":1070},{"krate":0,"index":1073},{"krate":0,"index":1076},{"krate":0,"index":1079},{"krate":0,"index":1082},{"krate":0,"index":1085},{"krate":0,"index":1088},{"krate":0,"index":1091},{"krate":0,"index":1094},{"krate":0,"index":1097},{"krate":0,"index":1100},{"krate":0,"index":1103},{"krate":0,"index":1106},{"krate":0,"index":1109},{"krate":0,"index":1112},{"krate":0,"index":1115},{"krate":0,"index":1118},{"krate":0,"index":1121},{"krate":0,"index":1124},{"krate":0,"index":1127},{"krate":0,"index":1130},{"krate":0,"index":1133},{"krate":0,"index":1136},{"krate":0,"index":1139},{"krate":0,"index":1142},{"krate":0,"index":1145},{"krate":0,"index":1148},{"krate":0,"index":1151},{"krate":0,"index":1154},{"krate":0,"index":1157},{"krate":0,"index":1160},{"krate":0,"index":1163},{"krate":0,"index":1166},{"krate":0,"index":1169},{"krate":0,"index":1172},{"krate":0,"index":1175},{"krate":0,"index":1178},{"krate":0,"index":1181},{"krate":0,"index":1184},{"krate":0,"index":1187},{"krate":0,"index":1190},{"krate":0,"index":1193},{"krate":0,"index":1196},{"krate":0,"index":1199},{"krate":0,"index":1202},{"krate":0,"index":1205},{"krate":0,"index":1208},{"krate":0,"index":1211},{"krate":0,"index":1214},{"krate":0,"index":1217},{"krate":0,"index":1220},{"krate":0,"index":1223},{"krate":0,"index":1226},{"krate":0,"index":1229},{"krate":0,"index":1232},{"krate":0,"index":1235},{"krate":0,"index":1238},{"krate":0,"index":1241},{"krate":0,"index":1244},{"krate":0,"index":1247},{"krate":0,"index":1250},{"krate":0,"index":1253},{"krate":0,"index":1256},{"krate":0,"index":1259},{"krate":0,"index":1262},{"krate":0,"index":1265},{"krate":0,"index":1268},{"krate":0,"index":1271},{"krate":0,"index":1274},{"krate":0,"index":1277},{"krate":0,"index":1280},{"krate":0,"index":1283},{"krate":0,"index":1286},{"krate":0,"index":1289},{"krate":0,"index":1292},{"krate":0,"index":1295},{"krate":0,"index":1298},{"krate":0,"index":1301},{"krate":0,"index":1304},{"krate":0,"index":1307},{"krate":0,"index":1310},{"krate":0,"index":1313},{"krate":0,"index":1316},{"krate":0,"index":1319},{"krate":0,"index":1322},{"krate":0,"index":1325},{"krate":0,"index":1328},{"krate":0,"index":1331},{"krate":0,"index":1334},{"krate":0,"index":1337},{"krate":0,"index":1340},{"krate":0,"index":1343},{"krate":0,"index":1346},{"krate":0,"index":1349},{"krate":0,"index":1352},{"krate":0,"index":1355},{"krate":0,"index":1358},{"krate":0,"index":1361},{"krate":0,"index":1364},{"krate":0,"index":1367},{"krate":0,"index":1370},{"krate":0,"index":1373},{"krate":0,"index":1376},{"krate":0,"index":1379},{"krate":0,"index":1382},{"krate":0,"index":1385}],"decl_id":null,"docs":"Identifiers for the traffic_class field in ipv6 headers and protocol field in ipv4 headers.\n","sig":null,"attributes":[{"value":"/Identifiers for the traffic_class field in ipv6 headers and protocol field in ipv4 headers.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":34154,"byte_end":34248,"line_start":53,"line_end":53,"column_start":1,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":44352,"byte_end":44376,"line_start":349,"line_end":349,"column_start":12,"column_end":36},"name":"is_ipv6_ext_header_value","qualname":"<IpTrafficClass>::is_ipv6_ext_header_value","value":"pub fn is_ipv6_ext_header_value(u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Returns true if the given id identifies an IPV6 extension header traffic class.\n","sig":null,"attributes":[{"value":"/Returns true if the given id identifies an IPV6 extension header traffic class.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":44258,"byte_end":44340,"line_start":348,"line_end":348,"column_start":5,"column_end":87}}]},{"kind":"Struct","id":{"krate":0,"index":1398},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":45528,"byte_end":45538,"line_start":11,"line_end":11,"column_start":12,"column_end":22},"name":"Ipv4Header","qualname":"::internet::ipv4::Ipv4Header","value":"Ipv4Header { differentiated_services_code_point, explicit_congestion_notification, payload_len, identification, dont_fragment, more_fragments, fragments_offset, time_to_live, protocol, header_checksum, source, destination }","parent":null,"children":[{"krate":0,"index":1399},{"krate":0,"index":1400},{"krate":0,"index":1401},{"krate":0,"index":1402},{"krate":0,"index":1403},{"krate":0,"index":1404},{"krate":0,"index":1405},{"krate":0,"index":1406},{"krate":0,"index":1407},{"krate":0,"index":1408},{"krate":0,"index":1409},{"krate":0,"index":1411},{"krate":0,"index":1413},{"krate":0,"index":1414}],"decl_id":null,"docs":"IPv4 header without options.\n","sig":null,"attributes":[{"value":"/IPv4 header without options.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":45468,"byte_end":45499,"line_start":9,"line_end":9,"column_start":1,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":1399},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":45549,"byte_end":45583,"line_start":12,"line_end":12,"column_start":9,"column_end":43},"name":"differentiated_services_code_point","qualname":"::internet::ipv4::Ipv4Header::differentiated_services_code_point","value":"u8","parent":{"krate":0,"index":1398},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1400},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":45597,"byte_end":45629,"line_start":13,"line_end":13,"column_start":9,"column_end":41},"name":"explicit_congestion_notification","qualname":"::internet::ipv4::Ipv4Header::explicit_congestion_notification","value":"u8","parent":{"krate":0,"index":1398},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1401},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":45987,"byte_end":45998,"line_start":19,"line_end":19,"column_start":9,"column_end":20},"name":"payload_len","qualname":"::internet::ipv4::Ipv4Header::payload_len","value":"u16","parent":{"krate":0,"index":1398},"children":[],"decl_id":null,"docs":"Length of the payload of the ipv4 packet in bytes (does not contain the options).","sig":null,"attributes":[{"value":"/Length of the payload of the ipv4 packet in bytes (does not contain the options).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":45639,"byte_end":45723,"line_start":14,"line_end":14,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":45728,"byte_end":45731,"line_start":15,"line_end":15,"column_start":5,"column_end":8}},{"value":"/This field does not directly exist in an ipv4 header but instead is decoded from","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":45736,"byte_end":45819,"line_start":16,"line_end":16,"column_start":5,"column_end":88}},{"value":"/ & encoded to the total_size field together with the options length (using the ihl).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":45824,"byte_end":45911,"line_start":17,"line_end":17,"column_start":5,"column_end":92}},{"value":"/If the total_length field in a ipv4 header is smaller then ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":45916,"byte_end":45978,"line_start":18,"line_end":18,"column_start":5,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":1402},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":46013,"byte_end":46027,"line_start":20,"line_end":20,"column_start":9,"column_end":23},"name":"identification","qualname":"::internet::ipv4::Ipv4Header::identification","value":"u16","parent":{"krate":0,"index":1398},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1403},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":46042,"byte_end":46055,"line_start":21,"line_end":21,"column_start":9,"column_end":22},"name":"dont_fragment","qualname":"::internet::ipv4::Ipv4Header::dont_fragment","value":"bool","parent":{"krate":0,"index":1398},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1404},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":46071,"byte_end":46085,"line_start":22,"line_end":22,"column_start":9,"column_end":23},"name":"more_fragments","qualname":"::internet::ipv4::Ipv4Header::more_fragments","value":"bool","parent":{"krate":0,"index":1398},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1405},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":46101,"byte_end":46117,"line_start":23,"line_end":23,"column_start":9,"column_end":25},"name":"fragments_offset","qualname":"::internet::ipv4::Ipv4Header::fragments_offset","value":"u16","parent":{"krate":0,"index":1398},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1406},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":46132,"byte_end":46144,"line_start":24,"line_end":24,"column_start":9,"column_end":21},"name":"time_to_live","qualname":"::internet::ipv4::Ipv4Header::time_to_live","value":"u8","parent":{"krate":0,"index":1398},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1407},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":46158,"byte_end":46166,"line_start":25,"line_end":25,"column_start":9,"column_end":17},"name":"protocol","qualname":"::internet::ipv4::Ipv4Header::protocol","value":"u8","parent":{"krate":0,"index":1398},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1408},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":46180,"byte_end":46195,"line_start":26,"line_end":26,"column_start":9,"column_end":24},"name":"header_checksum","qualname":"::internet::ipv4::Ipv4Header::header_checksum","value":"u16","parent":{"krate":0,"index":1398},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1409},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":46210,"byte_end":46216,"line_start":27,"line_end":27,"column_start":9,"column_end":15},"name":"source","qualname":"::internet::ipv4::Ipv4Header::source","value":"[u8; 4]","parent":{"krate":0,"index":1398},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1411},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":46234,"byte_end":46245,"line_start":28,"line_end":28,"column_start":9,"column_end":20},"name":"destination","qualname":"::internet::ipv4::Ipv4Header::destination","value":"[u8; 4]","parent":{"krate":0,"index":1398},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":46661,"byte_end":46664,"line_start":43,"line_end":43,"column_start":12,"column_end":15},"name":"new","qualname":"<Ipv4Header>::new","value":"pub fn new(u16, u8, IpTrafficClass, [u8; ], [u8; ]) -> Ipv4Header","parent":null,"children":[],"decl_id":null,"docs":"Constructs an Ipv4Header with standard values for non specified values.\n","sig":null,"attributes":[{"value":"/Constructs an Ipv4Header with standard values for non specified values.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":46575,"byte_end":46649,"line_start":42,"line_end":42,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":47495,"byte_end":47498,"line_start":65,"line_end":65,"column_start":12,"column_end":15},"name":"ihl","qualname":"<Ipv4Header>::ihl","value":"pub fn ihl(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"Length of the header in 4 bytes (often also called IHL - Internet Header Lenght). ","sig":null,"attributes":[{"value":"/Length of the header in 4 bytes (often also called IHL - Internet Header Lenght). ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":47283,"byte_end":47368,"line_start":62,"line_end":62,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":47373,"byte_end":47376,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/The minimum allowed length of a header is 5 (= 20 bytes) and the maximum length is 15 (= 60 bytes).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":47381,"byte_end":47483,"line_start":64,"line_end":64,"column_start":5,"column_end":107}}]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":47657,"byte_end":47664,"line_start":70,"line_end":70,"column_start":12,"column_end":19},"name":"options","qualname":"<Ipv4Header>::options","value":"pub fn options(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":"Returns a slice to the options part of the header (empty if no options are present).\n","sig":null,"attributes":[{"value":"/Returns a slice to the options part of the header (empty if no options are present).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":47558,"byte_end":47645,"line_start":69,"line_end":69,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":47820,"byte_end":47830,"line_start":75,"line_end":75,"column_start":12,"column_end":22},"name":"header_len","qualname":"<Ipv4Header>::header_len","value":"pub fn header_len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"Length of the header (includes options) in bytes.\n","sig":null,"attributes":[{"value":"/Length of the header (includes options) in bytes.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":47756,"byte_end":47808,"line_start":74,"line_end":74,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":48001,"byte_end":48010,"line_start":80,"line_end":80,"column_start":12,"column_end":21},"name":"total_len","qualname":"<Ipv4Header>::total_len","value":"pub fn total_len(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"Returns the total length of the header + payload in bytes.\n","sig":null,"attributes":[{"value":"/Returns the total length of the header + payload in bytes.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":47928,"byte_end":47989,"line_start":79,"line_end":79,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":48231,"byte_end":48246,"line_start":85,"line_end":85,"column_start":12,"column_end":27},"name":"set_payload_len","qualname":"<Ipv4Header>::set_payload_len","value":"pub fn set_payload_len(&mut Self, usize) -> Result<(), ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Sets the payload length if the value is not too big. Otherwise an error is returned.\n","sig":null,"attributes":[{"value":"/Sets the payload length if the value is not too big. Otherwise an error is returned.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":48132,"byte_end":48219,"line_start":84,"line_end":84,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":48629,"byte_end":48644,"line_start":96,"line_end":96,"column_start":12,"column_end":27},"name":"max_payload_len","qualname":"<Ipv4Header>::max_payload_len","value":"pub fn max_payload_len(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"Returns the maximum payload size based on the current options size.\n","sig":null,"attributes":[{"value":"/Returns the maximum payload size based on the current options size.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":48547,"byte_end":48617,"line_start":95,"line_end":95,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":49030,"byte_end":49041,"line_start":104,"line_end":104,"column_start":12,"column_end":23},"name":"set_options","qualname":"<Ipv4Header>::set_options","value":"pub fn set_options(&mut Self, &[u8]) -> Result<(), ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Sets the options & header_length based on the provided length.\nThe length of the given slice must be a multiple of 4 and maximum 40 bytes.\nIf the length is not fullfilling these constraints, no data is set and\nan error is returned.\n","sig":null,"attributes":[{"value":"/Sets the options & header_length based on the provided length.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":48763,"byte_end":48828,"line_start":100,"line_end":100,"column_start":5,"column_end":70}},{"value":"/The length of the given slice must be a multiple of 4 and maximum 40 bytes.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":48833,"byte_end":48911,"line_start":101,"line_end":101,"column_start":5,"column_end":83}},{"value":"/If the length is not fullfilling these constraints, no data is set and","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":48916,"byte_end":48989,"line_start":102,"line_end":102,"column_start":5,"column_end":78}},{"value":"/an error is returned.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":48994,"byte_end":49018,"line_start":103,"line_end":103,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":49683,"byte_end":49698,"line_start":123,"line_end":123,"column_start":12,"column_end":27},"name":"read_from_slice","qualname":"<Ipv4Header>::read_from_slice","value":"pub fn read_from_slice(&[u8]) -> Result<(Ipv4Header, &[u8]), ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Read an Ipv4Header from a slice and return the header & unused parts of the slice.\n","sig":null,"attributes":[{"value":"/Read an Ipv4Header from a slice and return the header & unused parts of the slice.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":49586,"byte_end":49671,"line_start":122,"line_end":122,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":50011,"byte_end":50015,"line_start":133,"line_end":133,"column_start":12,"column_end":16},"name":"read","qualname":"<Ipv4Header>::read","value":"pub fn read<T: io::Read + io::Seek + Sized>(&mut T)\n-> Result<Ipv4Header, ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Reads an IPv4 header from the current position.\n","sig":null,"attributes":[{"value":"/Reads an IPv4 header from the current position.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":49949,"byte_end":49999,"line_start":132,"line_end":132,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":50440,"byte_end":50460,"line_start":143,"line_end":143,"column_start":12,"column_end":32},"name":"read_without_version","qualname":"<Ipv4Header>::read_without_version","value":"pub fn read_without_version<T: io::Read + io::Seek + Sized>(&mut T, u8)\n-> Result<Ipv4Header, ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Reads an IPv4 header assuming the version & ihl field have already been read.\n","sig":null,"attributes":[{"value":"/Reads an IPv4 header assuming the version & ihl field have already been read.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":50348,"byte_end":50428,"line_start":142,"line_end":142,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":53154,"byte_end":53166,"line_start":212,"line_end":212,"column_start":12,"column_end":24},"name":"check_ranges","qualname":"<Ipv4Header>::check_ranges","value":"pub fn check_ranges(&Self) -> Result<(), ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Checks if the values in this header are valid values for an ipv4 header.","sig":null,"attributes":[{"value":"/Checks if the values in this header are valid values for an ipv4 header.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":52726,"byte_end":52801,"line_start":205,"line_end":205,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":52806,"byte_end":52809,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/Specifically it will be checked, that:","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":52814,"byte_end":52855,"line_start":207,"line_end":207,"column_start":5,"column_end":46}},{"value":"/ * payload_len + options_len is not too big to be encoded in the total_size header field","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":52860,"byte_end":52951,"line_start":208,"line_end":208,"column_start":5,"column_end":96}},{"value":"/ * differentiated_services_code_point is not greater then 0x3f","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":52956,"byte_end":53021,"line_start":209,"line_end":209,"column_start":5,"column_end":70}},{"value":"/ * explicit_congestion_notification is not greater then 0x3","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":53026,"byte_end":53088,"line_start":210,"line_end":210,"column_start":5,"column_end":67}},{"value":"/ * fragments_offset is not greater then 0x1fff","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":53093,"byte_end":53142,"line_start":211,"line_end":211,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":53748,"byte_end":53753,"line_start":225,"line_end":225,"column_start":12,"column_end":17},"name":"write","qualname":"<Ipv4Header>::write","value":"pub fn write<T: io::Write + Sized>(&Self, &mut T) -> Result<(), WriteError>","parent":null,"children":[],"decl_id":null,"docs":"Writes a given IPv4 header to the current position (this method automatically calculates the header length and checksum).\n","sig":null,"attributes":[{"value":"/Writes a given IPv4 header to the current position (this method automatically calculates the header length and checksum).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":53612,"byte_end":53736,"line_start":224,"line_end":224,"column_start":5,"column_end":129}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":54155,"byte_end":54164,"line_start":234,"line_end":234,"column_start":12,"column_end":21},"name":"write_raw","qualname":"<Ipv4Header>::write_raw","value":"pub fn write_raw<T: io::Write + Sized>(&Self, &mut T)\n-> Result<(), WriteError>","parent":null,"children":[],"decl_id":null,"docs":"Writes a given IPv4 header to the current position (this method just writes the specified checksum and does note compute it).\n","sig":null,"attributes":[{"value":"/Writes a given IPv4 header to the current position (this method just writes the specified checksum and does note compute it).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":54015,"byte_end":54143,"line_start":233,"line_end":233,"column_start":5,"column_end":133}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":56014,"byte_end":56034,"line_start":292,"line_end":292,"column_start":12,"column_end":32},"name":"calc_header_checksum","qualname":"<Ipv4Header>::calc_header_checksum","value":"pub fn calc_header_checksum(&Self) -> Result<u16, ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Calculate header checksum of the current ipv4 header.\n","sig":null,"attributes":[{"value":"/Calculate header checksum of the current ipv4 header.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":55946,"byte_end":56002,"line_start":291,"line_end":291,"column_start":5,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":1418},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":60986,"byte_end":61001,"line_start":413,"line_end":413,"column_start":12,"column_end":27},"name":"Ipv4HeaderSlice","qualname":"::internet::ipv4::Ipv4HeaderSlice","value":"Ipv4HeaderSlice {  }","parent":null,"children":[{"krate":0,"index":1420}],"decl_id":null,"docs":"A slice containing an ipv4 header of a network package.\n","sig":null,"attributes":[{"value":"/A slice containing an ipv4 header of a network package.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":60877,"byte_end":60935,"line_start":411,"line_end":411,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":61151,"byte_end":61161,"line_start":420,"line_end":420,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<Ipv4HeaderSlice>::from_slice","value":"pub fn from_slice(&'a [u8]) -> Result<Ipv4HeaderSlice, ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Creates a slice containing an ipv4 header (including header options).\n","sig":null,"attributes":[{"value":"/Creates a slice containing an ipv4 header (including header options).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":61067,"byte_end":61139,"line_start":419,"line_end":419,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":62513,"byte_end":62518,"line_start":465,"line_end":465,"column_start":12,"column_end":17},"name":"slice","qualname":"<Ipv4HeaderSlice>::slice","value":"pub fn slice(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":"Returns the slice containing the ipv4 header\n","sig":null,"attributes":[{"value":"/Returns the slice containing the ipv4 header","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":62440,"byte_end":62487,"line_start":463,"line_end":463,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":62492,"byte_end":62501,"line_start":464,"line_end":464,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":62643,"byte_end":62650,"line_start":470,"line_end":470,"column_start":12,"column_end":19},"name":"version","qualname":"<Ipv4HeaderSlice>::version","value":"pub fn version(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"Read the \"version\" field of the IPv4 header (should be 4).\n","sig":null,"attributes":[{"value":"/Read the \"version\" field of the IPv4 header (should be 4).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":62570,"byte_end":62631,"line_start":469,"line_end":469,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":62809,"byte_end":62812,"line_start":475,"line_end":475,"column_start":12,"column_end":15},"name":"ihl","qualname":"<Ipv4HeaderSlice>::ihl","value":"pub fn ihl(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"Read the \"ip header length\" (length of the ipv4 header + options in multiples of 4 bytes).\n","sig":null,"attributes":[{"value":"/Read the \"ip header length\" (length of the ipv4 header + options in multiples of 4 bytes).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":62704,"byte_end":62797,"line_start":474,"line_end":474,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":62943,"byte_end":62946,"line_start":480,"line_end":480,"column_start":12,"column_end":15},"name":"dcp","qualname":"<Ipv4HeaderSlice>::dcp","value":"pub fn dcp(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"Read the \"differentiated_services_code_point\" from the slice.\n","sig":null,"attributes":[{"value":"/Read the \"differentiated_services_code_point\" from the slice.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":62867,"byte_end":62931,"line_start":479,"line_end":479,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":63074,"byte_end":63077,"line_start":485,"line_end":485,"column_start":12,"column_end":15},"name":"ecn","qualname":"<Ipv4HeaderSlice>::ecn","value":"pub fn ecn(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"Read the \"explicit_congestion_notification\" from the slice.\n","sig":null,"attributes":[{"value":"/Read the \"explicit_congestion_notification\" from the slice.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":63000,"byte_end":63062,"line_start":484,"line_end":484,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":63224,"byte_end":63233,"line_start":490,"line_end":490,"column_start":12,"column_end":21},"name":"total_len","qualname":"<Ipv4HeaderSlice>::total_len","value":"pub fn total_len(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"Read the \"total length\" from the slice (total length of ip header + payload).\n","sig":null,"attributes":[{"value":"/Read the \"total length\" from the slice (total length of ip header + payload).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":63132,"byte_end":63212,"line_start":489,"line_end":489,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":63404,"byte_end":63415,"line_start":495,"line_end":495,"column_start":12,"column_end":23},"name":"payload_len","qualname":"<Ipv4HeaderSlice>::payload_len","value":"pub fn payload_len(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"Determine the payload length based on the ihl & total_length field of the header.\n","sig":null,"attributes":[{"value":"/Determine the payload length based on the ihl & total_length field of the header.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":63308,"byte_end":63392,"line_start":494,"line_end":494,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":63556,"byte_end":63570,"line_start":500,"line_end":500,"column_start":12,"column_end":26},"name":"identification","qualname":"<Ipv4HeaderSlice>::identification","value":"pub fn identification(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"Read the \"identification\" field from the slice.\n","sig":null,"attributes":[{"value":"/Read the \"identification\" field from the slice.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":63494,"byte_end":63544,"line_start":499,"line_end":499,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":63705,"byte_end":63718,"line_start":505,"line_end":505,"column_start":12,"column_end":25},"name":"dont_fragment","qualname":"<Ipv4HeaderSlice>::dont_fragment","value":"pub fn dont_fragment(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Read the \"dont fragment\" flag from the slice.\n","sig":null,"attributes":[{"value":"/Read the \"dont fragment\" flag from the slice.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":63645,"byte_end":63693,"line_start":504,"line_end":504,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":63844,"byte_end":63858,"line_start":510,"line_end":510,"column_start":12,"column_end":26},"name":"more_fragments","qualname":"<Ipv4HeaderSlice>::more_fragments","value":"pub fn more_fragments(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Read the \"more fragments\" flag from the slice.\n","sig":null,"attributes":[{"value":"/Read the \"more fragments\" flag from the slice.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":63783,"byte_end":63832,"line_start":509,"line_end":509,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":63986,"byte_end":64002,"line_start":515,"line_end":515,"column_start":12,"column_end":28},"name":"fragments_offset","qualname":"<Ipv4HeaderSlice>::fragments_offset","value":"pub fn fragments_offset(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"Read the \"fragment_offset\" field from the slice.\n","sig":null,"attributes":[{"value":"/Read the \"fragment_offset\" field from the slice.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":63923,"byte_end":63974,"line_start":514,"line_end":514,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":64185,"byte_end":64188,"line_start":521,"line_end":521,"column_start":12,"column_end":15},"name":"ttl","qualname":"<Ipv4HeaderSlice>::ttl","value":"pub fn ttl(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"Read the \"time_to_live\" field from the slice.\n","sig":null,"attributes":[{"value":"/Read the \"time_to_live\" field from the slice.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":64125,"byte_end":64173,"line_start":520,"line_end":520,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":255},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":64293,"byte_end":64301,"line_start":526,"line_end":526,"column_start":12,"column_end":20},"name":"protocol","qualname":"<Ipv4HeaderSlice>::protocol","value":"pub fn protocol(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"Read the \"protocol\" field from the slice.\n","sig":null,"attributes":[{"value":"/Read the \"protocol\" field from the slice.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":64237,"byte_end":64281,"line_start":525,"line_end":525,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":64413,"byte_end":64428,"line_start":531,"line_end":531,"column_start":12,"column_end":27},"name":"header_checksum","qualname":"<Ipv4HeaderSlice>::header_checksum","value":"pub fn header_checksum(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"Read the \"header checksum\" field from the slice.\n","sig":null,"attributes":[{"value":"/Read the \"header checksum\" field from the slice.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":64350,"byte_end":64401,"line_start":530,"line_end":530,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":64575,"byte_end":64581,"line_start":536,"line_end":536,"column_start":12,"column_end":18},"name":"source","qualname":"<Ipv4HeaderSlice>::source","value":"pub fn source(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":"Returns a slice containing the ipv4 source address.\n","sig":null,"attributes":[{"value":"/Returns a slice containing the ipv4 source address.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":64509,"byte_end":64563,"line_start":535,"line_end":535,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":64712,"byte_end":64723,"line_start":541,"line_end":541,"column_start":12,"column_end":23},"name":"source_addr","qualname":"<Ipv4HeaderSlice>::source_addr","value":"pub fn source_addr(&Self) -> Ipv4Addr","parent":null,"children":[],"decl_id":null,"docs":"Return the ipv4 source address as an std::net::Ipv4Addr\n","sig":null,"attributes":[{"value":"/Return the ipv4 source address as an std::net::Ipv4Addr","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":64642,"byte_end":64700,"line_start":540,"line_end":540,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":64954,"byte_end":64965,"line_start":548,"line_end":548,"column_start":12,"column_end":23},"name":"destination","qualname":"<Ipv4HeaderSlice>::destination","value":"pub fn destination(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":"Returns a slice containing the ipv4 source address.\n","sig":null,"attributes":[{"value":"/Returns a slice containing the ipv4 source address.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":64888,"byte_end":64942,"line_start":547,"line_end":547,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":261},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":65101,"byte_end":65117,"line_start":553,"line_end":553,"column_start":12,"column_end":28},"name":"destination_addr","qualname":"<Ipv4HeaderSlice>::destination_addr","value":"pub fn destination_addr(&Self) -> Ipv4Addr","parent":null,"children":[],"decl_id":null,"docs":"Return the ipv4 destination address as an std::net::Ipv4Addr\n","sig":null,"attributes":[{"value":"/Return the ipv4 destination address as an std::net::Ipv4Addr","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":65026,"byte_end":65089,"line_start":552,"line_end":552,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":65387,"byte_end":65394,"line_start":560,"line_end":560,"column_start":12,"column_end":19},"name":"options","qualname":"<Ipv4HeaderSlice>::options","value":"pub fn options(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":"Returns a slice containing the ipv4 header options (empty when there are no options).\n","sig":null,"attributes":[{"value":"/Returns a slice containing the ipv4 header options (empty when there are no options).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":65287,"byte_end":65375,"line_start":559,"line_end":559,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":65533,"byte_end":65542,"line_start":565,"line_end":565,"column_start":12,"column_end":21},"name":"to_header","qualname":"<Ipv4HeaderSlice>::to_header","value":"pub fn to_header(&Self) -> Ipv4Header","parent":null,"children":[],"decl_id":null,"docs":"Decode all the fields and copy the results to a Ipv4Header struct\n","sig":null,"attributes":[{"value":"/Decode all the fields and copy the results to a Ipv4Header struct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":65453,"byte_end":65521,"line_start":564,"line_end":564,"column_start":5,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":1438},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":66978,"byte_end":66988,"line_start":10,"line_end":10,"column_start":12,"column_end":22},"name":"Ipv6Header","qualname":"::internet::ipv6::Ipv6Header","value":"Ipv6Header { traffic_class, flow_label, payload_length, next_header, hop_limit, source, destination }","parent":null,"children":[{"krate":0,"index":1439},{"krate":0,"index":1440},{"krate":0,"index":1441},{"krate":0,"index":1442},{"krate":0,"index":1443},{"krate":0,"index":1444},{"krate":0,"index":1446}],"decl_id":null,"docs":"IPv6 header according to rfc8200.\n","sig":null,"attributes":[{"value":"/IPv6 header according to rfc8200.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":66882,"byte_end":66918,"line_start":8,"line_end":8,"column_start":1,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":1439},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":66999,"byte_end":67012,"line_start":11,"line_end":11,"column_start":9,"column_end":22},"name":"traffic_class","qualname":"::internet::ipv6::Ipv6Header::traffic_class","value":"u8","parent":{"krate":0,"index":1438},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1440},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":67196,"byte_end":67206,"line_start":13,"line_end":13,"column_start":9,"column_end":19},"name":"flow_label","qualname":"::internet::ipv6::Ipv6Header::flow_label","value":"u32","parent":{"krate":0,"index":1438},"children":[],"decl_id":null,"docs":"If non 0 serves as a hint to router and switches with multiple outbound paths that these packets should stay on the same path, so that they will not be reordered.\n","sig":null,"attributes":[{"value":"/If non 0 serves as a hint to router and switches with multiple outbound paths that these packets should stay on the same path, so that they will not be reordered.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":67022,"byte_end":67187,"line_start":12,"line_end":12,"column_start":5,"column_end":170}}]},{"kind":"Field","id":{"krate":0,"index":1441},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":67316,"byte_end":67330,"line_start":15,"line_end":15,"column_start":9,"column_end":23},"name":"payload_length","qualname":"::internet::ipv6::Ipv6Header::payload_length","value":"u16","parent":{"krate":0,"index":1438},"children":[],"decl_id":null,"docs":"The length of the payload and extension headers in bytes (0 in case of jumbo payloads).\n","sig":null,"attributes":[{"value":"/The length of the payload and extension headers in bytes (0 in case of jumbo payloads).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":67217,"byte_end":67307,"line_start":14,"line_end":14,"column_start":5,"column_end":95}}]},{"kind":"Field","id":{"krate":0,"index":1442},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":67461,"byte_end":67472,"line_start":17,"line_end":17,"column_start":9,"column_end":20},"name":"next_header","qualname":"::internet::ipv6::Ipv6Header::next_header","value":"u8","parent":{"krate":0,"index":1438},"children":[],"decl_id":null,"docs":"Specifies what the next header or transport layer protocol is (see IpTrafficClass for a definitions of ids).\n","sig":null,"attributes":[{"value":"/Specifies what the next header or transport layer protocol is (see IpTrafficClass for a definitions of ids).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":67341,"byte_end":67452,"line_start":16,"line_end":16,"column_start":5,"column_end":116}}]},{"kind":"Field","id":{"krate":0,"index":1443},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":67556,"byte_end":67565,"line_start":19,"line_end":19,"column_start":9,"column_end":18},"name":"hop_limit","qualname":"::internet::ipv6::Ipv6Header::hop_limit","value":"u8","parent":{"krate":0,"index":1438},"children":[],"decl_id":null,"docs":"The number of hops the packet can take before it is discarded.\n","sig":null,"attributes":[{"value":"/The number of hops the packet can take before it is discarded.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":67482,"byte_end":67547,"line_start":18,"line_end":18,"column_start":5,"column_end":70}}]},{"kind":"Field","id":{"krate":0,"index":1444},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":67606,"byte_end":67612,"line_start":21,"line_end":21,"column_start":9,"column_end":15},"name":"source","qualname":"::internet::ipv6::Ipv6Header::source","value":"[u8; 16]","parent":{"krate":0,"index":1438},"children":[],"decl_id":null,"docs":"IPv6 source address\n","sig":null,"attributes":[{"value":"/IPv6 source address","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":67575,"byte_end":67597,"line_start":20,"line_end":20,"column_start":5,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":1446},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":67663,"byte_end":67674,"line_start":23,"line_end":23,"column_start":9,"column_end":20},"name":"destination","qualname":"::internet::ipv6::Ipv6Header::destination","value":"[u8; 16]","parent":{"krate":0,"index":1438},"children":[],"decl_id":null,"docs":"IPv6 destination address\n","sig":null,"attributes":[{"value":"/IPv6 destination address","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":67627,"byte_end":67654,"line_start":22,"line_end":22,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":67928,"byte_end":67943,"line_start":34,"line_end":34,"column_start":12,"column_end":27},"name":"read_from_slice","qualname":"<Ipv6Header>::read_from_slice","value":"pub fn read_from_slice(&[u8]) -> Result<(Ipv6Header, &[u8]), ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Read an Ipv6Header from a slice and return the header & unused parts of the slice.\n","sig":null,"attributes":[{"value":"/Read an Ipv6Header from a slice and return the header & unused parts of the slice.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":67831,"byte_end":67916,"line_start":33,"line_end":33,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":68211,"byte_end":68215,"line_start":42,"line_end":42,"column_start":12,"column_end":16},"name":"read","qualname":"<Ipv6Header>::read","value":"pub fn read<T: io::Read + io::Seek + Sized>(&mut T)\n-> Result<Ipv6Header, ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Reads an IPv6 header from the current position.\n","sig":null,"attributes":[{"value":"/Reads an IPv6 header from the current position.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":68149,"byte_end":68199,"line_start":41,"line_end":41,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":68754,"byte_end":68774,"line_start":55,"line_end":55,"column_start":12,"column_end":32},"name":"read_without_version","qualname":"<Ipv6Header>::read_without_version","value":"pub fn read_without_version<T: io::Read + io::Seek + Sized>(&mut T, u8)\n-> Result<Ipv6Header, io::Error>","parent":null,"children":[],"decl_id":null,"docs":"Reads an IPv6 header assuming the version & flow_label field have already been read.\n","sig":null,"attributes":[{"value":"/Reads an IPv6 header assuming the version & flow_label field have already been read.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":68655,"byte_end":68742,"line_start":54,"line_end":54,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":70099,"byte_end":70129,"line_start":90,"line_end":90,"column_start":12,"column_end":42},"name":"skip_header_extension_in_slice","qualname":"<Ipv6Header>::skip_header_extension_in_slice","value":"pub fn skip_header_extension_in_slice(&[u8], u8)\n-> Result<(u8, &[u8]), ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Takes a slice and skips an ipv6 header extensions and returns the next_header id & the slice past the header.\nNOTE: There must be a ipv6 header extension id given as a traffic_class.\n","sig":null,"attributes":[{"value":"/Takes a slice and skips an ipv6 header extensions and returns the next_header id & the slice past the header.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":69895,"byte_end":70007,"line_start":88,"line_end":88,"column_start":5,"column_end":117}},{"value":"/NOTE: There must be a ipv6 header extension id given as a traffic_class.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":70012,"byte_end":70087,"line_start":89,"line_end":89,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":71021,"byte_end":71056,"line_start":111,"line_end":111,"column_start":12,"column_end":47},"name":"skip_all_header_extensions_in_slice","qualname":"<Ipv6Header>::skip_all_header_extensions_in_slice","value":"pub fn skip_all_header_extensions_in_slice(&[u8], u8)\n-> Result<(u8, &[u8]), ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Takes a slice & traffic class (identifying the first header type) and returns next_header id & the slice past after all ipv6 header extensions.\n","sig":null,"attributes":[{"value":"/Takes a slice & traffic class (identifying the first header type) and returns next_header id & the slice past after all ipv6 header extensions.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":70863,"byte_end":71009,"line_start":110,"line_end":110,"column_start":5,"column_end":151}}]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":71962,"byte_end":71983,"line_start":137,"line_end":137,"column_start":12,"column_end":33},"name":"skip_header_extension","qualname":"<Ipv6Header>::skip_header_extension","value":"pub fn skip_header_extension<T: io::Read + io::Seek + Sized>(&mut T, u8)\n-> Result<u8, io::Error>","parent":null,"children":[],"decl_id":null,"docs":"Skips the ipv6 header extension and returns the traffic_class\n","sig":null,"attributes":[{"value":"/Skips the ipv6 header extension and returns the traffic_class","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":71886,"byte_end":71950,"line_start":136,"line_end":136,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":73412,"byte_end":73438,"line_start":162,"line_end":162,"column_start":12,"column_end":38},"name":"skip_all_header_extensions","qualname":"<Ipv6Header>::skip_all_header_extensions","value":"pub fn skip_all_header_extensions<T: io::Read + io::Seek + Sized>(&mut T, u8)\n-> Result<u8, ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Skips all ipv6 header extensions and returns the last traffic_class\n","sig":null,"attributes":[{"value":"/Skips all ipv6 header extensions and returns the last traffic_class","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":73330,"byte_end":73400,"line_start":161,"line_end":161,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":74216,"byte_end":74221,"line_start":184,"line_end":184,"column_start":12,"column_end":17},"name":"write","qualname":"<Ipv6Header>::write","value":"pub fn write<T: io::Write + Sized>(&Self, &mut T) -> Result<(), WriteError>","parent":null,"children":[],"decl_id":null,"docs":"Writes a given IPv6 header to the current position.\n","sig":null,"attributes":[{"value":"/Writes a given IPv6 header to the current position.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":74150,"byte_end":74204,"line_start":183,"line_end":183,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":75746,"byte_end":75764,"line_start":225,"line_end":225,"column_start":12,"column_end":30},"name":"set_payload_length","qualname":"<Ipv6Header>::set_payload_length","value":"pub fn set_payload_length(&mut Self, usize) -> Result<(), ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Sets the field total_length based on the size of the payload and the options. Returns an error if the payload is too big to fit.\n","sig":null,"attributes":[{"value":"/Sets the field total_length based on the size of the payload and the options. Returns an error if the payload is too big to fit.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":75603,"byte_end":75734,"line_start":224,"line_end":224,"column_start":5,"column_end":136}}]},{"kind":"Struct","id":{"krate":0,"index":1463},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":76236,"byte_end":76251,"line_start":239,"line_end":239,"column_start":12,"column_end":27},"name":"Ipv6HeaderSlice","qualname":"::internet::ipv6::Ipv6HeaderSlice","value":"Ipv6HeaderSlice {  }","parent":null,"children":[{"krate":0,"index":1465}],"decl_id":null,"docs":"A slice containing an ipv6 header of a network package.\n","sig":null,"attributes":[{"value":"/A slice containing an ipv6 header of a network package.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":76127,"byte_end":76185,"line_start":237,"line_end":237,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":76404,"byte_end":76414,"line_start":246,"line_end":246,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<Ipv6HeaderSlice>::from_slice","value":"pub fn from_slice(&'a [u8]) -> Result<Ipv6HeaderSlice, ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Creates a slice containing an ipv6 header (without header extensions).\n","sig":null,"attributes":[{"value":"/Creates a slice containing an ipv6 header (without header extensions).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":76319,"byte_end":76392,"line_start":245,"line_end":245,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":77057,"byte_end":77062,"line_start":270,"line_end":270,"column_start":12,"column_end":17},"name":"slice","qualname":"<Ipv6HeaderSlice>::slice","value":"pub fn slice(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":"Returns the slice containing the ipv6 header\n","sig":null,"attributes":[{"value":"/Returns the slice containing the ipv6 header","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":76984,"byte_end":77031,"line_start":268,"line_end":268,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":77036,"byte_end":77045,"line_start":269,"line_end":269,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":77183,"byte_end":77190,"line_start":275,"line_end":275,"column_start":12,"column_end":19},"name":"version","qualname":"<Ipv6HeaderSlice>::version","value":"pub fn version(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"Read the \"version\" field from the slice (should be 6).\n","sig":null,"attributes":[{"value":"/Read the \"version\" field from the slice (should be 6).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":77114,"byte_end":77171,"line_start":274,"line_end":274,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":77305,"byte_end":77318,"line_start":280,"line_end":280,"column_start":12,"column_end":25},"name":"traffic_class","qualname":"<Ipv6HeaderSlice>::traffic_class","value":"pub fn traffic_class(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"Read the \"traffic class\" field from the slice.\n","sig":null,"attributes":[{"value":"/Read the \"traffic class\" field from the slice.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":77244,"byte_end":77293,"line_start":279,"line_end":279,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":77455,"byte_end":77465,"line_start":285,"line_end":285,"column_start":12,"column_end":22},"name":"flow_label","qualname":"<Ipv6HeaderSlice>::flow_label","value":"pub fn flow_label(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"Read the \"flow label\" field from the slice.\n","sig":null,"attributes":[{"value":"/Read the \"flow label\" field from the slice.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":77397,"byte_end":77443,"line_start":284,"line_end":284,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":77727,"byte_end":77741,"line_start":290,"line_end":290,"column_start":12,"column_end":26},"name":"payload_length","qualname":"<Ipv6HeaderSlice>::payload_length","value":"pub fn payload_length(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"Read the \"payload length\" field from  the slice. The length should contain the length of all extension headers and payload.\n","sig":null,"attributes":[{"value":"/Read the \"payload length\" field from  the slice. The length should contain the length of all extension headers and payload.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":77589,"byte_end":77715,"line_start":289,"line_end":289,"column_start":5,"column_end":131}}]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":78017,"byte_end":78028,"line_start":295,"line_end":295,"column_start":12,"column_end":23},"name":"next_header","qualname":"<Ipv6HeaderSlice>::next_header","value":"pub fn next_header(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"Read the \"next header\" field from the slice. The next header value specifies what the next header or transport layer protocol is (see IpTrafficClass for a definitions of ids).\n","sig":null,"attributes":[{"value":"/Read the \"next header\" field from the slice. The next header value specifies what the next header or transport layer protocol is (see IpTrafficClass for a definitions of ids).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":77827,"byte_end":78005,"line_start":294,"line_end":294,"column_start":5,"column_end":183}}]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":78221,"byte_end":78230,"line_start":300,"line_end":300,"column_start":12,"column_end":21},"name":"hop_limit","qualname":"<Ipv6HeaderSlice>::hop_limit","value":"pub fn hop_limit(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"Read the \"hop limit\" field from the slice. The hop limit specifies the number of hops the packet can take before it is discarded.\n","sig":null,"attributes":[{"value":"/Read the \"hop limit\" field from the slice. The hop limit specifies the number of hops the packet can take before it is discarded.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":78077,"byte_end":78209,"line_start":299,"line_end":299,"column_start":5,"column_end":137}}]},{"kind":"Method","id":{"krate":0,"index":329},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":78345,"byte_end":78351,"line_start":305,"line_end":305,"column_start":12,"column_end":18},"name":"source","qualname":"<Ipv6HeaderSlice>::source","value":"pub fn source(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":"Returns a slice containing the IPv6 source address.\n","sig":null,"attributes":[{"value":"/Returns a slice containing the IPv6 source address.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":78279,"byte_end":78333,"line_start":304,"line_end":304,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":78482,"byte_end":78493,"line_start":310,"line_end":310,"column_start":12,"column_end":23},"name":"source_addr","qualname":"<Ipv6HeaderSlice>::source_addr","value":"pub fn source_addr(&Self) -> Ipv6Addr","parent":null,"children":[],"decl_id":null,"docs":"Return the ipv6 source address as an std::net::Ipv6Addr\n","sig":null,"attributes":[{"value":"/Return the ipv6 source address as an std::net::Ipv6Addr","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":78412,"byte_end":78470,"line_start":309,"line_end":309,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":78730,"byte_end":78741,"line_start":317,"line_end":317,"column_start":12,"column_end":23},"name":"destination","qualname":"<Ipv6HeaderSlice>::destination","value":"pub fn destination(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":"Returns a slice containing the IPv6 destination address.\n","sig":null,"attributes":[{"value":"/Returns a slice containing the IPv6 destination address.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":78659,"byte_end":78718,"line_start":316,"line_end":316,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":333},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":78879,"byte_end":78895,"line_start":322,"line_end":322,"column_start":12,"column_end":28},"name":"destination_addr","qualname":"<Ipv6HeaderSlice>::destination_addr","value":"pub fn destination_addr(&Self) -> Ipv6Addr","parent":null,"children":[],"decl_id":null,"docs":"Return the ipv6 destination address as an std::net::Ipv6Addr\n","sig":null,"attributes":[{"value":"/Return the ipv6 destination address as an std::net::Ipv6Addr","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":78804,"byte_end":78867,"line_start":321,"line_end":321,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":79146,"byte_end":79155,"line_start":329,"line_end":329,"column_start":12,"column_end":21},"name":"to_header","qualname":"<Ipv6HeaderSlice>::to_header","value":"pub fn to_header(&Self) -> Ipv6Header","parent":null,"children":[],"decl_id":null,"docs":"Decode all the fields and copy the results to a Ipv6Header struct\n","sig":null,"attributes":[{"value":"/Decode all the fields and copy the results to a Ipv6Header struct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":79066,"byte_end":79134,"line_start":328,"line_end":328,"column_start":5,"column_end":73}}]},{"kind":"Const","id":{"krate":0,"index":338},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":79928,"byte_end":79958,"line_start":351,"line_end":351,"column_start":11,"column_end":41},"name":"IPV6_MAX_NUM_HEADER_EXTENSIONS","qualname":"::internet::ipv6::IPV6_MAX_NUM_HEADER_EXTENSIONS","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"Maximum number of header extensions allowed (according to the ipv6 rfc8200, & iana protocol numbers).\n","sig":null,"attributes":[{"value":"/Maximum number of header extensions allowed (according to the ipv6 rfc8200, & iana protocol numbers).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":79813,"byte_end":79917,"line_start":350,"line_end":350,"column_start":1,"column_end":105}}]},{"kind":"Struct","id":{"krate":0,"index":1483},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":80067,"byte_end":80086,"line_start":355,"line_end":355,"column_start":12,"column_end":31},"name":"Ipv6ExtensionHeader","qualname":"::internet::ipv6::Ipv6ExtensionHeader","value":"Ipv6ExtensionHeader {  }","parent":null,"children":[{"krate":0,"index":1484},{"krate":0,"index":1485}],"decl_id":null,"docs":"Dummy struct for ipv6 header extensions.\n","sig":null,"attributes":[{"value":"/Dummy struct for ipv6 header extensions.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":79973,"byte_end":80016,"line_start":353,"line_end":353,"column_start":1,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":1497},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":80247,"byte_end":80271,"line_start":362,"line_end":362,"column_start":12,"column_end":36},"name":"Ipv6ExtensionHeaderSlice","qualname":"::internet::ipv6::Ipv6ExtensionHeaderSlice","value":"Ipv6ExtensionHeaderSlice {  }","parent":null,"children":[{"krate":0,"index":1499}],"decl_id":null,"docs":"A slice containing an ipv6 extension header of a network package.\n","sig":null,"attributes":[{"value":"/A slice containing an ipv6 extension header of a network package.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":80128,"byte_end":80196,"line_start":360,"line_end":360,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":80412,"byte_end":80422,"line_start":368,"line_end":368,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<Ipv6ExtensionHeaderSlice>::from_slice","value":"pub fn from_slice(u8, &'a [u8]) -> Result<Ipv6ExtensionHeaderSlice, ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Creates a slice containing an ipv6 header extension.\n","sig":null,"attributes":[{"value":"/Creates a slice containing an ipv6 header extension.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":80345,"byte_end":80400,"line_start":367,"line_end":367,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":81235,"byte_end":81240,"line_start":397,"line_end":397,"column_start":12,"column_end":17},"name":"slice","qualname":"<Ipv6ExtensionHeaderSlice>::slice","value":"pub fn slice(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":"Returns the slice containing the ipv6 extension header\n","sig":null,"attributes":[{"value":"/Returns the slice containing the ipv6 extension header","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":81152,"byte_end":81209,"line_start":395,"line_end":395,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":81214,"byte_end":81223,"line_start":396,"line_end":396,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":81390,"byte_end":81401,"line_start":402,"line_end":402,"column_start":12,"column_end":23},"name":"next_header","qualname":"<Ipv6ExtensionHeaderSlice>::next_header","value":"pub fn next_header(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"Returns the id of the next header (see IpTrafficClass for a definition of all ids).\n","sig":null,"attributes":[{"value":"/Returns the id of the next header (see IpTrafficClass for a definition of all ids).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":81292,"byte_end":81378,"line_start":401,"line_end":401,"column_start":5,"column_end":91}}]},{"kind":"Struct","id":{"krate":0,"index":1517},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":85025,"byte_end":85034,"line_start":8,"line_end":8,"column_start":12,"column_end":21},"name":"UdpHeader","qualname":"::transport::udp::UdpHeader","value":"UdpHeader { source_port, destination_port, length, checksum }","parent":null,"children":[{"krate":0,"index":1518},{"krate":0,"index":1519},{"krate":0,"index":1520},{"krate":0,"index":1521}],"decl_id":null,"docs":"Udp header according to rfc768.\n","sig":null,"attributes":[{"value":"/Udp header according to rfc768.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":84931,"byte_end":84965,"line_start":6,"line_end":6,"column_start":1,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":1518},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":85090,"byte_end":85101,"line_start":10,"line_end":10,"column_start":9,"column_end":20},"name":"source_port","qualname":"::transport::udp::UdpHeader::source_port","value":"u16","parent":{"krate":0,"index":1517},"children":[],"decl_id":null,"docs":"Source port of the packet (optional).\n","sig":null,"attributes":[{"value":"/Source port of the packet (optional).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":85041,"byte_end":85081,"line_start":9,"line_end":9,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":1519},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":85155,"byte_end":85171,"line_start":12,"line_end":12,"column_start":9,"column_end":25},"name":"destination_port","qualname":"::transport::udp::UdpHeader::destination_port","value":"u16","parent":{"krate":0,"index":1517},"children":[],"decl_id":null,"docs":"Destination port of the packet.\n","sig":null,"attributes":[{"value":"/Destination port of the packet.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":85112,"byte_end":85146,"line_start":11,"line_end":11,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":1520},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":85259,"byte_end":85265,"line_start":14,"line_end":14,"column_start":9,"column_end":15},"name":"length","qualname":"::transport::udp::UdpHeader::length","value":"u16","parent":{"krate":0,"index":1517},"children":[],"decl_id":null,"docs":"Length of the packet (includes the udp header length of 8 bytes).\n","sig":null,"attributes":[{"value":"/Length of the packet (includes the udp header length of 8 bytes).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":85182,"byte_end":85250,"line_start":13,"line_end":13,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":1521},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":85478,"byte_end":85486,"line_start":16,"line_end":16,"column_start":9,"column_end":17},"name":"checksum","qualname":"::transport::udp::UdpHeader::checksum","value":"u16","parent":{"krate":0,"index":1517},"children":[],"decl_id":null,"docs":"The checksum of the packet. The checksum is calculated from a pseudo header, the udp header and the payload. The pseudo header is composed of source and destination address, protocol number \n","sig":null,"attributes":[{"value":"/The checksum of the packet. The checksum is calculated from a pseudo header, the udp header and the payload. The pseudo header is composed of source and destination address, protocol number ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":85276,"byte_end":85469,"line_start":15,"line_end":15,"column_start":5,"column_end":198}}]},{"kind":"Method","id":{"krate":0,"index":367},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":85578,"byte_end":85599,"line_start":22,"line_end":22,"column_start":12,"column_end":33},"name":"without_ipv4_checksum","qualname":"<UdpHeader>::without_ipv4_checksum","value":"pub fn without_ipv4_checksum(u16, u16, usize) -> Result<UdpHeader, ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Returns an udp header for the given parameters\n","sig":null,"attributes":[{"value":"/Returns an udp header for the given parameters","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":85517,"byte_end":85566,"line_start":21,"line_end":21,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":369},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":86290,"byte_end":86308,"line_start":38,"line_end":38,"column_start":12,"column_end":30},"name":"with_ipv4_checksum","qualname":"<UdpHeader>::with_ipv4_checksum","value":"pub fn with_ipv4_checksum(u16, u16, &Ipv4Header, &[u8])\n-> Result<UdpHeader, ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Calculate an udp header given an ipv4 header and the payload\n","sig":null,"attributes":[{"value":"/Calculate an udp header given an ipv4 header and the payload","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":86215,"byte_end":86278,"line_start":37,"line_end":37,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":87177,"byte_end":87195,"line_start":57,"line_end":57,"column_start":12,"column_end":30},"name":"calc_checksum_ipv4","qualname":"<UdpHeader>::calc_checksum_ipv4","value":"pub fn calc_checksum_ipv4(&Self, &Ipv4Header, &[u8])\n-> Result<u16, ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Calculates the upd header checksum based on a ipv4 header.\n","sig":null,"attributes":[{"value":"/Calculates the upd header checksum based on a ipv4 header.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":87104,"byte_end":87165,"line_start":56,"line_end":56,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":87462,"byte_end":87484,"line_start":62,"line_end":62,"column_start":12,"column_end":34},"name":"calc_checksum_ipv4_raw","qualname":"<UdpHeader>::calc_checksum_ipv4_raw","value":"pub fn calc_checksum_ipv4_raw(&Self, [u8; ], [u8; ], u8, &[u8])\n-> Result<u16, ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Calculates the upd header checksum based on a ipv4 header.\n","sig":null,"attributes":[{"value":"/Calculates the upd header checksum based on a ipv4 header.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":87389,"byte_end":87450,"line_start":61,"line_end":61,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":379},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":88776,"byte_end":88794,"line_start":84,"line_end":84,"column_start":12,"column_end":30},"name":"with_ipv6_checksum","qualname":"<UdpHeader>::with_ipv6_checksum","value":"pub fn with_ipv6_checksum(u16, u16, &Ipv6Header, &[u8])\n-> Result<UdpHeader, ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Calculate an udp header given an ipv6 header and the payload\n","sig":null,"attributes":[{"value":"/Calculate an udp header given an ipv6 header and the payload","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":88701,"byte_end":88764,"line_start":83,"line_end":83,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":89674,"byte_end":89692,"line_start":103,"line_end":103,"column_start":12,"column_end":30},"name":"calc_checksum_ipv6","qualname":"<UdpHeader>::calc_checksum_ipv6","value":"pub fn calc_checksum_ipv6(&Self, &Ipv6Header, &[u8])\n-> Result<u16, ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Calculates the checksum of the current udp header given an ipv6 header and the payload.\n","sig":null,"attributes":[{"value":"/Calculates the checksum of the current udp header given an ipv6 header and the payload.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":89572,"byte_end":89662,"line_start":102,"line_end":102,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":89993,"byte_end":90015,"line_start":108,"line_end":108,"column_start":12,"column_end":34},"name":"calc_checksum_ipv6_raw","qualname":"<UdpHeader>::calc_checksum_ipv6_raw","value":"pub fn calc_checksum_ipv6_raw(&Self, &[u8; ], &[u8; ], &[u8])\n-> Result<u16, ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Calculates the checksum of the current udp header given an ipv6 source & destination address plus the payload.\n","sig":null,"attributes":[{"value":"/Calculates the checksum of the current udp header given an ipv6 source & destination address plus the payload.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":89868,"byte_end":89981,"line_start":107,"line_end":107,"column_start":5,"column_end":118}}]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":92459,"byte_end":92474,"line_start":161,"line_end":161,"column_start":12,"column_end":27},"name":"read_from_slice","qualname":"<UdpHeader>::read_from_slice","value":"pub fn read_from_slice(&[u8]) -> Result<(UdpHeader, &[u8]), ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Reads a udp header from a slice directly and returns a tuple containing the resulting header & unused part of the slice.\n","sig":null,"attributes":[{"value":"/Reads a udp header from a slice directly and returns a tuple containing the resulting header & unused part of the slice.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":92324,"byte_end":92447,"line_start":160,"line_end":160,"column_start":5,"column_end":128}}]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":92745,"byte_end":92749,"line_start":169,"line_end":169,"column_start":12,"column_end":16},"name":"read","qualname":"<UdpHeader>::read","value":"pub fn read<T: io::Read + io::Seek + Sized>(&mut T)\n-> Result<UdpHeader, io::Error>","parent":null,"children":[],"decl_id":null,"docs":"Tries to read an udp header from the current position.\n","sig":null,"attributes":[{"value":"/Tries to read an udp header from the current position.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":92676,"byte_end":92733,"line_start":168,"line_end":168,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":395},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":93185,"byte_end":93190,"line_start":179,"line_end":179,"column_start":12,"column_end":17},"name":"write","qualname":"<UdpHeader>::write","value":"pub fn write<T: io::Write + Sized>(&Self, &mut T) -> Result<(), WriteError>","parent":null,"children":[],"decl_id":null,"docs":"Write the udp header without recalculating the checksum or length.\n","sig":null,"attributes":[{"value":"/Write the udp header without recalculating the checksum or length.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":93104,"byte_end":93173,"line_start":178,"line_end":178,"column_start":5,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1535},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":93793,"byte_end":93807,"line_start":195,"line_end":195,"column_start":12,"column_end":26},"name":"UdpHeaderSlice","qualname":"::transport::udp::UdpHeaderSlice","value":"UdpHeaderSlice {  }","parent":null,"children":[{"krate":0,"index":1537}],"decl_id":null,"docs":"A slice containing an udp header of a network package. Struct allows the selective read of fields in the header.\n","sig":null,"attributes":[{"value":"/A slice containing an udp header of a network package. Struct allows the selective read of fields in the header.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":93627,"byte_end":93742,"line_start":193,"line_end":193,"column_start":1,"column_end":116}}]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":93928,"byte_end":93938,"line_start":202,"line_end":202,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<UdpHeaderSlice>::from_slice","value":"pub fn from_slice(&'a [u8]) -> Result<UdpHeaderSlice, ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Creates a slice containing an udp header.\n","sig":null,"attributes":[{"value":"/Creates a slice containing an udp header.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":93872,"byte_end":93916,"line_start":201,"line_end":201,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":94371,"byte_end":94376,"line_start":216,"line_end":216,"column_start":12,"column_end":17},"name":"slice","qualname":"<UdpHeaderSlice>::slice","value":"pub fn slice(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":"Returns the slice containing the udp header\n","sig":null,"attributes":[{"value":"/Returns the slice containing the udp header","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":94313,"byte_end":94359,"line_start":215,"line_end":215,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":94486,"byte_end":94497,"line_start":221,"line_end":221,"column_start":12,"column_end":23},"name":"source_port","qualname":"<UdpHeaderSlice>::source_port","value":"pub fn source_port(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"Reads the \"udp source port\" from the slice.\n","sig":null,"attributes":[{"value":"/Reads the \"udp source port\" from the slice.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":94428,"byte_end":94474,"line_start":220,"line_end":220,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":94634,"byte_end":94650,"line_start":226,"line_end":226,"column_start":12,"column_end":28},"name":"destination_port","qualname":"<UdpHeaderSlice>::destination_port","value":"pub fn destination_port(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"Reads the \"udp destination port\" from the slice.\n","sig":null,"attributes":[{"value":"/Reads the \"udp destination port\" from the slice.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":94571,"byte_end":94622,"line_start":225,"line_end":225,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":94774,"byte_end":94780,"line_start":231,"line_end":231,"column_start":12,"column_end":18},"name":"length","qualname":"<UdpHeaderSlice>::length","value":"pub fn length(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"Reads the \"length\" from the slice.\n","sig":null,"attributes":[{"value":"/Reads the \"length\" from the slice.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":94725,"byte_end":94762,"line_start":230,"line_end":230,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":94906,"byte_end":94914,"line_start":236,"line_end":236,"column_start":12,"column_end":20},"name":"checksum","qualname":"<UdpHeaderSlice>::checksum","value":"pub fn checksum(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"Reads the \"checksum\" from the slice.\n","sig":null,"attributes":[{"value":"/Reads the \"checksum\" from the slice.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":94855,"byte_end":94894,"line_start":235,"line_end":235,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":95068,"byte_end":95077,"line_start":241,"line_end":241,"column_start":12,"column_end":21},"name":"to_header","qualname":"<UdpHeaderSlice>::to_header","value":"pub fn to_header(&Self) -> UdpHeader","parent":null,"children":[],"decl_id":null,"docs":"Decode all the fields and copy the results to a UdpHeader struct\n","sig":null,"attributes":[{"value":"/Decode all the fields and copy the results to a UdpHeader struct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":94989,"byte_end":95056,"line_start":240,"line_end":240,"column_start":5,"column_end":72}}]},{"kind":"Const","id":{"krate":0,"index":432},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":95553,"byte_end":95576,"line_start":10,"line_end":10,"column_start":11,"column_end":34},"name":"TCP_MINIMUM_HEADER_SIZE","qualname":"::transport::tcp::TCP_MINIMUM_HEADER_SIZE","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"The minimum size of the tcp header in bytes\n","sig":null,"attributes":[{"value":"/The minimum size of the tcp header in bytes","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":95496,"byte_end":95542,"line_start":9,"line_end":9,"column_start":1,"column_end":47}}]},{"kind":"Const","id":{"krate":0,"index":433},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":95666,"byte_end":95689,"line_start":12,"line_end":12,"column_start":11,"column_end":34},"name":"TCP_MINIMUM_DATA_OFFSET","qualname":"::transport::tcp::TCP_MINIMUM_DATA_OFFSET","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"The minimum data offset size (size of the tcp header itself).\n","sig":null,"attributes":[{"value":"/The minimum data offset size (size of the tcp header itself).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":95591,"byte_end":95655,"line_start":11,"line_end":11,"column_start":1,"column_end":65}}]},{"kind":"Const","id":{"krate":0,"index":434},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":95781,"byte_end":95804,"line_start":14,"line_end":14,"column_start":11,"column_end":34},"name":"TCP_MAXIMUM_DATA_OFFSET","qualname":"::transport::tcp::TCP_MAXIMUM_DATA_OFFSET","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"The maximum allowed value for the data offset (it is a 4 bit value).\n","sig":null,"attributes":[{"value":"/The maximum allowed value for the data offset (it is a 4 bit value).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":95699,"byte_end":95770,"line_start":13,"line_end":13,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":1555},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":95937,"byte_end":95946,"line_start":20,"line_end":20,"column_start":12,"column_end":21},"name":"TcpHeader","qualname":"::transport::tcp::TcpHeader","value":"TcpHeader { source_port, destination_port, sequence_number, acknowledgment_number, ns, fin, syn, rst, psh, ack, urg, ece, cwr, window_size, checksum, urgent_pointer }","parent":null,"children":[{"krate":0,"index":1556},{"krate":0,"index":1557},{"krate":0,"index":1558},{"krate":0,"index":1559},{"krate":0,"index":1560},{"krate":0,"index":1561},{"krate":0,"index":1562},{"krate":0,"index":1563},{"krate":0,"index":1564},{"krate":0,"index":1565},{"krate":0,"index":1566},{"krate":0,"index":1567},{"krate":0,"index":1568},{"krate":0,"index":1569},{"krate":0,"index":1570},{"krate":0,"index":1571},{"krate":0,"index":1572},{"krate":0,"index":1573}],"decl_id":null,"docs":"TCP header according to rfc 793.","sig":null,"attributes":[{"value":"/TCP header according to rfc 793.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":95817,"byte_end":95852,"line_start":16,"line_end":16,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":95853,"byte_end":95856,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/Field descriptions copied from RFC 793 page 15++","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":95857,"byte_end":95908,"line_start":18,"line_end":18,"column_start":1,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":1556},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":95988,"byte_end":95999,"line_start":22,"line_end":22,"column_start":9,"column_end":20},"name":"source_port","qualname":"::transport::tcp::TcpHeader::source_port","value":"u16","parent":{"krate":0,"index":1555},"children":[],"decl_id":null,"docs":"The source port number.\n","sig":null,"attributes":[{"value":"/The source port number.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":95953,"byte_end":95979,"line_start":21,"line_end":21,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":1557},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":96050,"byte_end":96066,"line_start":24,"line_end":24,"column_start":9,"column_end":25},"name":"destination_port","qualname":"::transport::tcp::TcpHeader::destination_port","value":"u16","parent":{"krate":0,"index":1555},"children":[],"decl_id":null,"docs":"The destination port number.\n","sig":null,"attributes":[{"value":"/The destination port number.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":96010,"byte_end":96041,"line_start":23,"line_end":23,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":1558},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":96349,"byte_end":96364,"line_start":30,"line_end":30,"column_start":9,"column_end":24},"name":"sequence_number","qualname":"::transport::tcp::TcpHeader::sequence_number","value":"u32","parent":{"krate":0,"index":1555},"children":[],"decl_id":null,"docs":"The sequence number of the first data octet in this segment (except when SYN is present).","sig":null,"attributes":[{"value":"/The sequence number of the first data octet in this segment (except when SYN is present).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":96077,"byte_end":96169,"line_start":25,"line_end":25,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":96174,"byte_end":96177,"line_start":26,"line_end":26,"column_start":5,"column_end":8}},{"value":"/If SYN is present the sequence number is the initial sequence number (ISN) ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":96182,"byte_end":96260,"line_start":27,"line_end":27,"column_start":5,"column_end":83}},{"value":"/and the first data octet is ISN+1.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":96265,"byte_end":96302,"line_start":28,"line_end":28,"column_start":5,"column_end":42}},{"value":"/[copied from RFC 793, page 16]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":96307,"byte_end":96340,"line_start":29,"line_end":29,"column_start":5,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":1559},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":96608,"byte_end":96629,"line_start":36,"line_end":36,"column_start":9,"column_end":30},"name":"acknowledgment_number","qualname":"::transport::tcp::TcpHeader::acknowledgment_number","value":"u32","parent":{"krate":0,"index":1555},"children":[],"decl_id":null,"docs":"If the ACK control bit is set this field contains the value of the\nnext sequence number the sender of the segment is expecting to\nreceive.","sig":null,"attributes":[{"value":"/If the ACK control bit is set this field contains the value of the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":96375,"byte_end":96444,"line_start":31,"line_end":31,"column_start":5,"column_end":74}},{"value":"/next sequence number the sender of the segment is expecting to","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":96449,"byte_end":96514,"line_start":32,"line_end":32,"column_start":5,"column_end":70}},{"value":"/receive.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":96519,"byte_end":96530,"line_start":33,"line_end":33,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":96535,"byte_end":96538,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/Once a connection is established this is always sent.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":96543,"byte_end":96599,"line_start":35,"line_end":35,"column_start":5,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":1561},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":96934,"byte_end":96936,"line_start":43,"line_end":43,"column_start":9,"column_end":11},"name":"ns","qualname":"::transport::tcp::TcpHeader::ns","value":"bool","parent":{"krate":0,"index":1555},"children":[],"decl_id":null,"docs":"ECN-nonce - concealment protection (experimental: see RFC 3540)\n","sig":null,"attributes":[{"value":"/ECN-nonce - concealment protection (experimental: see RFC 3540)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":96859,"byte_end":96925,"line_start":42,"line_end":42,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":1562},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":96984,"byte_end":96987,"line_start":45,"line_end":45,"column_start":9,"column_end":12},"name":"fin","qualname":"::transport::tcp::TcpHeader::fin","value":"bool","parent":{"krate":0,"index":1555},"children":[],"decl_id":null,"docs":"No more data from sender\n","sig":null,"attributes":[{"value":"/No more data from sender","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":96948,"byte_end":96975,"line_start":44,"line_end":44,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":1563},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":97039,"byte_end":97042,"line_start":47,"line_end":47,"column_start":9,"column_end":12},"name":"syn","qualname":"::transport::tcp::TcpHeader::syn","value":"bool","parent":{"krate":0,"index":1555},"children":[],"decl_id":null,"docs":"Synchronize sequence numbers\n","sig":null,"attributes":[{"value":"/Synchronize sequence numbers","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":96999,"byte_end":97030,"line_start":46,"line_end":46,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":1564},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":97086,"byte_end":97089,"line_start":49,"line_end":49,"column_start":9,"column_end":12},"name":"rst","qualname":"::transport::tcp::TcpHeader::rst","value":"bool","parent":{"krate":0,"index":1555},"children":[],"decl_id":null,"docs":"Reset the connection\n","sig":null,"attributes":[{"value":"/Reset the connection","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":97054,"byte_end":97077,"line_start":48,"line_end":48,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":1565},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":97126,"byte_end":97129,"line_start":51,"line_end":51,"column_start":9,"column_end":12},"name":"psh","qualname":"::transport::tcp::TcpHeader::psh","value":"bool","parent":{"krate":0,"index":1555},"children":[],"decl_id":null,"docs":"Push Function\n","sig":null,"attributes":[{"value":"/Push Function","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":97101,"byte_end":97117,"line_start":50,"line_end":50,"column_start":5,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":1566},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":97185,"byte_end":97188,"line_start":53,"line_end":53,"column_start":9,"column_end":12},"name":"ack","qualname":"::transport::tcp::TcpHeader::ack","value":"bool","parent":{"krate":0,"index":1555},"children":[],"decl_id":null,"docs":"Acknowledgment field significant\n","sig":null,"attributes":[{"value":"/Acknowledgment field significant","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":97141,"byte_end":97176,"line_start":52,"line_end":52,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":1567},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":97244,"byte_end":97247,"line_start":55,"line_end":55,"column_start":9,"column_end":12},"name":"urg","qualname":"::transport::tcp::TcpHeader::urg","value":"bool","parent":{"krate":0,"index":1555},"children":[],"decl_id":null,"docs":"Urgent Pointer field significant\n","sig":null,"attributes":[{"value":"/Urgent Pointer field significant","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":97200,"byte_end":97235,"line_start":54,"line_end":54,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":1568},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":97290,"byte_end":97293,"line_start":57,"line_end":57,"column_start":9,"column_end":12},"name":"ece","qualname":"::transport::tcp::TcpHeader::ece","value":"bool","parent":{"krate":0,"index":1555},"children":[],"decl_id":null,"docs":"ECN-Echo (RFC 3168)\n","sig":null,"attributes":[{"value":"/ECN-Echo (RFC 3168)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":97259,"byte_end":97281,"line_start":56,"line_end":56,"column_start":5,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":1569},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":97552,"byte_end":97555,"line_start":61,"line_end":61,"column_start":9,"column_end":12},"name":"cwr","qualname":"::transport::tcp::TcpHeader::cwr","value":"bool","parent":{"krate":0,"index":1555},"children":[],"decl_id":null,"docs":"Congestion Window Reduced (CWR) flag ","sig":null,"attributes":[{"value":"/Congestion Window Reduced (CWR) flag ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":97305,"byte_end":97345,"line_start":58,"line_end":58,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":97350,"byte_end":97353,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/This flag is set by the sending host to indicate that it received a TCP segment with the ECE flag set and had responded in congestion control mechanism (added to header by RFC 3168).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":97358,"byte_end":97543,"line_start":60,"line_end":60,"column_start":5,"column_end":190}}]},{"kind":"Field","id":{"krate":0,"index":1570},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":97734,"byte_end":97745,"line_start":65,"line_end":65,"column_start":9,"column_end":20},"name":"window_size","qualname":"::transport::tcp::TcpHeader::window_size","value":"u16","parent":{"krate":0,"index":1555},"children":[],"decl_id":null,"docs":"The number of data octets beginning with the one indicated in the\nacknowledgment field which the sender of this segment is willing to\naccept.\n","sig":null,"attributes":[{"value":"/The number of data octets beginning with the one indicated in the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":97567,"byte_end":97635,"line_start":62,"line_end":62,"column_start":5,"column_end":73}},{"value":"/acknowledgment field which the sender of this segment is willing to","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":97640,"byte_end":97710,"line_start":63,"line_end":63,"column_start":5,"column_end":75}},{"value":"/accept.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":97715,"byte_end":97725,"line_start":64,"line_end":64,"column_start":5,"column_end":15}}]},{"kind":"Field","id":{"krate":0,"index":1571},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":97860,"byte_end":97868,"line_start":67,"line_end":67,"column_start":9,"column_end":17},"name":"checksum","qualname":"::transport::tcp::TcpHeader::checksum","value":"u16","parent":{"krate":0,"index":1555},"children":[],"decl_id":null,"docs":"Checksum (16 bit one's complement) of the pseudo ip header, this tcp header and the payload.\n","sig":null,"attributes":[{"value":"/Checksum (16 bit one's complement) of the pseudo ip header, this tcp header and the payload.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":97756,"byte_end":97851,"line_start":66,"line_end":66,"column_start":5,"column_end":100}}]},{"kind":"Field","id":{"krate":0,"index":1572},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":98219,"byte_end":98233,"line_start":74,"line_end":74,"column_start":9,"column_end":23},"name":"urgent_pointer","qualname":"::transport::tcp::TcpHeader::urgent_pointer","value":"u16","parent":{"krate":0,"index":1555},"children":[],"decl_id":null,"docs":"This field communicates the current value of the urgent pointer as a\npositive offset from the sequence number in this segment.","sig":null,"attributes":[{"value":"/This field communicates the current value of the urgent pointer as a","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":97879,"byte_end":97950,"line_start":68,"line_end":68,"column_start":5,"column_end":76}},{"value":"/positive offset from the sequence number in this segment.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":97955,"byte_end":98015,"line_start":69,"line_end":69,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":98020,"byte_end":98023,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/The urgent pointer points to the sequence number of the octet following","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":98028,"byte_end":98102,"line_start":71,"line_end":71,"column_start":5,"column_end":79}},{"value":"/the urgent data.  This field is only be interpreted in segments with","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":98107,"byte_end":98178,"line_start":72,"line_end":72,"column_start":5,"column_end":76}},{"value":"/the URG control bit set.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":98183,"byte_end":98210,"line_start":73,"line_end":73,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":436},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":98596,"byte_end":98599,"line_start":82,"line_end":82,"column_start":12,"column_end":15},"name":"new","qualname":"<TcpHeader>::new","value":"pub fn new(u16, u16, u32, u16) -> TcpHeader","parent":null,"children":[],"decl_id":null,"docs":"Creates a TcpHeader with the given values and the rest initialized with default values.\n","sig":null,"attributes":[{"value":"/Creates a TcpHeader with the given values and the rest initialized with default values.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":98494,"byte_end":98584,"line_start":81,"line_end":81,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":438},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":99445,"byte_end":99456,"line_start":109,"line_end":109,"column_start":12,"column_end":23},"name":"data_offset","qualname":"<TcpHeader>::data_offset","value":"pub fn data_offset(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"The number of 32 bit words in the TCP Header.","sig":null,"attributes":[{"value":"/The number of 32 bit words in the TCP Header.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":99241,"byte_end":99289,"line_start":105,"line_end":105,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":99294,"byte_end":99297,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/This indicates where the data begins.  The TCP header (even one including options) is an","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":99302,"byte_end":99393,"line_start":107,"line_end":107,"column_start":5,"column_end":96}},{"value":"/integral number of 32 bits long.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":99398,"byte_end":99433,"line_start":108,"line_end":108,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":99579,"byte_end":99589,"line_start":114,"line_end":114,"column_start":12,"column_end":22},"name":"header_len","qualname":"<TcpHeader>::header_len","value":"pub fn header_len(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"Returns the length of the header including the options.\n","sig":null,"attributes":[{"value":"/Returns the length of the header including the options.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":99509,"byte_end":99567,"line_start":113,"line_end":113,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":99854,"byte_end":99865,"line_start":119,"line_end":119,"column_start":12,"column_end":23},"name":"options_len","qualname":"<TcpHeader>::options_len","value":"pub fn options_len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"Returns the options size in bytes based on the currently set data_offset. Returns None if the data_offset is smaller then the minimum size or bigger then the maximum supported size.\n","sig":null,"attributes":[{"value":"/Returns the options size in bytes based on the currently set data_offset. Returns None if the data_offset is smaller then the minimum size or bigger then the maximum supported size.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":99658,"byte_end":99842,"line_start":118,"line_end":118,"column_start":5,"column_end":189}}]},{"kind":"Method","id":{"krate":0,"index":441},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":100214,"byte_end":100221,"line_start":126,"line_end":126,"column_start":12,"column_end":19},"name":"options","qualname":"<TcpHeader>::options","value":"pub fn options(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":"Returns a slice containing the options of the header (size is determined via the data_offset field.\n","sig":null,"attributes":[{"value":"/Returns a slice containing the options of the header (size is determined via the data_offset field.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":100100,"byte_end":100202,"line_start":125,"line_end":125,"column_start":5,"column_end":107}}]},{"kind":"Method","id":{"krate":0,"index":442},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":100418,"byte_end":100429,"line_start":131,"line_end":131,"column_start":12,"column_end":23},"name":"set_options","qualname":"<TcpHeader>::set_options","value":"pub fn set_options(&mut Self, &[TcpOptionElement])\n-> Result<(), TcpOptionWriteError>","parent":null,"children":[],"decl_id":null,"docs":"Sets the options (overwrites the current options) or returns an error when there is not enough space.\n","sig":null,"attributes":[{"value":"/Sets the options (overwrites the current options) or returns an error when there is not enough space.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":100302,"byte_end":100406,"line_start":130,"line_end":130,"column_start":5,"column_end":109}}]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":105413,"byte_end":105428,"line_start":251,"line_end":251,"column_start":12,"column_end":27},"name":"set_options_raw","qualname":"<TcpHeader>::set_options_raw","value":"pub fn set_options_raw(&mut Self, &[u8]) -> Result<(), TcpOptionWriteError>","parent":null,"children":[],"decl_id":null,"docs":"Sets the options to the data given.\n","sig":null,"attributes":[{"value":"/Sets the options to the data given.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":105363,"byte_end":105401,"line_start":250,"line_end":250,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":106154,"byte_end":106170,"line_start":270,"line_end":270,"column_start":12,"column_end":28},"name":"options_iterator","qualname":"<TcpHeader>::options_iterator","value":"pub fn options_iterator(&Self) -> TcpOptionsIterator","parent":null,"children":[],"decl_id":null,"docs":"Returns an iterator that allows to iterate through all known TCP header options.\n","sig":null,"attributes":[{"value":"/Returns an iterator that allows to iterate through all known TCP header options.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":106059,"byte_end":106142,"line_start":269,"line_end":269,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":451},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":106362,"byte_end":106377,"line_start":277,"line_end":277,"column_start":12,"column_end":27},"name":"read_from_slice","qualname":"<TcpHeader>::read_from_slice","value":"pub fn read_from_slice(&[u8]) -> Result<(TcpHeader, &[u8]), ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Reads a tcp header from a slice\n","sig":null,"attributes":[{"value":"/Reads a tcp header from a slice","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":106316,"byte_end":106350,"line_start":276,"line_end":276,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":106645,"byte_end":106649,"line_start":286,"line_end":286,"column_start":12,"column_end":16},"name":"read","qualname":"<TcpHeader>::read","value":"pub fn read<T: io::Read + Sized>(&mut T) -> Result<TcpHeader, ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Read a tcp header from the current position\n","sig":null,"attributes":[{"value":"/Read a tcp header from the current position","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":106587,"byte_end":106633,"line_start":285,"line_end":285,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":108479,"byte_end":108484,"line_start":332,"line_end":332,"column_start":12,"column_end":17},"name":"write","qualname":"<TcpHeader>::write","value":"pub fn write<T: io::Write + Sized>(&Self, &mut T)\n-> Result<(), std::io::Error>","parent":null,"children":[],"decl_id":null,"docs":"Write the tcp header to a stream (does NOT calculate the checksum).\n","sig":null,"attributes":[{"value":"/Write the tcp header to a stream (does NOT calculate the checksum).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":108397,"byte_end":108467,"line_start":331,"line_end":331,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":110444,"byte_end":110462,"line_start":391,"line_end":391,"column_start":12,"column_end":30},"name":"calc_checksum_ipv4","qualname":"<TcpHeader>::calc_checksum_ipv4","value":"pub fn calc_checksum_ipv4(&Self, &Ipv4Header, &[u8])\n-> Result<u16, ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Calculates the upd header checksum based on a ipv4 header and returns the result. This does NOT set the checksum.\n","sig":null,"attributes":[{"value":"/Calculates the upd header checksum based on a ipv4 header and returns the result. This does NOT set the checksum.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":110316,"byte_end":110432,"line_start":390,"line_end":390,"column_start":5,"column_end":121}}]},{"kind":"Method","id":{"krate":0,"index":459},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":110766,"byte_end":110788,"line_start":396,"line_end":396,"column_start":12,"column_end":34},"name":"calc_checksum_ipv4_raw","qualname":"<TcpHeader>::calc_checksum_ipv4_raw","value":"pub fn calc_checksum_ipv4_raw(&Self, [u8; ], [u8; ], &[u8])\n-> Result<u16, ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Calculates the checksum for the current header in ipv4 mode and returns the result. This does NOT set the checksum.\n","sig":null,"attributes":[{"value":"/Calculates the checksum for the current header in ipv4 mode and returns the result. This does NOT set the checksum.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":110636,"byte_end":110754,"line_start":395,"line_end":395,"column_start":5,"column_end":123}}]},{"kind":"Method","id":{"krate":0,"index":462},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":111888,"byte_end":111906,"line_start":415,"line_end":415,"column_start":12,"column_end":30},"name":"calc_checksum_ipv6","qualname":"<TcpHeader>::calc_checksum_ipv6","value":"pub fn calc_checksum_ipv6(&Self, &Ipv6Header, &[u8])\n-> Result<u16, ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Calculates the upd header checksum based on a ipv6 header and returns the result. This does NOT set the checksum..\n","sig":null,"attributes":[{"value":"/Calculates the upd header checksum based on a ipv6 header and returns the result. This does NOT set the checksum..","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":111759,"byte_end":111876,"line_start":414,"line_end":414,"column_start":5,"column_end":122}}]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":112212,"byte_end":112234,"line_start":420,"line_end":420,"column_start":12,"column_end":34},"name":"calc_checksum_ipv6_raw","qualname":"<TcpHeader>::calc_checksum_ipv6_raw","value":"pub fn calc_checksum_ipv6_raw(&Self, &[u8; ], &[u8; ], &[u8])\n-> Result<u16, ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Calculates the checksum for the current header in ipv6 mode and returns the result. This does NOT set the checksum.\n","sig":null,"attributes":[{"value":"/Calculates the checksum for the current header in ipv6 mode and returns the result. This does NOT set the checksum.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":112082,"byte_end":112200,"line_start":419,"line_end":419,"column_start":5,"column_end":123}}]},{"kind":"Struct","id":{"krate":0,"index":1577},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":119123,"byte_end":119137,"line_start":603,"line_end":603,"column_start":12,"column_end":26},"name":"TcpHeaderSlice","qualname":"::transport::tcp::TcpHeaderSlice","value":"TcpHeaderSlice {  }","parent":null,"children":[{"krate":0,"index":1579}],"decl_id":null,"docs":"A slice containing an tcp header of a network package.\n","sig":null,"attributes":[{"value":"/A slice containing an tcp header of a network package.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":119015,"byte_end":119072,"line_start":601,"line_end":601,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":483},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":119258,"byte_end":119268,"line_start":610,"line_end":610,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<TcpHeaderSlice>::from_slice","value":"pub fn from_slice(&'a [u8]) -> Result<TcpHeaderSlice, ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Creates a slice containing an tcp header.\n","sig":null,"attributes":[{"value":"/Creates a slice containing an tcp header.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":119202,"byte_end":119246,"line_start":609,"line_end":609,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":485},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":120039,"byte_end":120044,"line_start":633,"line_end":633,"column_start":12,"column_end":17},"name":"slice","qualname":"<TcpHeaderSlice>::slice","value":"pub fn slice(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":"Returns the slice containing the tcp header\n","sig":null,"attributes":[{"value":"/Returns the slice containing the tcp header","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":119981,"byte_end":120027,"line_start":632,"line_end":632,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":486},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":120144,"byte_end":120155,"line_start":638,"line_end":638,"column_start":12,"column_end":23},"name":"source_port","qualname":"<TcpHeaderSlice>::source_port","value":"pub fn source_port(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"Read the destination port number.\n","sig":null,"attributes":[{"value":"/Read the destination port number.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":120096,"byte_end":120132,"line_start":637,"line_end":637,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":487},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":120277,"byte_end":120293,"line_start":643,"line_end":643,"column_start":12,"column_end":28},"name":"destination_port","qualname":"<TcpHeaderSlice>::destination_port","value":"pub fn destination_port(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"Read the destination port number.\n","sig":null,"attributes":[{"value":"/Read the destination port number.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":120229,"byte_end":120265,"line_start":642,"line_end":642,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":488},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":120648,"byte_end":120663,"line_start":652,"line_end":652,"column_start":12,"column_end":27},"name":"sequence_number","qualname":"<TcpHeaderSlice>::sequence_number","value":"pub fn sequence_number(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"Read the sequence number of the first data octet in this segment (except when SYN is present).","sig":null,"attributes":[{"value":"/Read the sequence number of the first data octet in this segment (except when SYN is present).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":120368,"byte_end":120465,"line_start":647,"line_end":647,"column_start":5,"column_end":102}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":120470,"byte_end":120473,"line_start":648,"line_end":648,"column_start":5,"column_end":8}},{"value":"/If SYN is present the sequence number is the initial sequence number (ISN) ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":120478,"byte_end":120556,"line_start":649,"line_end":649,"column_start":5,"column_end":83}},{"value":"/and the first data octet is ISN+1.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":120561,"byte_end":120598,"line_start":650,"line_end":650,"column_start":5,"column_end":42}},{"value":"/[copied from RFC 793, page 16]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":120603,"byte_end":120636,"line_start":651,"line_end":651,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":121022,"byte_end":121043,"line_start":663,"line_end":663,"column_start":12,"column_end":33},"name":"acknowledgment_number","qualname":"<TcpHeaderSlice>::acknowledgment_number","value":"pub fn acknowledgment_number(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"Reads the acknowledgment number.","sig":null,"attributes":[{"value":"/Reads the acknowledgment number.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":120738,"byte_end":120773,"line_start":656,"line_end":656,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":120778,"byte_end":120781,"line_start":657,"line_end":657,"column_start":5,"column_end":8}},{"value":"/If the ACK control bit is set this field contains the value of the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":120786,"byte_end":120855,"line_start":658,"line_end":658,"column_start":5,"column_end":74}},{"value":"/next sequence number the sender of the segment is expecting to","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":120860,"byte_end":120925,"line_start":659,"line_end":659,"column_start":5,"column_end":70}},{"value":"/receive.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":120930,"byte_end":120941,"line_start":660,"line_end":660,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":120946,"byte_end":120949,"line_start":661,"line_end":661,"column_start":5,"column_end":8}},{"value":"/Once a connection is established this is always sent.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":120954,"byte_end":121010,"line_start":662,"line_end":662,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":490},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":121328,"byte_end":121339,"line_start":671,"line_end":671,"column_start":12,"column_end":23},"name":"data_offset","qualname":"<TcpHeaderSlice>::data_offset","value":"pub fn data_offset(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":"Read the number of 32 bit words in the TCP Header.","sig":null,"attributes":[{"value":"/Read the number of 32 bit words in the TCP Header.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":121119,"byte_end":121172,"line_start":667,"line_end":667,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":121177,"byte_end":121180,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/This indicates where the data begins.  The TCP header (even one including options) is an","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":121185,"byte_end":121276,"line_start":669,"line_end":669,"column_start":5,"column_end":96}},{"value":"/integral number of 32 bits long.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":121281,"byte_end":121316,"line_start":670,"line_end":670,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":491},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":121481,"byte_end":121483,"line_start":676,"line_end":676,"column_start":12,"column_end":14},"name":"ns","qualname":"<TcpHeaderSlice>::ns","value":"pub fn ns(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"ECN-nonce - concealment protection (experimental: see RFC 3540)\n","sig":null,"attributes":[{"value":"/ECN-nonce - concealment protection (experimental: see RFC 3540)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":121403,"byte_end":121469,"line_start":675,"line_end":675,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":492},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":121606,"byte_end":121609,"line_start":681,"line_end":681,"column_start":12,"column_end":15},"name":"fin","qualname":"<TcpHeaderSlice>::fin","value":"pub fn fin(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Read the fin flag (no more data from sender).\n","sig":null,"attributes":[{"value":"/Read the fin flag (no more data from sender).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":121546,"byte_end":121594,"line_start":680,"line_end":680,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":493},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":121737,"byte_end":121740,"line_start":686,"line_end":686,"column_start":12,"column_end":15},"name":"syn","qualname":"<TcpHeaderSlice>::syn","value":"pub fn syn(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Reads the syn flag (synchronize sequence numbers).\n","sig":null,"attributes":[{"value":"/Reads the syn flag (synchronize sequence numbers).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":121672,"byte_end":121725,"line_start":685,"line_end":685,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":494},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":121860,"byte_end":121863,"line_start":691,"line_end":691,"column_start":12,"column_end":15},"name":"rst","qualname":"<TcpHeaderSlice>::rst","value":"pub fn rst(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Reads the rst flag (reset the connection).\n","sig":null,"attributes":[{"value":"/Reads the rst flag (reset the connection).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":121803,"byte_end":121848,"line_start":690,"line_end":690,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":495},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":121976,"byte_end":121979,"line_start":696,"line_end":696,"column_start":12,"column_end":15},"name":"psh","qualname":"<TcpHeaderSlice>::psh","value":"pub fn psh(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Reads the psh flag (push function).\n","sig":null,"attributes":[{"value":"/Reads the psh flag (push function).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":121926,"byte_end":121964,"line_start":695,"line_end":695,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":122111,"byte_end":122114,"line_start":701,"line_end":701,"column_start":12,"column_end":15},"name":"ack","qualname":"<TcpHeaderSlice>::ack","value":"pub fn ack(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Reads the ack flag (acknowledgment field significant).\n","sig":null,"attributes":[{"value":"/Reads the ack flag (acknowledgment field significant).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":122042,"byte_end":122099,"line_start":700,"line_end":700,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":497},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":122247,"byte_end":122250,"line_start":706,"line_end":706,"column_start":12,"column_end":15},"name":"urg","qualname":"<TcpHeaderSlice>::urg","value":"pub fn urg(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Reads the urg flag (Urgent Pointer field significant).\n","sig":null,"attributes":[{"value":"/Reads the urg flag (Urgent Pointer field significant).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":122178,"byte_end":122235,"line_start":705,"line_end":705,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":498},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":122363,"byte_end":122366,"line_start":711,"line_end":711,"column_start":12,"column_end":15},"name":"ece","qualname":"<TcpHeaderSlice>::ece","value":"pub fn ece(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Read the ECN-Echo flag (RFC 3168).\n","sig":null,"attributes":[{"value":"/Read the ECN-Echo flag (RFC 3168).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":122314,"byte_end":122351,"line_start":710,"line_end":710,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":499},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":122691,"byte_end":122694,"line_start":718,"line_end":718,"column_start":12,"column_end":15},"name":"cwr","qualname":"<TcpHeaderSlice>::cwr","value":"pub fn cwr(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Reads the cwr flag (Congestion Window Reduced). ","sig":null,"attributes":[{"value":"/Reads the cwr flag (Congestion Window Reduced). ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":122430,"byte_end":122481,"line_start":715,"line_end":715,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":122486,"byte_end":122489,"line_start":716,"line_end":716,"column_start":5,"column_end":8}},{"value":"/This flag is set by the sending host to indicate that it received a TCP segment with the ECE flag set and had responded in congestion control mechanism (added to header by RFC 3168).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":122494,"byte_end":122679,"line_start":717,"line_end":717,"column_start":5,"column_end":190}}]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":122929,"byte_end":122940,"line_start":725,"line_end":725,"column_start":12,"column_end":23},"name":"window_size","qualname":"<TcpHeaderSlice>::window_size","value":"pub fn window_size(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"The number of data octets beginning with the one indicated in the\nacknowledgment field which the sender of this segment is willing to\naccept.\n","sig":null,"attributes":[{"value":"/The number of data octets beginning with the one indicated in the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":122759,"byte_end":122827,"line_start":722,"line_end":722,"column_start":5,"column_end":73}},{"value":"/acknowledgment field which the sender of this segment is willing to","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":122832,"byte_end":122902,"line_start":723,"line_end":723,"column_start":5,"column_end":75}},{"value":"/accept.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":122907,"byte_end":122917,"line_start":724,"line_end":724,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":123124,"byte_end":123132,"line_start":730,"line_end":730,"column_start":12,"column_end":20},"name":"checksum","qualname":"<TcpHeaderSlice>::checksum","value":"pub fn checksum(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"Checksum (16 bit one's complement) of the pseudo ip header, this tcp header and the payload.\n","sig":null,"attributes":[{"value":"/Checksum (16 bit one's complement) of the pseudo ip header, this tcp header and the payload.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":123017,"byte_end":123112,"line_start":729,"line_end":729,"column_start":5,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":123552,"byte_end":123566,"line_start":740,"line_end":740,"column_start":12,"column_end":26},"name":"urgent_pointer","qualname":"<TcpHeaderSlice>::urgent_pointer","value":"pub fn urgent_pointer(&Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":"This field communicates the current value of the urgent pointer as a\npositive offset from the sequence number in this segment.","sig":null,"attributes":[{"value":"/This field communicates the current value of the urgent pointer as a","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":123209,"byte_end":123280,"line_start":734,"line_end":734,"column_start":5,"column_end":76}},{"value":"/positive offset from the sequence number in this segment.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":123285,"byte_end":123345,"line_start":735,"line_end":735,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":123350,"byte_end":123353,"line_start":736,"line_end":736,"column_start":5,"column_end":8}},{"value":"/The urgent pointer points to the sequence number of the octet following","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":123358,"byte_end":123432,"line_start":737,"line_end":737,"column_start":5,"column_end":79}},{"value":"/the urgent data.  This field is only be interpreted in segments with","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":123437,"byte_end":123508,"line_start":738,"line_end":738,"column_start":5,"column_end":76}},{"value":"/the URG control bit set.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":123513,"byte_end":123540,"line_start":739,"line_end":739,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":123679,"byte_end":123686,"line_start":745,"line_end":745,"column_start":12,"column_end":19},"name":"options","qualname":"<TcpHeaderSlice>::options","value":"pub fn options(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":"Options of the header\n","sig":null,"attributes":[{"value":"/Options of the header","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":123643,"byte_end":123667,"line_start":744,"line_end":744,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":123887,"byte_end":123903,"line_start":750,"line_end":750,"column_start":12,"column_end":28},"name":"options_iterator","qualname":"<TcpHeaderSlice>::options_iterator","value":"pub fn options_iterator(&Self) -> TcpOptionsIterator","parent":null,"children":[],"decl_id":null,"docs":"Returns an iterator that allows to iterate through all known TCP header options.\n","sig":null,"attributes":[{"value":"/Returns an iterator that allows to iterate through all known TCP header options.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":123792,"byte_end":123875,"line_start":749,"line_end":749,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":124080,"byte_end":124089,"line_start":755,"line_end":755,"column_start":12,"column_end":21},"name":"to_header","qualname":"<TcpHeaderSlice>::to_header","value":"pub fn to_header(&Self) -> TcpHeader","parent":null,"children":[],"decl_id":null,"docs":"Decode all the fields and copy the results to a TcpHeader struct\n","sig":null,"attributes":[{"value":"/Decode all the fields and copy the results to a TcpHeader struct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":124001,"byte_end":124068,"line_start":754,"line_end":754,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":508},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":125233,"byte_end":125251,"line_start":786,"line_end":786,"column_start":12,"column_end":30},"name":"calc_checksum_ipv4","qualname":"<TcpHeaderSlice>::calc_checksum_ipv4","value":"pub fn calc_checksum_ipv4(&Self, &Ipv4HeaderSlice, &[u8])\n-> Result<u16, ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Calculates the upd header checksum based on a ipv4 header and returns the result. This does NOT set the checksum.\n","sig":null,"attributes":[{"value":"/Calculates the upd header checksum based on a ipv4 header and returns the result. This does NOT set the checksum.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":125105,"byte_end":125221,"line_start":785,"line_end":785,"column_start":5,"column_end":121}}]},{"kind":"Method","id":{"krate":0,"index":509},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":125566,"byte_end":125588,"line_start":791,"line_end":791,"column_start":12,"column_end":34},"name":"calc_checksum_ipv4_raw","qualname":"<TcpHeaderSlice>::calc_checksum_ipv4_raw","value":"pub fn calc_checksum_ipv4_raw(&Self, &[u8], &[u8], &[u8])\n-> Result<u16, ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Calculates the checksum for the current header in ipv4 mode and returns the result. This does NOT set the checksum.\n","sig":null,"attributes":[{"value":"/Calculates the checksum for the current header in ipv4 mode and returns the result. This does NOT set the checksum.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":125436,"byte_end":125554,"line_start":790,"line_end":790,"column_start":5,"column_end":123}}]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":126672,"byte_end":126690,"line_start":810,"line_end":810,"column_start":12,"column_end":30},"name":"calc_checksum_ipv6","qualname":"<TcpHeaderSlice>::calc_checksum_ipv6","value":"pub fn calc_checksum_ipv6(&Self, &Ipv6HeaderSlice, &[u8])\n-> Result<u16, ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Calculates the upd header checksum based on a ipv6 header and returns the result. This does NOT set the checksum..\n","sig":null,"attributes":[{"value":"/Calculates the upd header checksum based on a ipv6 header and returns the result. This does NOT set the checksum..","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":126543,"byte_end":126660,"line_start":809,"line_end":809,"column_start":5,"column_end":122}}]},{"kind":"Method","id":{"krate":0,"index":511},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":127005,"byte_end":127027,"line_start":815,"line_end":815,"column_start":12,"column_end":34},"name":"calc_checksum_ipv6_raw","qualname":"<TcpHeaderSlice>::calc_checksum_ipv6_raw","value":"pub fn calc_checksum_ipv6_raw(&Self, &[u8], &[u8], &[u8])\n-> Result<u16, ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Calculates the checksum for the current header in ipv6 mode and returns the result. This does NOT set the checksum.\n","sig":null,"attributes":[{"value":"/Calculates the checksum for the current header in ipv6 mode and returns the result. This does NOT set the checksum.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":126875,"byte_end":126993,"line_start":814,"line_end":814,"column_start":5,"column_end":123}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1598},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":129455,"byte_end":129458,"line_start":877,"line_end":877,"column_start":5,"column_end":8},"name":"Nop","qualname":"::transport::tcp::TcpOptionElement::Nop","value":"TcpOptionElement::Nop","parent":{"krate":0,"index":1597},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1600},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":129464,"byte_end":129482,"line_start":878,"line_end":878,"column_start":5,"column_end":23},"name":"MaximumSegmentSize","qualname":"::transport::tcp::TcpOptionElement::MaximumSegmentSize","value":"TcpOptionElement::MaximumSegmentSize(u16)","parent":{"krate":0,"index":1597},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1603},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":129493,"byte_end":129504,"line_start":879,"line_end":879,"column_start":5,"column_end":16},"name":"WindowScale","qualname":"::transport::tcp::TcpOptionElement::WindowScale","value":"TcpOptionElement::WindowScale(u8)","parent":{"krate":0,"index":1597},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1606},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":129514,"byte_end":129547,"line_start":880,"line_end":880,"column_start":5,"column_end":38},"name":"SelectiveAcknowledgementPermitted","qualname":"::transport::tcp::TcpOptionElement::SelectiveAcknowledgementPermitted","value":"TcpOptionElement::SelectiveAcknowledgementPermitted","parent":{"krate":0,"index":1597},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1608},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":129553,"byte_end":129577,"line_start":881,"line_end":881,"column_start":5,"column_end":29},"name":"SelectiveAcknowledgement","qualname":"::transport::tcp::TcpOptionElement::SelectiveAcknowledgement","value":"TcpOptionElement::SelectiveAcknowledgement((u32, u32), [Option<(u32, u32)>; ])","parent":{"krate":0,"index":1597},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1613},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":129711,"byte_end":129720,"line_start":883,"line_end":883,"column_start":5,"column_end":14},"name":"Timestamp","qualname":"::transport::tcp::TcpOptionElement::Timestamp","value":"TcpOptionElement::Timestamp(u32, u32)","parent":{"krate":0,"index":1597},"children":[],"decl_id":null,"docs":"Timestamp & echo (first number is the sender timestamp, the second the echo timestamp)\n","sig":null,"attributes":[{"value":"/Timestamp & echo (first number is the sender timestamp, the second the echo timestamp)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":129617,"byte_end":129706,"line_start":882,"line_end":882,"column_start":5,"column_end":94}}]},{"kind":"Enum","id":{"krate":0,"index":1597},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":129432,"byte_end":129448,"line_start":876,"line_end":876,"column_start":10,"column_end":26},"name":"TcpOptionElement","qualname":"::transport::tcp::TcpOptionElement","value":"pub enum TcpOptionElement {\n    Nop,\n    MaximumSegmentSize(u16),\n    WindowScale(u8),\n    SelectiveAcknowledgementPermitted,\n    SelectiveAcknowledgement((u32, u32), [Option<(u32, u32)>; ]),\n    Timestamp(u32, u32),\n}","parent":null,"children":[{"krate":0,"index":1598},{"krate":0,"index":1600},{"krate":0,"index":1603},{"krate":0,"index":1606},{"krate":0,"index":1608},{"krate":0,"index":1613}],"decl_id":null,"docs":"Different kinds of options that can be present in the options part of a tcp header.\n","sig":null,"attributes":[{"value":"/Different kinds of options that can be present in the options part of a tcp header.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":129297,"byte_end":129383,"line_start":874,"line_end":874,"column_start":1,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1630},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":129994,"byte_end":130014,"line_start":890,"line_end":890,"column_start":5,"column_end":25},"name":"UnexpectedEndOfSlice","qualname":"::transport::tcp::TcpOptionReadError::UnexpectedEndOfSlice","value":"TcpOptionReadError::UnexpectedEndOfSlice(u8)","parent":{"krate":0,"index":1629},"children":[],"decl_id":null,"docs":"Returned if an option id was read, but there was not enough memory in the options left to completely read it.\n","sig":null,"attributes":[{"value":"/Returned if an option id was read, but there was not enough memory in the options left to completely read it.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":129877,"byte_end":129989,"line_start":889,"line_end":889,"column_start":5,"column_end":117}}]},{"kind":"StructVariant","id":{"krate":0,"index":1633},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":130124,"byte_end":130138,"line_start":893,"line_end":893,"column_start":5,"column_end":19},"name":"UnexpectedSize","qualname":"::transport::tcp::TcpOptionReadError::UnexpectedSize","value":"TcpOptionReadError::UnexpectedSize { option_id, size }","parent":{"krate":0,"index":1629},"children":[],"decl_id":null,"docs":"Returned if the option as an unexpected size argument (e.g. != 4 for maximum segment size).\n","sig":null,"attributes":[{"value":"/Returned if the option as an unexpected size argument (e.g. != 4 for maximum segment size).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":130025,"byte_end":130119,"line_start":892,"line_end":892,"column_start":5,"column_end":99}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1636},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":130347,"byte_end":130356,"line_start":898,"line_end":898,"column_start":5,"column_end":14},"name":"UnknownId","qualname":"::transport::tcp::TcpOptionReadError::UnknownId","value":"TcpOptionReadError::UnknownId(u8)","parent":{"krate":0,"index":1629},"children":[],"decl_id":null,"docs":"Returned if an unknown tcp header option is encountered.","sig":null,"attributes":[{"value":"/Returned if an unknown tcp header option is encountered.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":130171,"byte_end":130230,"line_start":895,"line_end":895,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":130235,"byte_end":130238,"line_start":896,"line_end":896,"column_start":5,"column_end":8}},{"value":"/The first element is the identifier and the slice contains the rest of data left in the options.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":130243,"byte_end":130342,"line_start":897,"line_end":897,"column_start":5,"column_end":104}}]},{"kind":"Enum","id":{"krate":0,"index":1629},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":129852,"byte_end":129870,"line_start":888,"line_end":888,"column_start":10,"column_end":28},"name":"TcpOptionReadError","qualname":"::transport::tcp::TcpOptionReadError","value":"pub enum TcpOptionReadError {\n    UnexpectedEndOfSlice(u8),\n    UnexpectedSize {\n        option_id: u8,\n        size: u8,\n    },\n    UnknownId(u8),\n}","parent":null,"children":[{"krate":0,"index":1630},{"krate":0,"index":1633},{"krate":0,"index":1636}],"decl_id":null,"docs":"Errors that can occour while reading the options of a TCP header.\n","sig":null,"attributes":[{"value":"/Errors that can occour while reading the options of a TCP header.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":129735,"byte_end":129803,"line_start":886,"line_end":886,"column_start":1,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1651},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":130915,"byte_end":130929,"line_start":909,"line_end":909,"column_start":5,"column_end":19},"name":"NotEnoughSpace","qualname":"::transport::tcp::TcpOptionWriteError::NotEnoughSpace","value":"TcpOptionWriteError::NotEnoughSpace(usize)","parent":{"krate":0,"index":1650},"children":[],"decl_id":null,"docs":"There is not enough memory to store all options in the options section of the header (maximum 40 bytes).","sig":null,"attributes":[{"value":"/There is not enough memory to store all options in the options section of the header (maximum 40 bytes).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":130507,"byte_end":130614,"line_start":904,"line_end":904,"column_start":5,"column_end":112}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":130619,"byte_end":130622,"line_start":905,"line_end":905,"column_start":5,"column_end":8}},{"value":"/The options size is limited by the 4 bit data_offset field in the header which describes","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":130627,"byte_end":130718,"line_start":906,"line_end":906,"column_start":5,"column_end":96}},{"value":"/the total tcp header size in multiple of 4 bytes. This leads to a maximum size for the options","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":130723,"byte_end":130820,"line_start":907,"line_end":907,"column_start":5,"column_end":102}},{"value":"/part of the header of 4*(15 - 5) (minus 5 for the size of the tcp header itself). ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":130825,"byte_end":130910,"line_start":908,"line_end":908,"column_start":5,"column_end":90}}]},{"kind":"Enum","id":{"krate":0,"index":1650},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":130481,"byte_end":130500,"line_start":903,"line_end":903,"column_start":10,"column_end":29},"name":"TcpOptionWriteError","qualname":"::transport::tcp::TcpOptionWriteError","value":"pub enum TcpOptionWriteError { NotEnoughSpace(usize), }","parent":null,"children":[{"krate":0,"index":1651}],"decl_id":null,"docs":"Errors that can occour when setting the options of a tcp header.\n","sig":null,"attributes":[{"value":"/Errors that can occour when setting the options of a tcp header.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":130365,"byte_end":130432,"line_start":901,"line_end":901,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":515},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":131008,"byte_end":131026,"line_start":913,"line_end":913,"column_start":12,"column_end":30},"name":"TcpOptionsIterator","qualname":"::transport::tcp::TcpOptionsIterator","value":"TcpOptionsIterator {  }","parent":null,"children":[{"krate":0,"index":517}],"decl_id":null,"docs":"Allows iterating over the options after a TCP header.\n","sig":null,"attributes":[{"value":"/Allows iterating over the options after a TCP header.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":130940,"byte_end":130996,"line_start":912,"line_end":912,"column_start":1,"column_end":57}}]},{"kind":"Const","id":{"krate":0,"index":518},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":131068,"byte_end":131085,"line_start":917,"line_end":917,"column_start":11,"column_end":28},"name":"TCP_OPTION_ID_END","qualname":"::transport::tcp::TCP_OPTION_ID_END","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":519},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":131105,"byte_end":131122,"line_start":918,"line_end":918,"column_start":11,"column_end":28},"name":"TCP_OPTION_ID_NOP","qualname":"::transport::tcp::TCP_OPTION_ID_NOP","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":520},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":131142,"byte_end":131176,"line_start":919,"line_end":919,"column_start":11,"column_end":45},"name":"TCP_OPTION_ID_MAXIMUM_SEGMENT_SIZE","qualname":"::transport::tcp::TCP_OPTION_ID_MAXIMUM_SEGMENT_SIZE","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":521},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":131196,"byte_end":131222,"line_start":920,"line_end":920,"column_start":11,"column_end":37},"name":"TCP_OPTION_ID_WINDOW_SCALE","qualname":"::transport::tcp::TCP_OPTION_ID_WINDOW_SCALE","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":522},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":131242,"byte_end":131279,"line_start":921,"line_end":921,"column_start":11,"column_end":48},"name":"TCP_OPTION_ID_SELECTIVE_ACK_PERMITTED","qualname":"::transport::tcp::TCP_OPTION_ID_SELECTIVE_ACK_PERMITTED","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":523},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":131299,"byte_end":131326,"line_start":922,"line_end":922,"column_start":11,"column_end":38},"name":"TCP_OPTION_ID_SELECTIVE_ACK","qualname":"::transport::tcp::TCP_OPTION_ID_SELECTIVE_ACK","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":524},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":131346,"byte_end":131369,"line_start":923,"line_end":923,"column_start":11,"column_end":34},"name":"TCP_OPTION_ID_TIMESTAMP","qualname":"::transport::tcp::TCP_OPTION_ID_TIMESTAMP","value":"u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":131505,"byte_end":131515,"line_start":927,"line_end":927,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<TcpOptionsIterator>::from_slice","value":"pub fn from_slice(&'a [u8]) -> TcpOptionsIterator","parent":null,"children":[],"decl_id":null,"docs":"Creates an options iterator from a slice containing encoded tcp options.\n","sig":null,"attributes":[{"value":"/Creates an options iterator from a slice containing encoded tcp options.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":131418,"byte_end":131493,"line_start":926,"line_end":926,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":131679,"byte_end":131683,"line_start":932,"line_end":932,"column_start":12,"column_end":16},"name":"rest","qualname":"<TcpOptionsIterator>::rest","value":"pub fn rest(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":"Returns the non processed part of the options slice.\n","sig":null,"attributes":[{"value":"/Returns the non processed part of the options slice.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":131612,"byte_end":131667,"line_start":931,"line_end":931,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1666},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/mod.rs","byte_start":81621,"byte_end":81624,"line_start":11,"line_end":11,"column_start":5,"column_end":8},"name":"Udp","qualname":"::transport::TransportHeader::Udp","value":"TransportHeader::Udp(udp::UdpHeader)","parent":{"krate":0,"index":1665},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1669},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/mod.rs","byte_start":81646,"byte_end":81649,"line_start":12,"line_end":12,"column_start":5,"column_end":8},"name":"Tcp","qualname":"::transport::TransportHeader::Tcp","value":"TransportHeader::Tcp(tcp::TcpHeader)","parent":{"krate":0,"index":1665},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1665},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/mod.rs","byte_start":81599,"byte_end":81614,"line_start":10,"line_end":10,"column_start":10,"column_end":25},"name":"TransportHeader","qualname":"::transport::TransportHeader","value":"pub enum TransportHeader { Udp(udp::UdpHeader), Tcp(tcp::TcpHeader), }","parent":null,"children":[{"krate":0,"index":1666},{"krate":0,"index":1669}],"decl_id":null,"docs":"The possible headers on the transport layer\n","sig":null,"attributes":[{"value":"/The possible headers on the transport layer","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/mod.rs","byte_start":81504,"byte_end":81550,"line_start":8,"line_end":8,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":543},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/mod.rs","byte_start":81821,"byte_end":81824,"line_start":19,"line_end":19,"column_start":12,"column_end":15},"name":"udp","qualname":"<TransportHeader>::udp","value":"pub fn udp(Self) -> Option<udp::UdpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Returns Result::Some containing the udp header if self has the value Udp. \nOtherwise None is returned.\n","sig":null,"attributes":[{"value":"/Returns Result::Some containing the udp header if self has the value Udp. ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/mod.rs","byte_start":81697,"byte_end":81774,"line_start":17,"line_end":17,"column_start":5,"column_end":82}},{"value":"/Otherwise None is returned.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/mod.rs","byte_start":81779,"byte_end":81809,"line_start":18,"line_end":18,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":545},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/mod.rs","byte_start":82130,"byte_end":82137,"line_start":29,"line_end":29,"column_start":12,"column_end":19},"name":"mut_udp","qualname":"<TransportHeader>::mut_udp","value":"pub fn mut_udp(&mut Self) -> Option<&mut udp::UdpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Returns Result::Some containing the udp header if self has the value Udp. \nOtherwise None is returned.\n","sig":null,"attributes":[{"value":"/Returns Result::Some containing the udp header if self has the value Udp. ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/mod.rs","byte_start":82006,"byte_end":82083,"line_start":27,"line_end":27,"column_start":5,"column_end":82}},{"value":"/Otherwise None is returned.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/mod.rs","byte_start":82088,"byte_end":82118,"line_start":28,"line_end":28,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":547},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/mod.rs","byte_start":82461,"byte_end":82464,"line_start":39,"line_end":39,"column_start":12,"column_end":15},"name":"tcp","qualname":"<TransportHeader>::tcp","value":"pub fn tcp(Self) -> Option<tcp::TcpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Returns Result::Some containing the tcp header if self has the value Tcp. \nOtherwise None is returned.\n","sig":null,"attributes":[{"value":"/Returns Result::Some containing the tcp header if self has the value Tcp. ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/mod.rs","byte_start":82337,"byte_end":82414,"line_start":37,"line_end":37,"column_start":5,"column_end":82}},{"value":"/Otherwise None is returned.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/mod.rs","byte_start":82419,"byte_end":82449,"line_start":38,"line_end":38,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/mod.rs","byte_start":82792,"byte_end":82799,"line_start":49,"line_end":49,"column_start":12,"column_end":19},"name":"mut_tcp","qualname":"<TransportHeader>::mut_tcp","value":"pub fn mut_tcp(&mut Self) -> Option<&mut tcp::TcpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Returns Result::Some containing a mutable refernce to the tcp header if self has the value Tcp. \nOtherwise None is returned.\n","sig":null,"attributes":[{"value":"/Returns Result::Some containing a mutable refernce to the tcp header if self has the value Tcp. ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/mod.rs","byte_start":82646,"byte_end":82745,"line_start":47,"line_end":47,"column_start":5,"column_end":104}},{"value":"/Otherwise None is returned.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/mod.rs","byte_start":82750,"byte_end":82780,"line_start":48,"line_end":48,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":551},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/mod.rs","byte_start":83127,"byte_end":83137,"line_start":59,"line_end":59,"column_start":12,"column_end":22},"name":"header_len","qualname":"<TransportHeader>::header_len","value":"pub fn header_len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"Returns the size of the transport header (in case of UDP fixed, \nin case of TCP cotanining the options).dd\n","sig":null,"attributes":[{"value":"/Returns the size of the transport header (in case of UDP fixed, ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/mod.rs","byte_start":82999,"byte_end":83066,"line_start":57,"line_end":57,"column_start":5,"column_end":72}},{"value":"/in case of TCP cotanining the options).dd","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/mod.rs","byte_start":83071,"byte_end":83115,"line_start":58,"line_end":58,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":553},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/mod.rs","byte_start":83464,"byte_end":83484,"line_start":69,"line_end":69,"column_start":12,"column_end":32},"name":"update_checksum_ipv4","qualname":"<TransportHeader>::update_checksum_ipv4","value":"pub fn update_checksum_ipv4(&mut Self, &Ipv4Header, &[u8])\n-> Result<(), ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Calculates the checksum for the transport header & sets it in the header for\nan ipv4 header.\n","sig":null,"attributes":[{"value":"/Calculates the checksum for the transport header & sets it in the header for","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/mod.rs","byte_start":83350,"byte_end":83429,"line_start":67,"line_end":67,"column_start":5,"column_end":84}},{"value":"/an ipv4 header.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/mod.rs","byte_start":83434,"byte_end":83452,"line_start":68,"line_end":68,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":555},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/mod.rs","byte_start":84025,"byte_end":84045,"line_start":84,"line_end":84,"column_start":12,"column_end":32},"name":"update_checksum_ipv6","qualname":"<TransportHeader>::update_checksum_ipv6","value":"pub fn update_checksum_ipv6(&mut Self, &Ipv6Header, &[u8])\n-> Result<(), ValueError>","parent":null,"children":[],"decl_id":null,"docs":"Calculates the checksum for the transport header & sets it in the header for\nan ipv6 header.\n","sig":null,"attributes":[{"value":"/Calculates the checksum for the transport header & sets it in the header for","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/mod.rs","byte_start":83911,"byte_end":83990,"line_start":82,"line_end":82,"column_start":5,"column_end":84}},{"value":"/an ipv6 header.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/mod.rs","byte_start":83995,"byte_end":84013,"line_start":83,"line_end":83,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":557},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/mod.rs","byte_start":84534,"byte_end":84539,"line_start":98,"line_end":98,"column_start":12,"column_end":17},"name":"write","qualname":"<TransportHeader>::write","value":"pub fn write<T: io::Write + Sized>(&Self, &mut T) -> Result<(), WriteError>","parent":null,"children":[],"decl_id":null,"docs":"Write the transport header to the given writer.\n","sig":null,"attributes":[{"value":"/Write the transport header to the given writer.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/mod.rs","byte_start":84472,"byte_end":84522,"line_start":97,"line_end":97,"column_start":5,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":575},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":138777,"byte_end":138790,"line_start":41,"line_end":41,"column_start":12,"column_end":25},"name":"PacketBuilder","qualname":"::packet_builder::PacketBuilder","value":"PacketBuilder {  }","parent":null,"children":[],"decl_id":null,"docs":" Helper for building packets.","sig":null,"attributes":[{"value":"/ Helper for building packets.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":137534,"byte_end":137566,"line_start":6,"line_end":6,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":137567,"byte_end":137570,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ The packet builder allows the easy construction of a packet from the ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":137571,"byte_end":137644,"line_start":8,"line_end":8,"column_start":1,"column_end":74}},{"value":"/ ethernet II layer downwards including ipv6, ipv4, the udp header and the ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":137645,"byte_end":137722,"line_start":9,"line_end":9,"column_start":1,"column_end":78}},{"value":"/ actual payload. The packet builder automatically calculates lengths & checksums ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":137723,"byte_end":137807,"line_start":10,"line_end":10,"column_start":1,"column_end":85}},{"value":"/ for ip & udp and set type identifiers for ethernetII and ip. This makes it ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":137808,"byte_end":137887,"line_start":11,"line_end":11,"column_start":1,"column_end":80}},{"value":"/ easy and less error prone to construct custom packets.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":137888,"byte_end":137946,"line_start":12,"line_end":12,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":137947,"byte_end":137950,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # Example:","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":137951,"byte_end":137965,"line_start":14,"line_end":14,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":137966,"byte_end":137969,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Generating a packet that starts with an Ethernet II header:","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":137970,"byte_end":138033,"line_start":16,"line_end":16,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":138034,"byte_end":138037,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":138038,"byte_end":138045,"line_start":18,"line_end":18,"column_start":1,"column_end":8}},{"value":"/ use etherparse::PacketBuilder;","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":138046,"byte_end":138080,"line_start":19,"line_end":19,"column_start":1,"column_end":35}},{"value":"/ ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":138081,"byte_end":138085,"line_start":20,"line_end":20,"column_start":1,"column_end":5}},{"value":"/ let builder = PacketBuilder::","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":138086,"byte_end":138119,"line_start":21,"line_end":21,"column_start":1,"column_end":34}},{"value":"/     ethernet2([1,2,3,4,5,6],     //source mac","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":138120,"byte_end":138169,"line_start":22,"line_end":22,"column_start":1,"column_end":50}},{"value":"/               [7,8,9,10,11,12]) //destionation mac","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":138170,"byte_end":138224,"line_start":23,"line_end":23,"column_start":1,"column_end":55}},{"value":"/    .ipv4([192,168,1,1], //source ip","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":138225,"byte_end":138264,"line_start":24,"line_end":24,"column_start":1,"column_end":40}},{"value":"/          [192,168,1,2], //desitionation ip","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":138265,"byte_end":138311,"line_start":25,"line_end":25,"column_start":1,"column_end":47}},{"value":"/          20)            //time to life","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":138312,"byte_end":138354,"line_start":26,"line_end":26,"column_start":1,"column_end":43}},{"value":"/    .udp(21,    //source port ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":138355,"byte_end":138388,"line_start":27,"line_end":27,"column_start":1,"column_end":34}},{"value":"/         1234); //desitnation port","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":138389,"byte_end":138426,"line_start":28,"line_end":28,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":138427,"byte_end":138430,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ //payload of the udp packet","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":138431,"byte_end":138462,"line_start":30,"line_end":30,"column_start":1,"column_end":32}},{"value":"/ let payload = [1,2,3,4,5,6,7,8];","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":138463,"byte_end":138499,"line_start":31,"line_end":31,"column_start":1,"column_end":37}},{"value":"/     ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":138500,"byte_end":138508,"line_start":32,"line_end":32,"column_start":1,"column_end":9}},{"value":"/ //get some memory to store the result","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":138509,"byte_end":138550,"line_start":33,"line_end":33,"column_start":1,"column_end":42}},{"value":"/ let mut result = Vec::<u8>::with_capacity(","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":138551,"byte_end":138597,"line_start":34,"line_end":34,"column_start":1,"column_end":47}},{"value":"/                     builder.size(payload.len()));","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":138598,"byte_end":138651,"line_start":35,"line_end":35,"column_start":1,"column_end":54}},{"value":"/     ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":138652,"byte_end":138660,"line_start":36,"line_end":36,"column_start":1,"column_end":9}},{"value":"/ //serialize","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":138661,"byte_end":138676,"line_start":37,"line_end":37,"column_start":1,"column_end":16}},{"value":"/ builder.write(&mut result, &payload).unwrap();","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":138677,"byte_end":138727,"line_start":38,"line_end":38,"column_start":1,"column_end":51}},{"value":"/ println!(\"{:?}\", result);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":138728,"byte_end":138757,"line_start":39,"line_end":39,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":138758,"byte_end":138765,"line_start":40,"line_end":40,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":577},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":139731,"byte_end":139740,"line_start":72,"line_end":72,"column_start":12,"column_end":21},"name":"ethernet2","qualname":"<PacketBuilder>::ethernet2","value":"pub fn ethernet2([u8; ], [u8; ]) -> PacketBuilderStep<Ethernet2Header>","parent":null,"children":[],"decl_id":null,"docs":" Start an packet with an ethernetII header.","sig":null,"attributes":[{"value":"/ Start an packet with an ethernetII header.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":138820,"byte_end":138866,"line_start":44,"line_end":44,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":138871,"byte_end":138874,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":138879,"byte_end":138892,"line_start":46,"line_end":46,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":138897,"byte_end":138900,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ Basic usage: ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":138905,"byte_end":138922,"line_start":48,"line_end":48,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":138927,"byte_end":138930,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":138935,"byte_end":138942,"line_start":50,"line_end":50,"column_start":5,"column_end":12}},{"value":"/ # use etherparse::PacketBuilder;","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":138947,"byte_end":138983,"line_start":51,"line_end":51,"column_start":5,"column_end":41}},{"value":"/ #","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":138988,"byte_end":138993,"line_start":52,"line_end":52,"column_start":5,"column_end":10}},{"value":"/ let builder = PacketBuilder::","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":138998,"byte_end":139031,"line_start":53,"line_end":53,"column_start":5,"column_end":38}},{"value":"/     ethernet2([1,2,3,4,5,6],     //source mac","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":139036,"byte_end":139085,"line_start":54,"line_end":54,"column_start":5,"column_end":54}},{"value":"/               [7,8,9,10,11,12]) //destionation mac","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":139090,"byte_end":139144,"line_start":55,"line_end":55,"column_start":5,"column_end":59}},{"value":"/    .ipv4([192,168,1,1], //source ip","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":139149,"byte_end":139188,"line_start":56,"line_end":56,"column_start":5,"column_end":44}},{"value":"/          [192,168,1,2], //desitionation ip","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":139193,"byte_end":139239,"line_start":57,"line_end":57,"column_start":5,"column_end":51}},{"value":"/          20)            //time to life","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":139244,"byte_end":139286,"line_start":58,"line_end":58,"column_start":5,"column_end":47}},{"value":"/    .udp(21,    //source port ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":139291,"byte_end":139324,"line_start":59,"line_end":59,"column_start":5,"column_end":38}},{"value":"/         1234); //desitnation port","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":139329,"byte_end":139366,"line_start":60,"line_end":60,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":139371,"byte_end":139374,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ //payload of the udp packet","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":139379,"byte_end":139410,"line_start":62,"line_end":62,"column_start":5,"column_end":36}},{"value":"/ let payload = [1,2,3,4,5,6,7,8];","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":139415,"byte_end":139451,"line_start":63,"line_end":63,"column_start":5,"column_end":41}},{"value":"/     ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":139456,"byte_end":139464,"line_start":64,"line_end":64,"column_start":5,"column_end":13}},{"value":"/ //get some memory to store the result","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":139469,"byte_end":139510,"line_start":65,"line_end":65,"column_start":5,"column_end":46}},{"value":"/ let mut result = Vec::<u8>::with_capacity(","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":139515,"byte_end":139561,"line_start":66,"line_end":66,"column_start":5,"column_end":51}},{"value":"/                     builder.size(payload.len()));","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":139566,"byte_end":139619,"line_start":67,"line_end":67,"column_start":5,"column_end":58}},{"value":"/     ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":139624,"byte_end":139632,"line_start":68,"line_end":68,"column_start":5,"column_end":13}},{"value":"/ //serialize","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":139637,"byte_end":139652,"line_start":69,"line_end":69,"column_start":5,"column_end":20}},{"value":"/ builder.write(&mut result, &payload).unwrap();","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":139657,"byte_end":139707,"line_start":70,"line_end":70,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":139712,"byte_end":139719,"line_start":71,"line_end":71,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":141068,"byte_end":141072,"line_start":114,"line_end":114,"column_start":12,"column_end":16},"name":"ipv4","qualname":"<PacketBuilder>::ipv4","value":"pub fn ipv4([u8; ], [u8; ], u8) -> PacketBuilderStep<IpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Starts a packet with an IPv4 header.","sig":null,"attributes":[{"value":"/Starts a packet with an IPv4 header.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":140277,"byte_end":140316,"line_start":88,"line_end":88,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":140321,"byte_end":140324,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":140329,"byte_end":140342,"line_start":90,"line_end":90,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":140347,"byte_end":140350,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ Basic usage: ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":140355,"byte_end":140372,"line_start":92,"line_end":92,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":140377,"byte_end":140380,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":140385,"byte_end":140392,"line_start":94,"line_end":94,"column_start":5,"column_end":12}},{"value":"/ # use etherparse::PacketBuilder;","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":140397,"byte_end":140433,"line_start":95,"line_end":95,"column_start":5,"column_end":41}},{"value":"/ #","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":140438,"byte_end":140443,"line_start":96,"line_end":96,"column_start":5,"column_end":10}},{"value":"/ let builder = PacketBuilder::","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":140448,"byte_end":140481,"line_start":97,"line_end":97,"column_start":5,"column_end":38}},{"value":"/    ipv4([192,168,1,1],  //source ip","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":140486,"byte_end":140525,"line_start":98,"line_end":98,"column_start":5,"column_end":44}},{"value":"/          [192,168,1,2], //desitionation ip","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":140530,"byte_end":140576,"line_start":99,"line_end":99,"column_start":5,"column_end":51}},{"value":"/          20)            //time to life","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":140581,"byte_end":140623,"line_start":100,"line_end":100,"column_start":5,"column_end":47}},{"value":"/    .udp(21,    //source port ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":140628,"byte_end":140661,"line_start":101,"line_end":101,"column_start":5,"column_end":38}},{"value":"/         1234); //desitnation port","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":140666,"byte_end":140703,"line_start":102,"line_end":102,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":140708,"byte_end":140711,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ //payload of the udp packet","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":140716,"byte_end":140747,"line_start":104,"line_end":104,"column_start":5,"column_end":36}},{"value":"/ let payload = [1,2,3,4,5,6,7,8];","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":140752,"byte_end":140788,"line_start":105,"line_end":105,"column_start":5,"column_end":41}},{"value":"/     ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":140793,"byte_end":140801,"line_start":106,"line_end":106,"column_start":5,"column_end":13}},{"value":"/ //get some memory to store the result","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":140806,"byte_end":140847,"line_start":107,"line_end":107,"column_start":5,"column_end":46}},{"value":"/ let mut result = Vec::<u8>::with_capacity(","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":140852,"byte_end":140898,"line_start":108,"line_end":108,"column_start":5,"column_end":51}},{"value":"/                     builder.size(payload.len()));","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":140903,"byte_end":140956,"line_start":109,"line_end":109,"column_start":5,"column_end":58}},{"value":"/     ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":140961,"byte_end":140969,"line_start":110,"line_end":110,"column_start":5,"column_end":13}},{"value":"/ //serialize","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":140974,"byte_end":140989,"line_start":111,"line_end":111,"column_start":5,"column_end":20}},{"value":"/ builder.write(&mut result, &payload).unwrap();","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":140994,"byte_end":141044,"line_start":112,"line_end":112,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":141049,"byte_end":141056,"line_start":113,"line_end":113,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":583},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":142409,"byte_end":142413,"line_start":156,"line_end":156,"column_start":12,"column_end":16},"name":"ipv6","qualname":"<PacketBuilder>::ipv6","value":"pub fn ipv6([u8; ], [u8; ], u8) -> PacketBuilderStep<IpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Start a packet with an IPv6 header.","sig":null,"attributes":[{"value":"/Start a packet with an IPv6 header.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":141506,"byte_end":141544,"line_start":126,"line_end":126,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":141549,"byte_end":141552,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":141557,"byte_end":141570,"line_start":128,"line_end":128,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":141575,"byte_end":141578,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ Basic usage: ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":141583,"byte_end":141600,"line_start":130,"line_end":130,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":141605,"byte_end":141608,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":141613,"byte_end":141620,"line_start":132,"line_end":132,"column_start":5,"column_end":12}},{"value":"/ # use etherparse::PacketBuilder;","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":141625,"byte_end":141661,"line_start":133,"line_end":133,"column_start":5,"column_end":41}},{"value":"/ #","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":141666,"byte_end":141671,"line_start":134,"line_end":134,"column_start":5,"column_end":10}},{"value":"/ let builder = PacketBuilder::","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":141676,"byte_end":141709,"line_start":135,"line_end":135,"column_start":5,"column_end":38}},{"value":"/     ipv6(","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":141714,"byte_end":141727,"line_start":136,"line_end":136,"column_start":5,"column_end":18}},{"value":"/         //source","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":141732,"byte_end":141752,"line_start":137,"line_end":137,"column_start":5,"column_end":25}},{"value":"/         [11,12,13,14,15,16,17,18,19,10,21,22,23,24,25,26],","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":141757,"byte_end":141819,"line_start":138,"line_end":138,"column_start":5,"column_end":67}},{"value":"/         //destination","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":141824,"byte_end":141849,"line_start":139,"line_end":139,"column_start":5,"column_end":30}},{"value":"/         [31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46],","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":141854,"byte_end":141916,"line_start":140,"line_end":140,"column_start":5,"column_end":67}},{"value":"/         //hop_limit","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":141921,"byte_end":141944,"line_start":141,"line_end":141,"column_start":5,"column_end":28}},{"value":"/         47)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":141949,"byte_end":141964,"line_start":142,"line_end":142,"column_start":5,"column_end":20}},{"value":"/    .udp(21,    //source port ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":141969,"byte_end":142002,"line_start":143,"line_end":143,"column_start":5,"column_end":38}},{"value":"/         1234); //desitnation port","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":142007,"byte_end":142044,"line_start":144,"line_end":144,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":142049,"byte_end":142052,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ //payload of the udp packet","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":142057,"byte_end":142088,"line_start":146,"line_end":146,"column_start":5,"column_end":36}},{"value":"/ let payload = [1,2,3,4,5,6,7,8];","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":142093,"byte_end":142129,"line_start":147,"line_end":147,"column_start":5,"column_end":41}},{"value":"/     ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":142134,"byte_end":142142,"line_start":148,"line_end":148,"column_start":5,"column_end":13}},{"value":"/ //get some memory to store the result","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":142147,"byte_end":142188,"line_start":149,"line_end":149,"column_start":5,"column_end":46}},{"value":"/ let mut result = Vec::<u8>::with_capacity(","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":142193,"byte_end":142239,"line_start":150,"line_end":150,"column_start":5,"column_end":51}},{"value":"/                     builder.size(payload.len()));","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":142244,"byte_end":142297,"line_start":151,"line_end":151,"column_start":5,"column_end":58}},{"value":"/     ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":142302,"byte_end":142310,"line_start":152,"line_end":152,"column_start":5,"column_end":13}},{"value":"/ //serialize","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":142315,"byte_end":142330,"line_start":153,"line_end":153,"column_start":5,"column_end":20}},{"value":"/ builder.write(&mut result, &payload).unwrap();","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":142335,"byte_end":142385,"line_start":154,"line_end":154,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":142390,"byte_end":142397,"line_start":155,"line_end":155,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":144899,"byte_end":144901,"line_start":228,"line_end":228,"column_start":12,"column_end":14},"name":"ip","qualname":"<PacketBuilder>::ip","value":"pub fn ip(IpHeader) -> PacketBuilderStep<IpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Starts a packet with an arbitrary ip header (length, protocol/next_header & checksum fields will be overwritten based on the rest of the packet).","sig":null,"attributes":[{"value":"/Starts a packet with an arbitrary ip header (length, protocol/next_header & checksum fields will be overwritten based on the rest of the packet).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":142843,"byte_end":142991,"line_start":168,"line_end":168,"column_start":5,"column_end":153}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":142996,"byte_end":142999,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":143004,"byte_end":143018,"line_start":170,"line_end":170,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":143023,"byte_end":143026,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ With an IPv4 header:","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":143031,"byte_end":143055,"line_start":172,"line_end":172,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":143060,"byte_end":143063,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":143068,"byte_end":143075,"line_start":174,"line_end":174,"column_start":5,"column_end":12}},{"value":"/ # use etherparse::*;","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":143080,"byte_end":143104,"line_start":175,"line_end":175,"column_start":5,"column_end":29}},{"value":"/ #","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":143109,"byte_end":143114,"line_start":176,"line_end":176,"column_start":5,"column_end":10}},{"value":"/ let builder = PacketBuilder::","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":143119,"byte_end":143152,"line_start":177,"line_end":177,"column_start":5,"column_end":38}},{"value":"/    //payload_len, protocol & checksum will be replaced during write","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":143157,"byte_end":143228,"line_start":178,"line_end":178,"column_start":5,"column_end":76}},{"value":"/    ip(IpHeader::Version4(Ipv4Header::new(","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":143233,"byte_end":143278,"line_start":179,"line_end":179,"column_start":5,"column_end":50}},{"value":"/        0, //payload_len will be replaced during write","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":143283,"byte_end":143340,"line_start":180,"line_end":180,"column_start":5,"column_end":62}},{"value":"/        12, //time_to_live","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":143345,"byte_end":143374,"line_start":181,"line_end":181,"column_start":5,"column_end":34}},{"value":"/        IpTrafficClass::Udp, //will be replaced during write","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":143379,"byte_end":143442,"line_start":182,"line_end":182,"column_start":5,"column_end":68}},{"value":"/        [0,1,2,3], //source","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":143447,"byte_end":143477,"line_start":183,"line_end":183,"column_start":5,"column_end":35}},{"value":"/        [4,5,6,7] //destination","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":143482,"byte_end":143516,"line_start":184,"line_end":184,"column_start":5,"column_end":39}},{"value":"/     )))","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":143521,"byte_end":143532,"line_start":185,"line_end":185,"column_start":5,"column_end":16}},{"value":"/    .udp(21,    //source port ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":143537,"byte_end":143570,"line_start":186,"line_end":186,"column_start":5,"column_end":38}},{"value":"/         1234); //desitnation port","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":143575,"byte_end":143612,"line_start":187,"line_end":187,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":143617,"byte_end":143620,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ //payload of the udp packet","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":143625,"byte_end":143656,"line_start":189,"line_end":189,"column_start":5,"column_end":36}},{"value":"/ let payload = [1,2,3,4,5,6,7,8];","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":143661,"byte_end":143697,"line_start":190,"line_end":190,"column_start":5,"column_end":41}},{"value":"/     ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":143702,"byte_end":143710,"line_start":191,"line_end":191,"column_start":5,"column_end":13}},{"value":"/ //get some memory to store the result","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":143715,"byte_end":143756,"line_start":192,"line_end":192,"column_start":5,"column_end":46}},{"value":"/ let mut result = Vec::<u8>::with_capacity(","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":143761,"byte_end":143807,"line_start":193,"line_end":193,"column_start":5,"column_end":51}},{"value":"/                     builder.size(payload.len()));","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":143812,"byte_end":143865,"line_start":194,"line_end":194,"column_start":5,"column_end":58}},{"value":"/     ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":143870,"byte_end":143878,"line_start":195,"line_end":195,"column_start":5,"column_end":13}},{"value":"/ //serialize","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":143883,"byte_end":143898,"line_start":196,"line_end":196,"column_start":5,"column_end":20}},{"value":"/ builder.write(&mut result, &payload).unwrap();","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":143903,"byte_end":143953,"line_start":197,"line_end":197,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":143958,"byte_end":143965,"line_start":198,"line_end":198,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":143970,"byte_end":143973,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ With an IPv6 header:","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":143978,"byte_end":144002,"line_start":200,"line_end":200,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":144007,"byte_end":144010,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":144015,"byte_end":144022,"line_start":202,"line_end":202,"column_start":5,"column_end":12}},{"value":"/ # use etherparse::*;","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":144027,"byte_end":144051,"line_start":203,"line_end":203,"column_start":5,"column_end":29}},{"value":"/ #","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":144056,"byte_end":144061,"line_start":204,"line_end":204,"column_start":5,"column_end":10}},{"value":"/ let builder = PacketBuilder::","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":144066,"byte_end":144099,"line_start":205,"line_end":205,"column_start":5,"column_end":38}},{"value":"/    ip(IpHeader::Version6(Ipv6Header{","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":144104,"byte_end":144144,"line_start":206,"line_end":206,"column_start":5,"column_end":45}},{"value":"/         traffic_class: 0,","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":144149,"byte_end":144178,"line_start":207,"line_end":207,"column_start":5,"column_end":34}},{"value":"/         flow_label: 0,","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":144183,"byte_end":144209,"line_start":208,"line_end":208,"column_start":5,"column_end":31}},{"value":"/         payload_length: 0, //will be replaced during write","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":144214,"byte_end":144276,"line_start":209,"line_end":209,"column_start":5,"column_end":67}},{"value":"/         next_header: 0, //will be replaced during write","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":144281,"byte_end":144340,"line_start":210,"line_end":210,"column_start":5,"column_end":64}},{"value":"/         hop_limit: 4,","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":144345,"byte_end":144370,"line_start":211,"line_end":211,"column_start":5,"column_end":30}},{"value":"/         source: [0;16],","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":144375,"byte_end":144402,"line_start":212,"line_end":212,"column_start":5,"column_end":32}},{"value":"/         destination: [0;16]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":144407,"byte_end":144438,"line_start":213,"line_end":213,"column_start":5,"column_end":36}},{"value":"/     }))","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":144443,"byte_end":144454,"line_start":214,"line_end":214,"column_start":5,"column_end":16}},{"value":"/    .udp(21,    //source port ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":144459,"byte_end":144492,"line_start":215,"line_end":215,"column_start":5,"column_end":38}},{"value":"/         1234); //desitnation port","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":144497,"byte_end":144534,"line_start":216,"line_end":216,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":144539,"byte_end":144542,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ //payload of the udp packet","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":144547,"byte_end":144578,"line_start":218,"line_end":218,"column_start":5,"column_end":36}},{"value":"/ let payload = [1,2,3,4,5,6,7,8];","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":144583,"byte_end":144619,"line_start":219,"line_end":219,"column_start":5,"column_end":41}},{"value":"/     ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":144624,"byte_end":144632,"line_start":220,"line_end":220,"column_start":5,"column_end":13}},{"value":"/ //get some memory to store the result","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":144637,"byte_end":144678,"line_start":221,"line_end":221,"column_start":5,"column_end":46}},{"value":"/ let mut result = Vec::<u8>::with_capacity(","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":144683,"byte_end":144729,"line_start":222,"line_end":222,"column_start":5,"column_end":51}},{"value":"/                     builder.size(payload.len()));","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":144734,"byte_end":144787,"line_start":223,"line_end":223,"column_start":5,"column_end":58}},{"value":"/     ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":144792,"byte_end":144800,"line_start":224,"line_end":224,"column_start":5,"column_end":13}},{"value":"/ //serialize","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":144805,"byte_end":144820,"line_start":225,"line_end":225,"column_start":5,"column_end":20}},{"value":"/ builder.write(&mut result, &payload).unwrap();","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":144825,"byte_end":144875,"line_start":226,"line_end":226,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":144880,"byte_end":144887,"line_start":227,"line_end":227,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":592},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":145532,"byte_end":145549,"line_start":249,"line_end":249,"column_start":12,"column_end":29},"name":"PacketBuilderStep","qualname":"::packet_builder::PacketBuilderStep","value":"PacketBuilderStep {  }","parent":null,"children":[{"krate":0,"index":594},{"krate":0,"index":595}],"decl_id":null,"docs":"An unfinished packet that is build with the packet builder\n","sig":null,"attributes":[{"value":"/An unfinished packet that is build with the packet builder","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":145459,"byte_end":145520,"line_start":248,"line_end":248,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":597},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":145711,"byte_end":145715,"line_start":256,"line_end":256,"column_start":12,"column_end":16},"name":"ipv4","qualname":"<PacketBuilderStep<Ethernet2Header>>::ipv4","value":"pub fn ipv4(Self, [u8; ], [u8; ], u8) -> PacketBuilderStep<IpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Add an ip v4 header\n","sig":null,"attributes":[{"value":"/Add an ip v4 header","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":145677,"byte_end":145699,"line_start":255,"line_end":255,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":147624,"byte_end":147626,"line_start":312,"line_end":312,"column_start":12,"column_end":14},"name":"ip","qualname":"<PacketBuilderStep<Ethernet2Header>>::ip","value":"pub fn ip(Self, IpHeader) -> PacketBuilderStep<IpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Add an ip header (length, protocol/next_header & checksum fields will be overwritten based on the rest of the packet).","sig":null,"attributes":[{"value":"/Add an ip header (length, protocol/next_header & checksum fields will be overwritten based on the rest of the packet).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":146279,"byte_end":146400,"line_start":272,"line_end":272,"column_start":5,"column_end":126}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":146405,"byte_end":146408,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":146413,"byte_end":146427,"line_start":274,"line_end":274,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":146432,"byte_end":146435,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ With an IPv4 header:","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":146440,"byte_end":146464,"line_start":276,"line_end":276,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":146469,"byte_end":146472,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":146477,"byte_end":146484,"line_start":278,"line_end":278,"column_start":5,"column_end":12}},{"value":"/ # use etherparse::*;","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":146489,"byte_end":146513,"line_start":279,"line_end":279,"column_start":5,"column_end":29}},{"value":"/ #","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":146518,"byte_end":146523,"line_start":280,"line_end":280,"column_start":5,"column_end":10}},{"value":"/ let builder = PacketBuilder::","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":146528,"byte_end":146561,"line_start":281,"line_end":281,"column_start":5,"column_end":38}},{"value":"/     ethernet2([1,2,3,4,5,6],","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":146566,"byte_end":146598,"line_start":282,"line_end":282,"column_start":5,"column_end":37}},{"value":"/               [7,8,9,10,11,12])","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":146603,"byte_end":146638,"line_start":283,"line_end":283,"column_start":5,"column_end":40}},{"value":"/    //payload_len, protocol & checksum will be replaced during write","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":146643,"byte_end":146714,"line_start":284,"line_end":284,"column_start":5,"column_end":76}},{"value":"/    .ip(IpHeader::Version4(Ipv4Header::new(","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":146719,"byte_end":146765,"line_start":285,"line_end":285,"column_start":5,"column_end":51}},{"value":"/        0, //payload_len will be replaced during write","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":146770,"byte_end":146827,"line_start":286,"line_end":286,"column_start":5,"column_end":62}},{"value":"/        12, //time_to_live","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":146832,"byte_end":146861,"line_start":287,"line_end":287,"column_start":5,"column_end":34}},{"value":"/        IpTrafficClass::Udp, //will be replaced during write","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":146866,"byte_end":146929,"line_start":288,"line_end":288,"column_start":5,"column_end":68}},{"value":"/        [0,1,2,3], //source","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":146934,"byte_end":146964,"line_start":289,"line_end":289,"column_start":5,"column_end":35}},{"value":"/        [4,5,6,7] //destination","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":146969,"byte_end":147003,"line_start":290,"line_end":290,"column_start":5,"column_end":39}},{"value":"/     )));","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":147008,"byte_end":147020,"line_start":291,"line_end":291,"column_start":5,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":147025,"byte_end":147032,"line_start":292,"line_end":292,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":147037,"byte_end":147040,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ With an IPv6 header:","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":147045,"byte_end":147069,"line_start":294,"line_end":294,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":147074,"byte_end":147077,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":147082,"byte_end":147089,"line_start":296,"line_end":296,"column_start":5,"column_end":12}},{"value":"/ # use etherparse::*;","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":147094,"byte_end":147118,"line_start":297,"line_end":297,"column_start":5,"column_end":29}},{"value":"/ #","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":147123,"byte_end":147128,"line_start":298,"line_end":298,"column_start":5,"column_end":10}},{"value":"/ let builder = PacketBuilder::","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":147133,"byte_end":147166,"line_start":299,"line_end":299,"column_start":5,"column_end":38}},{"value":"/     ethernet2([1,2,3,4,5,6],","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":147171,"byte_end":147203,"line_start":300,"line_end":300,"column_start":5,"column_end":37}},{"value":"/               [7,8,9,10,11,12])","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":147208,"byte_end":147243,"line_start":301,"line_end":301,"column_start":5,"column_end":40}},{"value":"/    .ip(IpHeader::Version6(Ipv6Header{","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":147248,"byte_end":147289,"line_start":302,"line_end":302,"column_start":5,"column_end":46}},{"value":"/         traffic_class: 0,","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":147294,"byte_end":147323,"line_start":303,"line_end":303,"column_start":5,"column_end":34}},{"value":"/         flow_label: 0,","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":147328,"byte_end":147354,"line_start":304,"line_end":304,"column_start":5,"column_end":31}},{"value":"/         payload_length: 0, //will be replaced during write","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":147359,"byte_end":147421,"line_start":305,"line_end":305,"column_start":5,"column_end":67}},{"value":"/         next_header: 0, //will be replaced during write","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":147426,"byte_end":147485,"line_start":306,"line_end":306,"column_start":5,"column_end":64}},{"value":"/         hop_limit: 4,","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":147490,"byte_end":147515,"line_start":307,"line_end":307,"column_start":5,"column_end":30}},{"value":"/         source: [0;16],","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":147520,"byte_end":147547,"line_start":308,"line_end":308,"column_start":5,"column_end":32}},{"value":"/         destination: [0;16]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":147552,"byte_end":147583,"line_start":309,"line_end":309,"column_start":5,"column_end":36}},{"value":"/     }));","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":147588,"byte_end":147600,"line_start":310,"line_end":310,"column_start":5,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":147605,"byte_end":147612,"line_start":311,"line_end":311,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":601},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":147963,"byte_end":147967,"line_start":323,"line_end":323,"column_start":12,"column_end":16},"name":"ipv6","qualname":"<PacketBuilderStep<Ethernet2Header>>::ipv6","value":"pub fn ipv6(Self, [u8; ], [u8; ], u8) -> PacketBuilderStep<IpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Add an ip v6 header\n","sig":null,"attributes":[{"value":"/Add an ip v6 header","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":147929,"byte_end":147951,"line_start":322,"line_end":322,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":604},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":148617,"byte_end":148621,"line_start":342,"line_end":342,"column_start":12,"column_end":16},"name":"vlan","qualname":"<PacketBuilderStep<Ethernet2Header>>::vlan","value":"pub fn vlan(Self, VlanHeader) -> PacketBuilderStep<VlanHeader>","parent":null,"children":[],"decl_id":null,"docs":"Adds a vlan tagging header with the given vlan identifier\n","sig":null,"attributes":[{"value":"/Adds a vlan tagging header with the given vlan identifier","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":148545,"byte_end":148605,"line_start":341,"line_end":341,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":605},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":148970,"byte_end":148981,"line_start":352,"line_end":352,"column_start":12,"column_end":23},"name":"single_vlan","qualname":"<PacketBuilderStep<Ethernet2Header>>::single_vlan","value":"pub fn single_vlan(Self, u16) -> PacketBuilderStep<VlanHeader>","parent":null,"children":[],"decl_id":null,"docs":"Adds a vlan tagging header with the given vlan identifier\n","sig":null,"attributes":[{"value":"/Adds a vlan tagging header with the given vlan identifier","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":148898,"byte_end":148958,"line_start":351,"line_end":351,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":606},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":149595,"byte_end":149606,"line_start":367,"line_end":367,"column_start":12,"column_end":23},"name":"double_vlan","qualname":"<PacketBuilderStep<Ethernet2Header>>::double_vlan","value":"pub fn double_vlan(Self, u16, u16) -> PacketBuilderStep<VlanHeader>","parent":null,"children":[],"decl_id":null,"docs":"Adds two vlan tagging header with the given vlan identifiers (also known as double vlan tagging).\n","sig":null,"attributes":[{"value":"/Adds two vlan tagging header with the given vlan identifiers (also known as double vlan tagging).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":149483,"byte_end":149583,"line_start":366,"line_end":366,"column_start":5,"column_end":105}}]},{"kind":"Method","id":{"krate":0,"index":608},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":151832,"byte_end":151834,"line_start":428,"line_end":428,"column_start":12,"column_end":14},"name":"ip","qualname":"<PacketBuilderStep<VlanHeader>>::ip","value":"pub fn ip(Self, IpHeader) -> PacketBuilderStep<IpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Add an ip header (length, protocol/next_header & checksum fields will be overwritten based on the rest of the packet).","sig":null,"attributes":[{"value":"/Add an ip header (length, protocol/next_header & checksum fields will be overwritten based on the rest of the packet).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":150542,"byte_end":150663,"line_start":392,"line_end":392,"column_start":5,"column_end":126}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":150668,"byte_end":150671,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ # Example IPv4","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":150676,"byte_end":150694,"line_start":394,"line_end":394,"column_start":5,"column_end":23}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":150699,"byte_end":150706,"line_start":395,"line_end":395,"column_start":5,"column_end":12}},{"value":"/ # use etherparse::*;","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":150711,"byte_end":150735,"line_start":396,"line_end":396,"column_start":5,"column_end":29}},{"value":"/ #","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":150740,"byte_end":150745,"line_start":397,"line_end":397,"column_start":5,"column_end":10}},{"value":"/ let builder = PacketBuilder::","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":150750,"byte_end":150783,"line_start":398,"line_end":398,"column_start":5,"column_end":38}},{"value":"/     ethernet2([1,2,3,4,5,6],","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":150788,"byte_end":150820,"line_start":399,"line_end":399,"column_start":5,"column_end":37}},{"value":"/               [7,8,9,10,11,12])","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":150825,"byte_end":150860,"line_start":400,"line_end":400,"column_start":5,"column_end":40}},{"value":"/    //payload_len, protocol & checksum will be replaced during write","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":150865,"byte_end":150936,"line_start":401,"line_end":401,"column_start":5,"column_end":76}},{"value":"/    .ip(IpHeader::Version4(Ipv4Header::new(","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":150941,"byte_end":150987,"line_start":402,"line_end":402,"column_start":5,"column_end":51}},{"value":"/        0, //payload_len will be replaced during write","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":150992,"byte_end":151049,"line_start":403,"line_end":403,"column_start":5,"column_end":62}},{"value":"/        12, //time_to_live","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":151054,"byte_end":151083,"line_start":404,"line_end":404,"column_start":5,"column_end":34}},{"value":"/        IpTrafficClass::Udp, //will be replaced during write","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":151088,"byte_end":151151,"line_start":405,"line_end":405,"column_start":5,"column_end":68}},{"value":"/        [0,1,2,3], //source","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":151156,"byte_end":151186,"line_start":406,"line_end":406,"column_start":5,"column_end":35}},{"value":"/        [4,5,6,7] //destination","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":151191,"byte_end":151225,"line_start":407,"line_end":407,"column_start":5,"column_end":39}},{"value":"/     )));","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":151230,"byte_end":151242,"line_start":408,"line_end":408,"column_start":5,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":151247,"byte_end":151254,"line_start":409,"line_end":409,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":151259,"byte_end":151262,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ # Example IPv6","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":151267,"byte_end":151285,"line_start":411,"line_end":411,"column_start":5,"column_end":23}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":151290,"byte_end":151297,"line_start":412,"line_end":412,"column_start":5,"column_end":12}},{"value":"/ # use etherparse::*;","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":151302,"byte_end":151326,"line_start":413,"line_end":413,"column_start":5,"column_end":29}},{"value":"/ #","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":151331,"byte_end":151336,"line_start":414,"line_end":414,"column_start":5,"column_end":10}},{"value":"/ let builder = PacketBuilder::","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":151341,"byte_end":151374,"line_start":415,"line_end":415,"column_start":5,"column_end":38}},{"value":"/     ethernet2([1,2,3,4,5,6],","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":151379,"byte_end":151411,"line_start":416,"line_end":416,"column_start":5,"column_end":37}},{"value":"/               [7,8,9,10,11,12])","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":151416,"byte_end":151451,"line_start":417,"line_end":417,"column_start":5,"column_end":40}},{"value":"/    .ip(IpHeader::Version6(Ipv6Header{","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":151456,"byte_end":151497,"line_start":418,"line_end":418,"column_start":5,"column_end":46}},{"value":"/         traffic_class: 0,","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":151502,"byte_end":151531,"line_start":419,"line_end":419,"column_start":5,"column_end":34}},{"value":"/         flow_label: 0,","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":151536,"byte_end":151562,"line_start":420,"line_end":420,"column_start":5,"column_end":31}},{"value":"/         payload_length: 0, //will be replaced during write","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":151567,"byte_end":151629,"line_start":421,"line_end":421,"column_start":5,"column_end":67}},{"value":"/         next_header: 0, //will be replaced during write","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":151634,"byte_end":151693,"line_start":422,"line_end":422,"column_start":5,"column_end":64}},{"value":"/         hop_limit: 4,","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":151698,"byte_end":151723,"line_start":423,"line_end":423,"column_start":5,"column_end":30}},{"value":"/         source: [0;16],","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":151728,"byte_end":151755,"line_start":424,"line_end":424,"column_start":5,"column_end":32}},{"value":"/         destination: [0;16]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":151760,"byte_end":151791,"line_start":425,"line_end":425,"column_start":5,"column_end":36}},{"value":"/     }));","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":151796,"byte_end":151808,"line_start":426,"line_end":426,"column_start":5,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":151813,"byte_end":151820,"line_start":427,"line_end":427,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":609},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":152149,"byte_end":152153,"line_start":437,"line_end":437,"column_start":12,"column_end":16},"name":"ipv6","qualname":"<PacketBuilderStep<VlanHeader>>::ipv6","value":"pub fn ipv6(Self, [u8; ], [u8; ], u8) -> PacketBuilderStep<IpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Add a ip v6 header\n","sig":null,"attributes":[{"value":"/Add a ip v6 header","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":152116,"byte_end":152137,"line_start":436,"line_end":436,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":152524,"byte_end":152528,"line_start":446,"line_end":446,"column_start":12,"column_end":16},"name":"ipv4","qualname":"<PacketBuilderStep<VlanHeader>>::ipv4","value":"pub fn ipv4(Self, [u8; ], [u8; ], u8) -> PacketBuilderStep<IpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Add a ip v4 header\n","sig":null,"attributes":[{"value":"/Add a ip v4 header","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":152491,"byte_end":152512,"line_start":445,"line_end":445,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":616},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":152914,"byte_end":152917,"line_start":456,"line_end":456,"column_start":12,"column_end":15},"name":"udp","qualname":"<PacketBuilderStep<IpHeader>>::udp","value":"pub fn udp(Self, u16, u16) -> PacketBuilderStep<UdpHeader>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":617},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":153405,"byte_end":153408,"line_start":470,"line_end":470,"column_start":12,"column_end":15},"name":"tcp","qualname":"<PacketBuilderStep<IpHeader>>::tcp","value":"pub fn tcp(Self, u16, u16, u32, u16) -> PacketBuilderStep<TcpHeader>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":619},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":153957,"byte_end":153962,"line_start":484,"line_end":484,"column_start":12,"column_end":17},"name":"write","qualname":"<PacketBuilderStep<UdpHeader>>::write","value":"pub fn write<T: io::Write + Sized>(Self, &mut T, &[u8])\n-> Result<(), WriteError>","parent":null,"children":[],"decl_id":null,"docs":"Write all the headers and the payload.\n","sig":null,"attributes":[{"value":"/Write all the headers and the payload.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":153904,"byte_end":153945,"line_start":483,"line_end":483,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":621},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":154171,"byte_end":154175,"line_start":489,"line_end":489,"column_start":12,"column_end":16},"name":"size","qualname":"<PacketBuilderStep<UdpHeader>>::size","value":"pub fn size(&Self, usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":"Returns the size of the packet when it is serialized\n","sig":null,"attributes":[{"value":"/Returns the size of the packet when it is serialized","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":154104,"byte_end":154159,"line_start":488,"line_end":488,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":623},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":154396,"byte_end":154398,"line_start":497,"line_end":497,"column_start":12,"column_end":14},"name":"ns","qualname":"<PacketBuilderStep<TcpHeader>>::ns","value":"pub fn ns(Self) -> PacketBuilderStep<TcpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Set ns flag (ECN-nonce - concealment protection; experimental: see RFC 3540)\n","sig":null,"attributes":[{"value":"/Set ns flag (ECN-nonce - concealment protection; experimental: see RFC 3540)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":154305,"byte_end":154384,"line_start":496,"line_end":496,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":624},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":154604,"byte_end":154607,"line_start":502,"line_end":502,"column_start":12,"column_end":15},"name":"fin","qualname":"<PacketBuilderStep<TcpHeader>>::fin","value":"pub fn fin(Self) -> PacketBuilderStep<TcpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Set fin flag (No more data from sender)\n","sig":null,"attributes":[{"value":"/Set fin flag (No more data from sender)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":154550,"byte_end":154592,"line_start":501,"line_end":501,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":625},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":154822,"byte_end":154825,"line_start":507,"line_end":507,"column_start":12,"column_end":15},"name":"syn","qualname":"<PacketBuilderStep<TcpHeader>>::syn","value":"pub fn syn(Self) -> PacketBuilderStep<TcpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Set the syn flag (synchronize sequence numbers)\n","sig":null,"attributes":[{"value":"/Set the syn flag (synchronize sequence numbers)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":154760,"byte_end":154810,"line_start":506,"line_end":506,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":155033,"byte_end":155036,"line_start":512,"line_end":512,"column_start":12,"column_end":15},"name":"rst","qualname":"<PacketBuilderStep<TcpHeader>>::rst","value":"pub fn rst(Self) -> PacketBuilderStep<TcpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Sets the rst flag (reset the connection)\n","sig":null,"attributes":[{"value":"/Sets the rst flag (reset the connection)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":154978,"byte_end":155021,"line_start":511,"line_end":511,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":155237,"byte_end":155240,"line_start":517,"line_end":517,"column_start":12,"column_end":15},"name":"psh","qualname":"<PacketBuilderStep<TcpHeader>>::psh","value":"pub fn psh(Self) -> PacketBuilderStep<TcpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Sets the psh flag (push function)\n","sig":null,"attributes":[{"value":"/Sets the psh flag (push function)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":155189,"byte_end":155225,"line_start":516,"line_end":516,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":155456,"byte_end":155459,"line_start":522,"line_end":522,"column_start":12,"column_end":15},"name":"ack","qualname":"<PacketBuilderStep<TcpHeader>>::ack","value":"pub fn ack(Self, u32) -> PacketBuilderStep<TcpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Sets the ack flag and the acknowledgment_number.\n","sig":null,"attributes":[{"value":"/Sets the ack flag and the acknowledgment_number.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":155393,"byte_end":155444,"line_start":521,"line_end":521,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":629},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":155933,"byte_end":155936,"line_start":534,"line_end":534,"column_start":12,"column_end":15},"name":"urg","qualname":"<PacketBuilderStep<TcpHeader>>::urg","value":"pub fn urg(Self, u16) -> PacketBuilderStep<TcpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Set the urg flag & the urgent pointer field.","sig":null,"attributes":[{"value":"/Set the urg flag & the urgent pointer field.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":155763,"byte_end":155810,"line_start":530,"line_end":530,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":155815,"byte_end":155818,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/The urgent pointer points to the sequence number of the octet following","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":155823,"byte_end":155897,"line_start":532,"line_end":532,"column_start":5,"column_end":79}},{"value":"/the urgent data.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":155902,"byte_end":155921,"line_start":533,"line_end":533,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":630},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":156268,"byte_end":156271,"line_start":543,"line_end":543,"column_start":12,"column_end":15},"name":"ece","qualname":"<PacketBuilderStep<TcpHeader>>::ece","value":"pub fn ece(Self) -> PacketBuilderStep<TcpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Sets ece flag (ECN-Echo, RFC 3168)\n","sig":null,"attributes":[{"value":"/Sets ece flag (ECN-Echo, RFC 3168)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":156219,"byte_end":156256,"line_start":542,"line_end":542,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":631},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":156678,"byte_end":156681,"line_start":551,"line_end":551,"column_start":12,"column_end":15},"name":"cwr","qualname":"<PacketBuilderStep<TcpHeader>>::cwr","value":"pub fn cwr(Self) -> PacketBuilderStep<TcpHeader>","parent":null,"children":[],"decl_id":null,"docs":"Set cwr flag (Congestion Window Reduced)","sig":null,"attributes":[{"value":"/Set cwr flag (Congestion Window Reduced)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":156425,"byte_end":156468,"line_start":548,"line_end":548,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":156473,"byte_end":156476,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/This flag is set by the sending host to indicate that it received a TCP segment with the ECE flag set and had responded in congestion control mechanism (added to header by RFC 3168).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":156481,"byte_end":156666,"line_start":550,"line_end":550,"column_start":5,"column_end":190}}]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":156884,"byte_end":156891,"line_start":557,"line_end":557,"column_start":12,"column_end":19},"name":"options","qualname":"<PacketBuilderStep<TcpHeader>>::options","value":"pub fn options(Self, &[TcpOptionElement])\n-> Result<PacketBuilderStep<TcpHeader>, TcpOptionWriteError>","parent":null,"children":[],"decl_id":null,"docs":"Set the tcp options of the header.\n","sig":null,"attributes":[{"value":"/Set the tcp options of the header.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":156835,"byte_end":156872,"line_start":556,"line_end":556,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":633},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":157197,"byte_end":157208,"line_start":563,"line_end":563,"column_start":12,"column_end":23},"name":"options_raw","qualname":"<PacketBuilderStep<TcpHeader>>::options_raw","value":"pub fn options_raw(Self, &[u8])\n-> Result<PacketBuilderStep<TcpHeader>, TcpOptionWriteError>","parent":null,"children":[],"decl_id":null,"docs":"Set the tcp options of the header (setting the bytes directly).\n","sig":null,"attributes":[{"value":"/Set the tcp options of the header (setting the bytes directly).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":157119,"byte_end":157185,"line_start":562,"line_end":562,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":634},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":157479,"byte_end":157484,"line_start":569,"line_end":569,"column_start":12,"column_end":17},"name":"write","qualname":"<PacketBuilderStep<TcpHeader>>::write","value":"pub fn write<T: io::Write + Sized>(Self, &mut T, &[u8])\n-> Result<(), WriteError>","parent":null,"children":[],"decl_id":null,"docs":"Write all the headers and the payload.\n","sig":null,"attributes":[{"value":"/Write all the headers and the payload.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":157426,"byte_end":157467,"line_start":568,"line_end":568,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":636},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":157693,"byte_end":157697,"line_start":574,"line_end":574,"column_start":12,"column_end":16},"name":"size","qualname":"<PacketBuilderStep<TcpHeader>>::size","value":"pub fn size(&Self, usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":"Returns the size of the packet when it is serialized\n","sig":null,"attributes":[{"value":"/Returns the size of the packet when it is serialized","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":157626,"byte_end":157681,"line_start":573,"line_end":573,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":1683},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":162976,"byte_end":162989,"line_start":7,"line_end":7,"column_start":12,"column_end":25},"name":"PacketHeaders","qualname":"::packet_decoder::PacketHeaders","value":"PacketHeaders { link, vlan, ip, transport, payload }","parent":null,"children":[{"krate":0,"index":1685},{"krate":0,"index":1686},{"krate":0,"index":1687},{"krate":0,"index":1688},{"krate":0,"index":1689}],"decl_id":null,"docs":" Decoded packet headers (data link layer and higher).\n You can use PacketHeaders::from_ethernet_slice or PacketHeader::from_ip_slice\n to decode and get this struct as a result.\n","sig":null,"attributes":[{"value":"/ Decoded packet headers (data link layer and higher).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":162740,"byte_end":162796,"line_start":3,"line_end":3,"column_start":1,"column_end":57}},{"value":"/ You can use PacketHeaders::from_ethernet_slice or PacketHeader::from_ip_slice","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":162797,"byte_end":162878,"line_start":4,"line_end":4,"column_start":1,"column_end":82}},{"value":"/ to decode and get this struct as a result.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":162879,"byte_end":162925,"line_start":5,"line_end":5,"column_start":1,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":1685},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":163004,"byte_end":163008,"line_start":8,"line_end":8,"column_start":9,"column_end":13},"name":"link","qualname":"::packet_decoder::PacketHeaders::link","value":"std::option::Option<link::ethernet::Ethernet2Header>","parent":{"krate":0,"index":1683},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1686},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":163043,"byte_end":163047,"line_start":9,"line_end":9,"column_start":9,"column_end":13},"name":"vlan","qualname":"::packet_decoder::PacketHeaders::vlan","value":"std::option::Option<link::vlan_tagging::VlanHeader>","parent":{"krate":0,"index":1683},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1687},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":163077,"byte_end":163079,"line_start":10,"line_end":10,"column_start":9,"column_end":11},"name":"ip","qualname":"::packet_decoder::PacketHeaders::ip","value":"std::option::Option<internet::ip::IpHeader>","parent":{"krate":0,"index":1683},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1688},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":163107,"byte_end":163116,"line_start":11,"line_end":11,"column_start":9,"column_end":18},"name":"transport","qualname":"::packet_decoder::PacketHeaders::transport","value":"std::option::Option<transport::TransportHeader>","parent":{"krate":0,"index":1683},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1689},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":163238,"byte_end":163245,"line_start":13,"line_end":13,"column_start":9,"column_end":16},"name":"payload","qualname":"::packet_decoder::PacketHeaders::payload","value":"&'a [u8]","parent":{"krate":0,"index":1683},"children":[],"decl_id":null,"docs":"Rest of the packet that could not be decoded as a header (usually the payload).\n","sig":null,"attributes":[{"value":"/Rest of the packet that could not be decoded as a header (usually the payload).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":163147,"byte_end":163229,"line_start":12,"line_end":12,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":163355,"byte_end":163374,"line_start":18,"line_end":18,"column_start":12,"column_end":31},"name":"from_ethernet_slice","qualname":"<PacketHeaders>::from_ethernet_slice","value":"pub fn from_ethernet_slice(&[u8]) -> Result<PacketHeaders, ReadError>","parent":null,"children":[],"decl_id":null,"docs":"Tries to decode as much as possible of a packet.\n","sig":null,"attributes":[{"value":"/Tries to decode as much as possible of a packet.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":163292,"byte_end":163343,"line_start":17,"line_end":17,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":664},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":168285,"byte_end":168298,"line_start":156,"line_end":156,"column_start":12,"column_end":25},"name":"from_ip_slice","qualname":"<PacketHeaders>::from_ip_slice","value":"pub fn from_ip_slice(&[u8]) -> Result<PacketHeaders, ReadError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to decode an ip packet and its transport headers.  \n Assumes the given slice starts with the first byte of the IP header\n # Example\n ```\n # use etherparse::*;\n // build a UDP packet\n let payload = [0u8;18];\n let builder = PacketBuilder::\n    ipv4([192,168,1,1], //source ip\n          [192,168,1,2], //desitionation ip\n          20)            //time to life\n    .udp(21,    //source port \n         1234); //desitnation port","sig":null,"attributes":[{"value":"/ Tries to decode an ip packet and its transport headers.  ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":167080,"byte_end":167141,"line_start":126,"line_end":126,"column_start":5,"column_end":66}},{"value":"/ Assumes the given slice starts with the first byte of the IP header","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":167146,"byte_end":167217,"line_start":127,"line_end":127,"column_start":5,"column_end":76}},{"value":"/ # Example","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":167222,"byte_end":167235,"line_start":128,"line_end":128,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":167240,"byte_end":167247,"line_start":129,"line_end":129,"column_start":5,"column_end":12}},{"value":"/ # use etherparse::*;","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":167252,"byte_end":167276,"line_start":130,"line_end":130,"column_start":5,"column_end":29}},{"value":"/ // build a UDP packet","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":167281,"byte_end":167306,"line_start":131,"line_end":131,"column_start":5,"column_end":30}},{"value":"/ let payload = [0u8;18];","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":167311,"byte_end":167338,"line_start":132,"line_end":132,"column_start":5,"column_end":32}},{"value":"/ let builder = PacketBuilder::","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":167343,"byte_end":167376,"line_start":133,"line_end":133,"column_start":5,"column_end":38}},{"value":"/    ipv4([192,168,1,1], //source ip","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":167381,"byte_end":167419,"line_start":134,"line_end":134,"column_start":5,"column_end":43}},{"value":"/          [192,168,1,2], //desitionation ip","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":167424,"byte_end":167470,"line_start":135,"line_end":135,"column_start":5,"column_end":51}},{"value":"/          20)            //time to life","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":167475,"byte_end":167517,"line_start":136,"line_end":136,"column_start":5,"column_end":47}},{"value":"/    .udp(21,    //source port ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":167522,"byte_end":167555,"line_start":137,"line_end":137,"column_start":5,"column_end":38}},{"value":"/         1234); //desitnation port","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":167560,"byte_end":167597,"line_start":138,"line_end":138,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":167602,"byte_end":167605,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ // serialize the packet","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":167610,"byte_end":167637,"line_start":140,"line_end":140,"column_start":5,"column_end":32}},{"value":"/ let packet = {","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":167642,"byte_end":167660,"line_start":141,"line_end":141,"column_start":5,"column_end":23}},{"value":"/     let mut packet = Vec::<u8>::with_capacity(","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":167665,"byte_end":167715,"line_start":142,"line_end":142,"column_start":5,"column_end":55}},{"value":"/                     builder.size(payload.len()));","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":167720,"byte_end":167773,"line_start":143,"line_end":143,"column_start":5,"column_end":58}},{"value":"/     builder.write(&mut packet, &payload).unwrap();","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":167778,"byte_end":167832,"line_start":144,"line_end":144,"column_start":5,"column_end":59}},{"value":"/     packet","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":167837,"byte_end":167851,"line_start":145,"line_end":145,"column_start":5,"column_end":19}},{"value":"/ };","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":167856,"byte_end":167862,"line_start":146,"line_end":146,"column_start":5,"column_end":11}},{"value":"/ # // should be 64 bytes long (including the ethernet FCS/CRC32) but since ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":167867,"byte_end":167945,"line_start":147,"line_end":147,"column_start":5,"column_end":83}},{"value":"/ # // this is not provided at the moment we're gonna be fine with 46","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":167950,"byte_end":168021,"line_start":148,"line_end":148,"column_start":5,"column_end":76}},{"value":"/ # assert_eq!(packet.len(), 46);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":168026,"byte_end":168061,"line_start":149,"line_end":149,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":168066,"byte_end":168069,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ // parse the ip packet from a slice","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":168074,"byte_end":168113,"line_start":151,"line_end":151,"column_start":5,"column_end":44}},{"value":"/ let p = PacketHeaders::from_ip_slice(&packet)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":168118,"byte_end":168167,"line_start":152,"line_end":152,"column_start":5,"column_end":54}},{"value":"/     .expect(\"Failed to decode the packet\");","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":168172,"byte_end":168219,"line_start":153,"line_end":153,"column_start":5,"column_end":52}},{"value":"/ # assert_eq!(p.payload, payload);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":168224,"byte_end":168261,"line_start":154,"line_end":154,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":168266,"byte_end":168273,"line_start":155,"line_end":155,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1709},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":170102,"byte_end":170111,"line_start":7,"line_end":7,"column_start":5,"column_end":14},"name":"Ethernet2","qualname":"::packet_slicing::LinkSlice::Ethernet2","value":"LinkSlice::Ethernet2(Ethernet2HeaderSlice)","parent":{"krate":0,"index":1707},"children":[],"decl_id":null,"docs":"A slice containing an Ethernet II header.\n","sig":null,"attributes":[{"value":"/A slice containing an Ethernet II header.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":170053,"byte_end":170097,"line_start":6,"line_end":6,"column_start":5,"column_end":49}}]},{"kind":"Enum","id":{"krate":0,"index":1707},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":170033,"byte_end":170042,"line_start":5,"line_end":5,"column_start":10,"column_end":19},"name":"LinkSlice","qualname":"::packet_slicing::LinkSlice","value":"pub enum LinkSlice<'a> { Ethernet2(Ethernet2HeaderSlice), }","parent":null,"children":[{"krate":0,"index":1709}],"decl_id":null,"docs":"A slice containing the link layer header (currently only Ethernet II is supported).\n","sig":null,"attributes":[{"value":"/A slice containing the link layer header (currently only Ethernet II is supported).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":169898,"byte_end":169984,"line_start":3,"line_end":3,"column_start":1,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1731},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":170263,"byte_end":170273,"line_start":13,"line_end":13,"column_start":5,"column_end":15},"name":"SingleVlan","qualname":"::packet_slicing::VlanSlice::SingleVlan","value":"VlanSlice::SingleVlan(SingleVlanHeaderSlice)","parent":{"krate":0,"index":1729},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1734},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":170306,"byte_end":170316,"line_start":14,"line_end":14,"column_start":5,"column_end":15},"name":"DoubleVlan","qualname":"::packet_slicing::VlanSlice::DoubleVlan","value":"VlanSlice::DoubleVlan(DoubleVlanHeaderSlice)","parent":{"krate":0,"index":1729},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1729},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":170243,"byte_end":170252,"line_start":12,"line_end":12,"column_start":10,"column_end":19},"name":"VlanSlice","qualname":"::packet_slicing::VlanSlice","value":"pub enum VlanSlice<'a> {\n    SingleVlan(SingleVlanHeaderSlice),\n    DoubleVlan(DoubleVlanHeaderSlice),\n}","parent":null,"children":[{"krate":0,"index":1731},{"krate":0,"index":1734}],"decl_id":null,"docs":"A slice containing a single or double vlan header.\n","sig":null,"attributes":[{"value":"/A slice containing a single or double vlan header.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":170141,"byte_end":170194,"line_start":10,"line_end":10,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":676},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":170457,"byte_end":170466,"line_start":19,"line_end":19,"column_start":12,"column_end":21},"name":"to_header","qualname":"<VlanSlice>::to_header","value":"pub fn to_header(&Self) -> VlanHeader","parent":null,"children":[],"decl_id":null,"docs":"Decode all the fields and copy the results to a VlanHeader struct\n","sig":null,"attributes":[{"value":"/Decode all the fields and copy the results to a VlanHeader struct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":170377,"byte_end":170445,"line_start":18,"line_end":18,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1756},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":170788,"byte_end":170792,"line_start":31,"line_end":31,"column_start":5,"column_end":9},"name":"Ipv4","qualname":"::packet_slicing::InternetSlice::Ipv4","value":"InternetSlice::Ipv4(Ipv4HeaderSlice)","parent":{"krate":0,"index":1754},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1759},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":170963,"byte_end":170967,"line_start":33,"line_end":33,"column_start":5,"column_end":9},"name":"Ipv6","qualname":"::packet_slicing::InternetSlice::Ipv6","value":"InternetSlice::Ipv6(Ipv6HeaderSlice, [Option<(u8, Ipv6ExtensionHeaderSlice)>; ])","parent":{"krate":0,"index":1754},"children":[],"decl_id":null,"docs":"First element is the Ipv6 header slice and second one are the Ipv6 extensions headers filled in order from 0 to the length of the array.\n","sig":null,"attributes":[{"value":"/First element is the Ipv6 header slice and second one are the Ipv6 extensions headers filled in order from 0 to the length of the array.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":170819,"byte_end":170958,"line_start":32,"line_end":32,"column_start":5,"column_end":144}}]},{"kind":"Enum","id":{"krate":0,"index":1754},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":170764,"byte_end":170777,"line_start":30,"line_end":30,"column_start":10,"column_end":23},"name":"InternetSlice","qualname":"::packet_slicing::InternetSlice","value":"pub enum InternetSlice<'a> {\n    Ipv4(Ipv4HeaderSlice),\n    Ipv6(Ipv6HeaderSlice, [Option<(u8, Ipv6ExtensionHeaderSlice)>; ]),\n}","parent":null,"children":[{"krate":0,"index":1756},{"krate":0,"index":1759}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1784},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":171185,"byte_end":171188,"line_start":39,"line_end":39,"column_start":5,"column_end":8},"name":"Udp","qualname":"::packet_slicing::TransportSlice::Udp","value":"TransportSlice::Udp(UdpHeaderSlice)","parent":{"krate":0,"index":1782},"children":[],"decl_id":null,"docs":"A slice containing an UDP header.\n","sig":null,"attributes":[{"value":"/A slice containing an UDP header.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":171144,"byte_end":171180,"line_start":38,"line_end":38,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1787},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":171254,"byte_end":171257,"line_start":41,"line_end":41,"column_start":5,"column_end":8},"name":"Tcp","qualname":"::packet_slicing::TransportSlice::Tcp","value":"TransportSlice::Tcp(TcpHeaderSlice)","parent":{"krate":0,"index":1782},"children":[],"decl_id":null,"docs":"A slice containing a TCP header.\n","sig":null,"attributes":[{"value":"/A slice containing a TCP header.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":171214,"byte_end":171249,"line_start":40,"line_end":40,"column_start":5,"column_end":40}}]},{"kind":"Enum","id":{"krate":0,"index":1782},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":171119,"byte_end":171133,"line_start":37,"line_end":37,"column_start":10,"column_end":24},"name":"TransportSlice","qualname":"::packet_slicing::TransportSlice","value":"pub enum TransportSlice<'a> { Udp(UdpHeaderSlice), Tcp(TcpHeaderSlice), }","parent":null,"children":[{"krate":0,"index":1784},{"krate":0,"index":1787}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1807},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":171452,"byte_end":171464,"line_start":46,"line_end":46,"column_start":12,"column_end":24},"name":"SlicedPacket","qualname":"::packet_slicing::SlicedPacket","value":"SlicedPacket { link, vlan, ip, transport, payload }","parent":null,"children":[{"krate":0,"index":1809},{"krate":0,"index":1810},{"krate":0,"index":1811},{"krate":0,"index":1812},{"krate":0,"index":1813}],"decl_id":null,"docs":"A sliced into its component headers. Everything that could not be parsed is stored in a slice in the field \"payload\".\n","sig":null,"attributes":[{"value":"/A sliced into its component headers. Everything that could not be parsed is stored in a slice in the field \"payload\".","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":171281,"byte_end":171401,"line_start":44,"line_end":44,"column_start":1,"column_end":121}}]},{"kind":"Field","id":{"krate":0,"index":1809},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":171479,"byte_end":171483,"line_start":47,"line_end":47,"column_start":9,"column_end":13},"name":"link","qualname":"::packet_slicing::SlicedPacket::link","value":"std::option::Option<packet_slicing::LinkSlice<'a>>","parent":{"krate":0,"index":1807},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1810},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":171516,"byte_end":171520,"line_start":48,"line_end":48,"column_start":9,"column_end":13},"name":"vlan","qualname":"::packet_slicing::SlicedPacket::vlan","value":"std::option::Option<packet_slicing::VlanSlice<'a>>","parent":{"krate":0,"index":1807},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1811},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":171553,"byte_end":171555,"line_start":49,"line_end":49,"column_start":9,"column_end":11},"name":"ip","qualname":"::packet_slicing::SlicedPacket::ip","value":"std::option::Option<packet_slicing::InternetSlice<'a>>","parent":{"krate":0,"index":1807},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1812},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":171592,"byte_end":171601,"line_start":50,"line_end":50,"column_start":9,"column_end":18},"name":"transport","qualname":"::packet_slicing::SlicedPacket::transport","value":"std::option::Option<packet_slicing::TransportSlice<'a>>","parent":{"krate":0,"index":1807},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1813},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":172173,"byte_end":172180,"line_start":59,"line_end":59,"column_start":9,"column_end":16},"name":"payload","qualname":"::packet_slicing::SlicedPacket::payload","value":"&'a [u8]","parent":{"krate":0,"index":1807},"children":[],"decl_id":null,"docs":" The payload field points to the rest of the packet that could not be parsed by etherparse.","sig":null,"attributes":[{"value":"/ The payload field points to the rest of the packet that could not be parsed by etherparse.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":171635,"byte_end":171729,"line_start":51,"line_end":51,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":171734,"byte_end":171737,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ Depending on what other fields contain a \"Some\" values the payload contains the corresponding ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":171742,"byte_end":171840,"line_start":53,"line_end":53,"column_start":5,"column_end":103}},{"value":"/ payload.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":171845,"byte_end":171857,"line_start":54,"line_end":54,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":171862,"byte_end":171865,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ For example if transport field contains Some(Udp(_)) then the payload field points to the udp payload.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":171870,"byte_end":171976,"line_start":56,"line_end":56,"column_start":5,"column_end":111}},{"value":"/ On the other hand if the transport field contains None then the payload contains the payload of","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":171981,"byte_end":172080,"line_start":57,"line_end":57,"column_start":5,"column_end":104}},{"value":"/ next field containing a Some value (in order of transport, ip, vlan, link).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":172085,"byte_end":172164,"line_start":58,"line_end":58,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":688},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":174110,"byte_end":174123,"line_start":107,"line_end":107,"column_start":12,"column_end":25},"name":"from_ethernet","qualname":"<SlicedPacket>::from_ethernet","value":"pub fn from_ethernet(&'a [u8]) -> Result<SlicedPacket, ReadError>","parent":null,"children":[],"decl_id":null,"docs":" Seperates a network packet slice into different slices containing the headers from the ethernet header downwards. ","sig":null,"attributes":[{"value":"/ Seperates a network packet slice into different slices containing the headers from the ethernet header downwards. ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":172599,"byte_end":172717,"line_start":72,"line_end":72,"column_start":5,"column_end":123}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":172722,"byte_end":172725,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ The result is returned as a SlicerPacket struct. This function assumes the given data starts ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":172730,"byte_end":172827,"line_start":74,"line_end":74,"column_start":5,"column_end":102}},{"value":"/ with an ethernet II header.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":172832,"byte_end":172863,"line_start":75,"line_end":75,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":172868,"byte_end":172871,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":172876,"byte_end":172890,"line_start":77,"line_end":77,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":172895,"byte_end":172898,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":172903,"byte_end":172919,"line_start":79,"line_end":79,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":172924,"byte_end":172927,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":172932,"byte_end":172938,"line_start":81,"line_end":81,"column_start":5,"column_end":11}},{"value":"/ # use etherparse::{SlicedPacket, PacketBuilder};","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":172943,"byte_end":172995,"line_start":82,"line_end":82,"column_start":5,"column_end":57}},{"value":"/ # let builder = PacketBuilder::","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":173000,"byte_end":173035,"line_start":83,"line_end":83,"column_start":5,"column_end":40}},{"value":"/ #    ethernet2([1,2,3,4,5,6],     //source mac","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":173040,"byte_end":173090,"line_start":84,"line_end":84,"column_start":5,"column_end":55}},{"value":"/ #               [7,8,9,10,11,12]) //destionation mac","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":173095,"byte_end":173151,"line_start":85,"line_end":85,"column_start":5,"column_end":61}},{"value":"/ #    .ipv4([192,168,1,1], //source ip","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":173156,"byte_end":173197,"line_start":86,"line_end":86,"column_start":5,"column_end":46}},{"value":"/ #          [192,168,1,2], //desitionation ip","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":173202,"byte_end":173250,"line_start":87,"line_end":87,"column_start":5,"column_end":53}},{"value":"/ #          20)            //time to life","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":173255,"byte_end":173299,"line_start":88,"line_end":88,"column_start":5,"column_end":49}},{"value":"/ #    .udp(21,    //source port ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":173304,"byte_end":173339,"line_start":89,"line_end":89,"column_start":5,"column_end":40}},{"value":"/ #         1234); //desitnation port","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":173344,"byte_end":173383,"line_start":90,"line_end":90,"column_start":5,"column_end":44}},{"value":"/ #    //payload of the udp packet","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":173388,"byte_end":173424,"line_start":91,"line_end":91,"column_start":5,"column_end":41}},{"value":"/ #    let payload = [1,2,3,4,5,6,7,8];","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":173429,"byte_end":173470,"line_start":92,"line_end":92,"column_start":5,"column_end":46}},{"value":"/ #    //get some memory to store the serialized data","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":173475,"byte_end":173530,"line_start":93,"line_end":93,"column_start":5,"column_end":60}},{"value":"/ #    let mut packet = Vec::<u8>::with_capacity(","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":173535,"byte_end":173586,"line_start":94,"line_end":94,"column_start":5,"column_end":56}},{"value":"/ #                            builder.size(payload.len()));","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":173591,"byte_end":173653,"line_start":95,"line_end":95,"column_start":5,"column_end":67}},{"value":"/ #    builder.write(&mut packet, &payload).unwrap();","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":173658,"byte_end":173713,"line_start":96,"line_end":96,"column_start":5,"column_end":60}},{"value":"/ match SlicedPacket::from_ethernet(&packet) {","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":173718,"byte_end":173766,"line_start":97,"line_end":97,"column_start":5,"column_end":53}},{"value":"/     Err(value) => println!(\"Err {:?}\", value),","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":173771,"byte_end":173821,"line_start":98,"line_end":98,"column_start":5,"column_end":55}},{"value":"/     Ok(value) => {","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":173826,"byte_end":173848,"line_start":99,"line_end":99,"column_start":5,"column_end":27}},{"value":"/         println!(\"link: {:?}\", value.link);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":173853,"byte_end":173900,"line_start":100,"line_end":100,"column_start":5,"column_end":52}},{"value":"/         println!(\"vlan: {:?}\", value.vlan);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":173905,"byte_end":173952,"line_start":101,"line_end":101,"column_start":5,"column_end":52}},{"value":"/         println!(\"ip: {:?}\", value.ip);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":173957,"byte_end":174000,"line_start":102,"line_end":102,"column_start":5,"column_end":48}},{"value":"/         println!(\"transport: {:?}\", value.transport);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":174005,"byte_end":174062,"line_start":103,"line_end":103,"column_start":5,"column_end":62}},{"value":"/     }","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":174067,"byte_end":174076,"line_start":104,"line_end":104,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":174081,"byte_end":174086,"line_start":105,"line_end":105,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":174091,"byte_end":174098,"line_start":106,"line_end":106,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":689},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":175738,"byte_end":175745,"line_start":147,"line_end":147,"column_start":12,"column_end":19},"name":"from_ip","qualname":"<SlicedPacket>::from_ip","value":"pub fn from_ip(&'a [u8]) -> Result<SlicedPacket, ReadError>","parent":null,"children":[],"decl_id":null,"docs":" Seperates a network packet slice into different slices containing the headers from the ip header downwards. ","sig":null,"attributes":[{"value":"/ Seperates a network packet slice into different slices containing the headers from the ip header downwards. ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":174237,"byte_end":174349,"line_start":111,"line_end":111,"column_start":5,"column_end":117}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":174354,"byte_end":174357,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ The result is returned as a SlicerPacket struct. This function assumes the given data starts ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":174362,"byte_end":174459,"line_start":113,"line_end":113,"column_start":5,"column_end":102}},{"value":"/ with an IPv4 or IPv6 header.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":174464,"byte_end":174496,"line_start":114,"line_end":114,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":174501,"byte_end":174504,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":174509,"byte_end":174523,"line_start":116,"line_end":116,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":174528,"byte_end":174531,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":174536,"byte_end":174552,"line_start":118,"line_end":118,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":174557,"byte_end":174560,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":174565,"byte_end":174571,"line_start":120,"line_end":120,"column_start":5,"column_end":11}},{"value":"/ # use etherparse::{SlicedPacket, PacketBuilder};","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":174576,"byte_end":174628,"line_start":121,"line_end":121,"column_start":5,"column_end":57}},{"value":"/ # let builder = PacketBuilder::","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":174633,"byte_end":174668,"line_start":122,"line_end":122,"column_start":5,"column_end":40}},{"value":"/ #    ipv4([192,168,1,1], //source ip","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":174673,"byte_end":174713,"line_start":123,"line_end":123,"column_start":5,"column_end":45}},{"value":"/ #         [192,168,1,2], //desitionation ip","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":174718,"byte_end":174765,"line_start":124,"line_end":124,"column_start":5,"column_end":52}},{"value":"/ #         20)            //time to life","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":174770,"byte_end":174813,"line_start":125,"line_end":125,"column_start":5,"column_end":48}},{"value":"/ #    .udp(21,    //source port ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":174818,"byte_end":174853,"line_start":126,"line_end":126,"column_start":5,"column_end":40}},{"value":"/ #         1234); //desitnation port","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":174858,"byte_end":174897,"line_start":127,"line_end":127,"column_start":5,"column_end":44}},{"value":"/ #    //payload of the udp packet","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":174902,"byte_end":174938,"line_start":128,"line_end":128,"column_start":5,"column_end":41}},{"value":"/ #    let payload = [1,2,3,4,5,6,7,8];","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":174943,"byte_end":174984,"line_start":129,"line_end":129,"column_start":5,"column_end":46}},{"value":"/ #    //get some memory to store the serialized data","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":174989,"byte_end":175044,"line_start":130,"line_end":130,"column_start":5,"column_end":60}},{"value":"/ #    let mut packet = Vec::<u8>::with_capacity(","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":175049,"byte_end":175100,"line_start":131,"line_end":131,"column_start":5,"column_end":56}},{"value":"/ #                            builder.size(payload.len()));","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":175105,"byte_end":175167,"line_start":132,"line_end":132,"column_start":5,"column_end":67}},{"value":"/ #    builder.write(&mut packet, &payload).unwrap();","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":175172,"byte_end":175227,"line_start":133,"line_end":133,"column_start":5,"column_end":60}},{"value":"/ match SlicedPacket::from_ip(&packet) {","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":175232,"byte_end":175274,"line_start":134,"line_end":134,"column_start":5,"column_end":47}},{"value":"/     Err(value) => println!(\"Err {:?}\", value),","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":175279,"byte_end":175329,"line_start":135,"line_end":135,"column_start":5,"column_end":55}},{"value":"/     Ok(value) => {","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":175334,"byte_end":175356,"line_start":136,"line_end":136,"column_start":5,"column_end":27}},{"value":"/         //link & vlan fields are empty when parsing from ip downwards","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":175361,"byte_end":175434,"line_start":137,"line_end":137,"column_start":5,"column_end":78}},{"value":"/         assert_eq!(None, value.link);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":175439,"byte_end":175480,"line_start":138,"line_end":138,"column_start":5,"column_end":46}},{"value":"/         assert_eq!(None, value.vlan);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":175485,"byte_end":175526,"line_start":139,"line_end":139,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":175531,"byte_end":175534,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/         //ip & transport (udp or tcp)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":175539,"byte_end":175580,"line_start":141,"line_end":141,"column_start":5,"column_end":46}},{"value":"/         println!(\"ip: {:?}\", value.ip);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":175585,"byte_end":175628,"line_start":142,"line_end":142,"column_start":5,"column_end":48}},{"value":"/         println!(\"transport: {:?}\", value.transport);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":175633,"byte_end":175690,"line_start":143,"line_end":143,"column_start":5,"column_end":62}},{"value":"/     }","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":175695,"byte_end":175704,"line_start":144,"line_end":144,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":175709,"byte_end":175714,"line_start":145,"line_end":145,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":175719,"byte_end":175726,"line_start":146,"line_end":146,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":725},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_filter.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"packet_filter","qualname":"::packet_filter","value":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_filter.rs","parent":null,"children":[{"krate":0,"index":726},{"krate":0,"index":1831},{"krate":0,"index":1840},{"krate":0,"index":1843},{"krate":0,"index":1846},{"krate":0,"index":1848},{"krate":0,"index":1851},{"krate":0,"index":1853},{"krate":0,"index":1857},{"krate":0,"index":1863},{"krate":0,"index":1865},{"krate":0,"index":1867},{"krate":0,"index":1868},{"krate":0,"index":1872},{"krate":0,"index":1873},{"krate":0,"index":1876},{"krate":0,"index":1883},{"krate":0,"index":1885},{"krate":0,"index":1887},{"krate":0,"index":1888},{"krate":0,"index":1890},{"krate":0,"index":1891},{"krate":0,"index":1894},{"krate":0,"index":1905},{"krate":0,"index":1907},{"krate":0,"index":1909},{"krate":0,"index":1910},{"krate":0,"index":1916},{"krate":0,"index":1917},{"krate":0,"index":1920},{"krate":0,"index":1927},{"krate":0,"index":1929},{"krate":0,"index":1931},{"krate":0,"index":1932},{"krate":0,"index":1934},{"krate":0,"index":1935},{"krate":0,"index":1938},{"krate":0,"index":1943},{"krate":0,"index":1945},{"krate":0,"index":1947},{"krate":0,"index":1949},{"krate":0,"index":1950},{"krate":0,"index":1952},{"krate":0,"index":1953},{"krate":0,"index":727},{"krate":0,"index":730},{"krate":0,"index":733},{"krate":0,"index":736},{"krate":0,"index":739},{"krate":0,"index":742}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1833},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_filter.rs","byte_start":183102,"byte_end":183105,"line_start":5,"line_end":5,"column_start":5,"column_end":8},"name":"Any","qualname":"::packet_filter::ElementFilter::Any","value":"ElementFilter::Any","parent":{"krate":0,"index":1831},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1835},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_filter.rs","byte_start":183111,"byte_end":183113,"line_start":6,"line_end":6,"column_start":5,"column_end":7},"name":"No","qualname":"::packet_filter::ElementFilter::No","value":"ElementFilter::No","parent":{"krate":0,"index":1831},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1837},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_filter.rs","byte_start":183119,"byte_end":183123,"line_start":7,"line_end":7,"column_start":5,"column_end":9},"name":"Some","qualname":"::packet_filter::ElementFilter::Some","value":"ElementFilter::Some(T)","parent":{"krate":0,"index":1831},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1831},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_filter.rs","byte_start":183079,"byte_end":183092,"line_start":4,"line_end":4,"column_start":10,"column_end":23},"name":"ElementFilter","qualname":"::packet_filter::ElementFilter","value":"pub enum ElementFilter<T> { Any, No, Some(T), }","parent":null,"children":[{"krate":0,"index":1833},{"krate":0,"index":1835},{"krate":0,"index":1837}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1858},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_filter.rs","byte_start":183195,"byte_end":183204,"line_start":12,"line_end":12,"column_start":5,"column_end":14},"name":"Ethernet2","qualname":"::packet_filter::LinkFilter::Ethernet2","value":"LinkFilter::Ethernet2 { source, destination }","parent":{"krate":0,"index":1857},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1857},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_filter.rs","byte_start":183178,"byte_end":183188,"line_start":11,"line_end":11,"column_start":10,"column_end":20},"name":"LinkFilter","qualname":"::packet_filter::LinkFilter","value":"pub enum LinkFilter {\n    Ethernet2 {\n        source: Option<[u8; ]>,\n        destination: Option<[u8; ]>,\n    },\n}","parent":null,"children":[{"krate":0,"index":1858}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1877},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_filter.rs","byte_start":183349,"byte_end":183355,"line_start":20,"line_end":20,"column_start":5,"column_end":11},"name":"Single","qualname":"::packet_filter::VlanFilter::Single","value":"VlanFilter::Single(Option<u16>)","parent":{"krate":0,"index":1876},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1880},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_filter.rs","byte_start":183374,"byte_end":183380,"line_start":21,"line_end":21,"column_start":5,"column_end":11},"name":"Double","qualname":"::packet_filter::VlanFilter::Double","value":"VlanFilter::Double { outer_identifier, inner_identifier }","parent":{"krate":0,"index":1876},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1876},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_filter.rs","byte_start":183332,"byte_end":183342,"line_start":19,"line_end":19,"column_start":10,"column_end":20},"name":"VlanFilter","qualname":"::packet_filter::VlanFilter","value":"pub enum VlanFilter {\n    Single(Option<u16>),\n    Double {\n        outer_identifier: Option<u16>,\n        inner_identifier: Option<u16>,\n    },\n}","parent":null,"children":[{"krate":0,"index":1877},{"krate":0,"index":1880}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1895},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_filter.rs","byte_start":183532,"byte_end":183536,"line_start":29,"line_end":29,"column_start":5,"column_end":9},"name":"Ipv4","qualname":"::packet_filter::IpFilter::Ipv4","value":"IpFilter::Ipv4 { source, destination }","parent":{"krate":0,"index":1894},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1900},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_filter.rs","byte_start":183618,"byte_end":183622,"line_start":33,"line_end":33,"column_start":5,"column_end":9},"name":"Ipv6","qualname":"::packet_filter::IpFilter::Ipv6","value":"IpFilter::Ipv6 { source, destination }","parent":{"krate":0,"index":1894},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1894},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_filter.rs","byte_start":183517,"byte_end":183525,"line_start":28,"line_end":28,"column_start":10,"column_end":18},"name":"IpFilter","qualname":"::packet_filter::IpFilter","value":"pub enum IpFilter {\n    Ipv4 {\n        source: Option<[u8; ]>,\n        destination: Option<[u8; ]>,\n    },\n    Ipv6 {\n        source: Option<[u8; ]>,\n        destination: Option<[u8; ]>,\n    },\n}","parent":null,"children":[{"krate":0,"index":1895},{"krate":0,"index":1900}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1921},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_filter.rs","byte_start":183774,"byte_end":183777,"line_start":41,"line_end":41,"column_start":5,"column_end":8},"name":"Udp","qualname":"::packet_filter::TransportFilter::Udp","value":"TransportFilter::Udp { source_port, destination_port }","parent":{"krate":0,"index":1920},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1924},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_filter.rs","byte_start":183863,"byte_end":183866,"line_start":45,"line_end":45,"column_start":5,"column_end":8},"name":"Tcp","qualname":"::packet_filter::TransportFilter::Tcp","value":"TransportFilter::Tcp { source_port, destination_port }","parent":{"krate":0,"index":1920},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1920},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_filter.rs","byte_start":183752,"byte_end":183767,"line_start":40,"line_end":40,"column_start":10,"column_end":25},"name":"TransportFilter","qualname":"::packet_filter::TransportFilter","value":"pub enum TransportFilter {\n    Udp {\n        source_port: Option<u16>,\n        destination_port: Option<u16>,\n    },\n    Tcp {\n        source_port: Option<u16>,\n        destination_port: Option<u16>,\n    },\n}","parent":null,"children":[{"krate":0,"index":1921},{"krate":0,"index":1924}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1938},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_filter.rs","byte_start":184009,"byte_end":184015,"line_start":52,"line_end":52,"column_start":12,"column_end":18},"name":"Filter","qualname":"::packet_filter::Filter","value":"Filter { link, vlan, ip, transport }","parent":null,"children":[{"krate":0,"index":1939},{"krate":0,"index":1940},{"krate":0,"index":1941},{"krate":0,"index":1942}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1939},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_filter.rs","byte_start":184026,"byte_end":184030,"line_start":53,"line_end":53,"column_start":9,"column_end":13},"name":"link","qualname":"::packet_filter::Filter::link","value":"packet_filter::ElementFilter<packet_filter::LinkFilter>","parent":{"krate":0,"index":1938},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1940},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_filter.rs","byte_start":184067,"byte_end":184071,"line_start":54,"line_end":54,"column_start":9,"column_end":13},"name":"vlan","qualname":"::packet_filter::Filter::vlan","value":"packet_filter::ElementFilter<packet_filter::VlanFilter>","parent":{"krate":0,"index":1938},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1941},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_filter.rs","byte_start":184108,"byte_end":184110,"line_start":55,"line_end":55,"column_start":9,"column_end":11},"name":"ip","qualname":"::packet_filter::Filter::ip","value":"packet_filter::ElementFilter<packet_filter::IpFilter>","parent":{"krate":0,"index":1938},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1942},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_filter.rs","byte_start":184145,"byte_end":184154,"line_start":56,"line_end":56,"column_start":9,"column_end":18},"name":"transport","qualname":"::packet_filter::Filter::transport","value":"packet_filter::ElementFilter<packet_filter::TransportFilter>","parent":{"krate":0,"index":1938},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":731},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_filter.rs","byte_start":184334,"byte_end":184350,"line_start":66,"line_end":66,"column_start":12,"column_end":28},"name":"applies_to_slice","qualname":"<LinkFilter>::applies_to_slice","value":"pub fn applies_to_slice(&Self, &LinkSlice) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":734},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_filter.rs","byte_start":184973,"byte_end":184989,"line_start":86,"line_end":86,"column_start":12,"column_end":28},"name":"applies_to_slice","qualname":"<VlanFilter>::applies_to_slice","value":"pub fn applies_to_slice(&Self, &VlanSlice) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":737},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_filter.rs","byte_start":186193,"byte_end":186209,"line_start":119,"line_end":119,"column_start":12,"column_end":28},"name":"applies_to_slice","qualname":"<IpFilter>::applies_to_slice","value":"pub fn applies_to_slice(&Self, &InternetSlice) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":740},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_filter.rs","byte_start":187573,"byte_end":187589,"line_start":155,"line_end":155,"column_start":12,"column_end":28},"name":"applies_to_slice","qualname":"<TransportFilter>::applies_to_slice","value":"pub fn applies_to_slice(&Self, &TransportSlice) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":743},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_filter.rs","byte_start":189202,"byte_end":189218,"line_start":198,"line_end":198,"column_start":12,"column_end":28},"name":"applies_to_slice","qualname":"<Filter>::applies_to_slice","value":"pub fn applies_to_slice(&Self, &SlicedPacket) -> bool","parent":null,"children":[],"decl_id":null,"docs":"Returns true if a given sliced network package fullfills all conditions of this filter.\n","sig":null,"attributes":[{"value":"/Returns true if a given sliced network package fullfills all conditions of this filter.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_filter.rs","byte_start":189100,"byte_end":189190,"line_start":197,"line_end":197,"column_start":5,"column_end":95}}]},{"kind":"Trait","id":{"krate":0,"index":744},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":11869,"byte_end":11883,"line_start":229,"line_end":229,"column_start":11,"column_end":25},"name":"SerializedSize","qualname":"::SerializedSize","value":"SerializedSize","parent":null,"children":[{"krate":0,"index":745}],"decl_id":null,"docs":"Contains the size when serialized.\n","sig":null,"attributes":[{"value":"/Contains the size when serialized.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":11821,"byte_end":11858,"line_start":228,"line_end":228,"column_start":1,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":745},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":11896,"byte_end":11911,"line_start":230,"line_end":230,"column_start":11,"column_end":26},"name":"SERIALIZED_SIZE","qualname":"::SerializedSize::SERIALIZED_SIZE","value":"usize","parent":{"krate":0,"index":744},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1957},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":12004,"byte_end":12011,"line_start":236,"line_end":236,"column_start":5,"column_end":12},"name":"IoError","qualname":"::ReadError::IoError","value":"ReadError::IoError(std::io::Error)","parent":{"krate":0,"index":1956},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1960},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":12178,"byte_end":12198,"line_start":238,"line_end":238,"column_start":5,"column_end":25},"name":"UnexpectedEndOfSlice","qualname":"::ReadError::UnexpectedEndOfSlice","value":"ReadError::UnexpectedEndOfSlice(usize)","parent":{"krate":0,"index":1956},"children":[],"decl_id":null,"docs":"Error when an unexpected end of a slice was reached even though more data was expected to be present (expected minimum size as argument).\n","sig":null,"attributes":[{"value":"/Error when an unexpected end of a slice was reached even though more data was expected to be present (expected minimum size as argument).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":12033,"byte_end":12173,"line_start":237,"line_end":237,"column_start":5,"column_end":145}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1963},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":12335,"byte_end":12371,"line_start":240,"line_end":240,"column_start":5,"column_end":41},"name":"VlanDoubleTaggingUnexpectedOuterTpid","qualname":"::ReadError::VlanDoubleTaggingUnexpectedOuterTpid","value":"ReadError::VlanDoubleTaggingUnexpectedOuterTpid(u16)","parent":{"krate":0,"index":1956},"children":[],"decl_id":null,"docs":"Error when a double vlan tag was expected but the tpid of the outer vlan does not contain the expected id of 0x8100.\n","sig":null,"attributes":[{"value":"/Error when a double vlan tag was expected but the tpid of the outer vlan does not contain the expected id of 0x8100.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":12211,"byte_end":12330,"line_start":239,"line_end":239,"column_start":5,"column_end":124}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1966},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":12511,"byte_end":12531,"line_start":242,"line_end":242,"column_start":5,"column_end":25},"name":"IpUnsupportedVersion","qualname":"::ReadError::IpUnsupportedVersion","value":"ReadError::IpUnsupportedVersion(u8)","parent":{"krate":0,"index":1956},"children":[],"decl_id":null,"docs":"Error when the ip header version is not supported (only 4 & 6 are supported). The value is the version that was received.\n","sig":null,"attributes":[{"value":"/Error when the ip header version is not supported (only 4 & 6 are supported). The value is the version that was received.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":12382,"byte_end":12506,"line_start":241,"line_end":241,"column_start":5,"column_end":129}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1969},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":12647,"byte_end":12668,"line_start":244,"line_end":244,"column_start":5,"column_end":26},"name":"Ipv4UnexpectedVersion","qualname":"::ReadError::Ipv4UnexpectedVersion","value":"ReadError::Ipv4UnexpectedVersion(u8)","parent":{"krate":0,"index":1956},"children":[],"decl_id":null,"docs":"Error when the ip header version field is not equal 4. The value is the version that was received.\n","sig":null,"attributes":[{"value":"/Error when the ip header version field is not equal 4. The value is the version that was received.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":12541,"byte_end":12642,"line_start":243,"line_end":243,"column_start":5,"column_end":106}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1972},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":12758,"byte_end":12777,"line_start":246,"line_end":246,"column_start":5,"column_end":24},"name":"Ipv4HeaderLengthBad","qualname":"::ReadError::Ipv4HeaderLengthBad","value":"ReadError::Ipv4HeaderLengthBad(u8)","parent":{"krate":0,"index":1956},"children":[],"decl_id":null,"docs":"Error when the ipv4 header length is smaller then the header itself (5).\n","sig":null,"attributes":[{"value":"/Error when the ipv4 header length is smaller then the header itself (5).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":12678,"byte_end":12753,"line_start":245,"line_end":245,"column_start":5,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1975},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":12871,"byte_end":12894,"line_start":248,"line_end":248,"column_start":5,"column_end":28},"name":"Ipv4TotalLengthTooSmall","qualname":"::ReadError::Ipv4TotalLengthTooSmall","value":"ReadError::Ipv4TotalLengthTooSmall(u16)","parent":{"krate":0,"index":1956},"children":[],"decl_id":null,"docs":"Error when the total length field is too small to contain the header itself.\n","sig":null,"attributes":[{"value":"/Error when the total length field is too small to contain the header itself.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":12787,"byte_end":12866,"line_start":247,"line_end":247,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1978},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":13012,"byte_end":13033,"line_start":250,"line_end":250,"column_start":5,"column_end":26},"name":"Ipv6UnexpectedVersion","qualname":"::ReadError::Ipv6UnexpectedVersion","value":"ReadError::Ipv6UnexpectedVersion(u8)","parent":{"krate":0,"index":1956},"children":[],"decl_id":null,"docs":"Error when then ip header version field is not equal 6. The value is the version that was received.\n","sig":null,"attributes":[{"value":"/Error when then ip header version field is not equal 6. The value is the version that was received.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":12905,"byte_end":13007,"line_start":249,"line_end":249,"column_start":5,"column_end":107}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1981},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":13153,"byte_end":13180,"line_start":252,"line_end":252,"column_start":5,"column_end":32},"name":"Ipv6TooManyHeaderExtensions","qualname":"::ReadError::Ipv6TooManyHeaderExtensions","value":"ReadError::Ipv6TooManyHeaderExtensions","parent":{"krate":0,"index":1956},"children":[],"decl_id":null,"docs":"Error when more then 7 header extensions are present (according to RFC82000 this should never happen).\n","sig":null,"attributes":[{"value":"/Error when more then 7 header extensions are present (according to RFC82000 this should never happen).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":13043,"byte_end":13148,"line_start":251,"line_end":251,"column_start":5,"column_end":110}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1983},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":13305,"byte_end":13326,"line_start":254,"line_end":254,"column_start":5,"column_end":26},"name":"TcpDataOffsetTooSmall","qualname":"::ReadError::TcpDataOffsetTooSmall","value":"ReadError::TcpDataOffsetTooSmall(u8)","parent":{"krate":0,"index":1956},"children":[],"decl_id":null,"docs":"Error given if the data_offset field in a TCP header is smaller then the minimum size of the tcp header itself.\n","sig":null,"attributes":[{"value":"/Error given if the data_offset field in a TCP header is smaller then the minimum size of the tcp header itself.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":13186,"byte_end":13300,"line_start":253,"line_end":253,"column_start":5,"column_end":119}}]},{"kind":"Enum","id":{"krate":0,"index":1956},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":11988,"byte_end":11997,"line_start":235,"line_end":235,"column_start":10,"column_end":19},"name":"ReadError","qualname":"::ReadError","value":"pub enum ReadError {\n    IoError(std::io::Error),\n    UnexpectedEndOfSlice(usize),\n    VlanDoubleTaggingUnexpectedOuterTpid(u16),\n    IpUnsupportedVersion(u8),\n    Ipv4UnexpectedVersion(u8),\n    Ipv4HeaderLengthBad(u8),\n    Ipv4TotalLengthTooSmall(u16),\n    Ipv6UnexpectedVersion(u8),\n    Ipv6TooManyHeaderExtensions,\n    TcpDataOffsetTooSmall(u8),\n}","parent":null,"children":[{"krate":0,"index":1957},{"krate":0,"index":1960},{"krate":0,"index":1963},{"krate":0,"index":1966},{"krate":0,"index":1969},{"krate":0,"index":1972},{"krate":0,"index":1975},{"krate":0,"index":1978},{"krate":0,"index":1981},{"krate":0,"index":1983}],"decl_id":null,"docs":"Errors that can occur when reading.\n","sig":null,"attributes":[{"value":"/Errors that can occur when reading.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":11923,"byte_end":11961,"line_start":233,"line_end":233,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":747},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":13426,"byte_end":13442,"line_start":259,"line_end":259,"column_start":12,"column_end":28},"name":"add_slice_offset","qualname":"<ReadError>::add_slice_offset","value":"pub fn add_slice_offset(Self, usize) -> ReadError","parent":null,"children":[],"decl_id":null,"docs":"Adds an offset value to the UnexpectedEndOfSlice error.\n","sig":null,"attributes":[{"value":"/Adds an offset value to the UnexpectedEndOfSlice error.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":13356,"byte_end":13414,"line_start":258,"line_end":258,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1989},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":13873,"byte_end":13880,"line_start":277,"line_end":277,"column_start":5,"column_end":12},"name":"IoError","qualname":"::WriteError::IoError","value":"WriteError::IoError(std::io::Error)","parent":{"krate":0,"index":1988},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1992},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":13951,"byte_end":13961,"line_start":279,"line_end":279,"column_start":5,"column_end":15},"name":"ValueError","qualname":"::WriteError::ValueError","value":"WriteError::ValueError(ValueError)","parent":{"krate":0,"index":1988},"children":[],"decl_id":null,"docs":"Error in the data that was given to write\n","sig":null,"attributes":[{"value":"/Error in the data that was given to write","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":13902,"byte_end":13946,"line_start":278,"line_end":278,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1995},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":14052,"byte_end":14065,"line_start":281,"line_end":281,"column_start":5,"column_end":18},"name":"SliceTooSmall","qualname":"::WriteError::SliceTooSmall","value":"WriteError::SliceTooSmall(usize)","parent":{"krate":0,"index":1988},"children":[],"decl_id":null,"docs":"Error when a given slice is not big enough to serialize the data.\n","sig":null,"attributes":[{"value":"/Error when a given slice is not big enough to serialize the data.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":13979,"byte_end":14047,"line_start":280,"line_end":280,"column_start":5,"column_end":73}}]},{"kind":"Enum","id":{"krate":0,"index":1988},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":13856,"byte_end":13866,"line_start":276,"line_end":276,"column_start":10,"column_end":20},"name":"WriteError","qualname":"::WriteError","value":"pub enum WriteError {\n    IoError(std::io::Error),\n    ValueError(ValueError),\n    SliceTooSmall(usize),\n}","parent":null,"children":[{"krate":0,"index":1989},{"krate":0,"index":1992},{"krate":0,"index":1995}],"decl_id":null,"docs":"Errors that can occur when writing.\n","sig":null,"attributes":[{"value":"/Errors that can occur when writing.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":13791,"byte_end":13829,"line_start":274,"line_end":274,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":752},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":14106,"byte_end":14117,"line_start":285,"line_end":285,"column_start":12,"column_end":23},"name":"value_error","qualname":"<WriteError>::value_error","value":"pub fn value_error(Self) -> Option<ValueError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2001},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":14626,"byte_end":14646,"line_start":303,"line_end":303,"column_start":5,"column_end":25},"name":"Ipv4OptionsLengthBad","qualname":"::ValueError::Ipv4OptionsLengthBad","value":"ValueError::Ipv4OptionsLengthBad(usize)","parent":{"krate":0,"index":2000},"children":[],"decl_id":null,"docs":"Error when the ipv4 options length is too big or not aligned (cannot be bigger then 40 bytes and must be a multiple of 4 bytes).\n","sig":null,"attributes":[{"value":"/Error when the ipv4 options length is too big or not aligned (cannot be bigger then 40 bytes and must be a multiple of 4 bytes).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":14490,"byte_end":14621,"line_start":302,"line_end":302,"column_start":5,"column_end":136}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2004},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":14767,"byte_end":14792,"line_start":305,"line_end":305,"column_start":5,"column_end":30},"name":"Ipv4PayloadLengthTooLarge","qualname":"::ValueError::Ipv4PayloadLengthTooLarge","value":"ValueError::Ipv4PayloadLengthTooLarge(usize)","parent":{"krate":0,"index":2000},"children":[],"decl_id":null,"docs":"Error when a given payload & ipv4 header is bigger then what fits inside an ipv4 total_length field.\n","sig":null,"attributes":[{"value":"/Error when a given payload & ipv4 header is bigger then what fits inside an ipv4 total_length field.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":14659,"byte_end":14762,"line_start":304,"line_end":304,"column_start":5,"column_end":108}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2007},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":14921,"byte_end":14946,"line_start":307,"line_end":307,"column_start":5,"column_end":30},"name":"Ipv6PayloadLengthTooLarge","qualname":"::ValueError::Ipv6PayloadLengthTooLarge","value":"ValueError::Ipv6PayloadLengthTooLarge(usize)","parent":{"krate":0,"index":2000},"children":[],"decl_id":null,"docs":"Error when a given payload & ipv6 header block is bigger then what fits inside an ipv6 payload_length field.\n","sig":null,"attributes":[{"value":"/Error when a given payload & ipv6 header block is bigger then what fits inside an ipv6 payload_length field.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":14805,"byte_end":14916,"line_start":306,"line_end":306,"column_start":5,"column_end":116}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2010},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":15184,"byte_end":15208,"line_start":310,"line_end":310,"column_start":5,"column_end":29},"name":"UdpPayloadLengthTooLarge","qualname":"::ValueError::UdpPayloadLengthTooLarge","value":"ValueError::UdpPayloadLengthTooLarge(usize)","parent":{"krate":0,"index":2000},"children":[],"decl_id":null,"docs":"Error when a given payload is bigger then what fits inside an udp packet\nNote that a the maximum payload size, as far as udp is conceirned, is max_value(u16) - 8. The 8 is for the size of the udp header itself.\n","sig":null,"attributes":[{"value":"/Error when a given payload is bigger then what fits inside an udp packet","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":14959,"byte_end":15034,"line_start":308,"line_end":308,"column_start":5,"column_end":80}},{"value":"/Note that a the maximum payload size, as far as udp is conceirned, is max_value(u16) - 8. The 8 is for the size of the udp header itself.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":15039,"byte_end":15179,"line_start":309,"line_end":309,"column_start":5,"column_end":145}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2013},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":15494,"byte_end":15511,"line_start":313,"line_end":313,"column_start":5,"column_end":22},"name":"TcpLengthTooLarge","qualname":"::ValueError::TcpLengthTooLarge","value":"ValueError::TcpLengthTooLarge(usize)","parent":{"krate":0,"index":2000},"children":[],"decl_id":null,"docs":"Error when a given payload + tcp header options is bigger then what fits inside an tcp packet\nNote that a the maximum size, as far as tcp is conceirned, is max_value(u16) - tcp_header.data_offset()*4. The data_offset is for the size of the udp header itself.\n","sig":null,"attributes":[{"value":"/Error when a given payload + tcp header options is bigger then what fits inside an tcp packet","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":15221,"byte_end":15317,"line_start":311,"line_end":311,"column_start":5,"column_end":101}},{"value":"/Note that a the maximum size, as far as tcp is conceirned, is max_value(u16) - tcp_header.data_offset()*4. The data_offset is for the size of the udp header itself.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":15322,"byte_end":15489,"line_start":312,"line_end":312,"column_start":5,"column_end":172}}]},{"kind":"StructVariant","id":{"krate":0,"index":2016},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":15600,"byte_end":15610,"line_start":315,"line_end":315,"column_start":5,"column_end":15},"name":"U8TooLarge","qualname":"::ValueError::U8TooLarge","value":"ValueError::U8TooLarge { value, max, field }","parent":{"krate":0,"index":2000},"children":[],"decl_id":null,"docs":"Error when a u8 field in a header has a larger value then supported.\n","sig":null,"attributes":[{"value":"/Error when a u8 field in a header has a larger value then supported.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":15524,"byte_end":15595,"line_start":314,"line_end":314,"column_start":5,"column_end":76}}]},{"kind":"StructVariant","id":{"krate":0,"index":2020},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":15732,"byte_end":15743,"line_start":317,"line_end":317,"column_start":5,"column_end":16},"name":"U16TooLarge","qualname":"::ValueError::U16TooLarge","value":"ValueError::U16TooLarge { value, max, field }","parent":{"krate":0,"index":2000},"children":[],"decl_id":null,"docs":"Error when a u16 field in a header has a larger value then supported.\n","sig":null,"attributes":[{"value":"/Error when a u16 field in a header has a larger value then supported.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":15655,"byte_end":15727,"line_start":316,"line_end":316,"column_start":5,"column_end":77}}]},{"kind":"StructVariant","id":{"krate":0,"index":2024},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":15867,"byte_end":15878,"line_start":319,"line_end":319,"column_start":5,"column_end":16},"name":"U32TooLarge","qualname":"::ValueError::U32TooLarge","value":"ValueError::U32TooLarge { value, max, field }","parent":{"krate":0,"index":2000},"children":[],"decl_id":null,"docs":"Error when a u32 field in a header has a larger value then supported.\n","sig":null,"attributes":[{"value":"/Error when a u32 field in a header has a larger value then supported.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":15790,"byte_end":15862,"line_start":318,"line_end":318,"column_start":5,"column_end":77}}]},{"kind":"Enum","id":{"krate":0,"index":2000},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":14473,"byte_end":14483,"line_start":301,"line_end":301,"column_start":10,"column_end":20},"name":"ValueError","qualname":"::ValueError","value":"pub enum ValueError {\n    Ipv4OptionsLengthBad(usize),\n    Ipv4PayloadLengthTooLarge(usize),\n    Ipv6PayloadLengthTooLarge(usize),\n    UdpPayloadLengthTooLarge(usize),\n    TcpLengthTooLarge(usize),\n    U8TooLarge {\n        value: u8,\n        max: u8,\n        field: ErrorField,\n    },\n    U16TooLarge {\n        value: u16,\n        max: u16,\n        field: ErrorField,\n    },\n    U32TooLarge {\n        value: u32,\n        max: u32,\n        field: ErrorField,\n    },\n}","parent":null,"children":[{"krate":0,"index":2001},{"krate":0,"index":2004},{"krate":0,"index":2007},{"krate":0,"index":2010},{"krate":0,"index":2013},{"krate":0,"index":2016},{"krate":0,"index":2020},{"krate":0,"index":2024}],"decl_id":null,"docs":"Errors in the given data\n","sig":null,"attributes":[{"value":"/Errors in the given data","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":14397,"byte_end":14424,"line_start":299,"line_end":299,"column_start":1,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2040},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":16173,"byte_end":16189,"line_start":331,"line_end":331,"column_start":5,"column_end":21},"name":"Ipv4HeaderLength","qualname":"::ErrorField::Ipv4HeaderLength","value":"ErrorField::Ipv4HeaderLength","parent":{"krate":0,"index":2039},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2042},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":16195,"byte_end":16212,"line_start":332,"line_end":332,"column_start":5,"column_end":22},"name":"Ipv4PayloadLength","qualname":"::ErrorField::Ipv4PayloadLength","value":"ErrorField::Ipv4PayloadLength","parent":{"krate":0,"index":2039},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2044},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":16218,"byte_end":16226,"line_start":333,"line_end":333,"column_start":5,"column_end":13},"name":"Ipv4Dscp","qualname":"::ErrorField::Ipv4Dscp","value":"ErrorField::Ipv4Dscp","parent":{"krate":0,"index":2039},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2046},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":16232,"byte_end":16239,"line_start":334,"line_end":334,"column_start":5,"column_end":12},"name":"Ipv4Ecn","qualname":"::ErrorField::Ipv4Ecn","value":"ErrorField::Ipv4Ecn","parent":{"krate":0,"index":2039},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2048},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":16245,"byte_end":16264,"line_start":335,"line_end":335,"column_start":5,"column_end":24},"name":"Ipv4FragmentsOffset","qualname":"::ErrorField::Ipv4FragmentsOffset","value":"ErrorField::Ipv4FragmentsOffset","parent":{"krate":0,"index":2039},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2050},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":16270,"byte_end":16283,"line_start":336,"line_end":336,"column_start":5,"column_end":18},"name":"Ipv6FlowLabel","qualname":"::ErrorField::Ipv6FlowLabel","value":"ErrorField::Ipv6FlowLabel","parent":{"krate":0,"index":2039},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2052},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":16334,"byte_end":16358,"line_start":338,"line_end":338,"column_start":5,"column_end":29},"name":"VlanTagPriorityCodePoint","qualname":"::ErrorField::VlanTagPriorityCodePoint","value":"ErrorField::VlanTagPriorityCodePoint","parent":{"krate":0,"index":2039},"children":[],"decl_id":null,"docs":"VlanTaggingHeader.priority_code_point\n","sig":null,"attributes":[{"value":"/VlanTaggingHeader.priority_code_point","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":16289,"byte_end":16329,"line_start":337,"line_end":337,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2054},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":16405,"byte_end":16418,"line_start":340,"line_end":340,"column_start":5,"column_end":18},"name":"VlanTagVlanId","qualname":"::ErrorField::VlanTagVlanId","value":"ErrorField::VlanTagVlanId","parent":{"krate":0,"index":2039},"children":[],"decl_id":null,"docs":"VlanTaggingHeader.vlan_identifier\n","sig":null,"attributes":[{"value":"/VlanTaggingHeader.vlan_identifier","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":16364,"byte_end":16400,"line_start":339,"line_end":339,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2056},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":16469,"byte_end":16482,"line_start":342,"line_end":342,"column_start":5,"column_end":18},"name":"TcpDataOffset","qualname":"::ErrorField::TcpDataOffset","value":"ErrorField::TcpDataOffset","parent":{"krate":0,"index":2039},"children":[],"decl_id":null,"docs":"The data offset field in a tcp header\n","sig":null,"attributes":[{"value":"/The data offset field in a tcp header","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":16424,"byte_end":16464,"line_start":341,"line_end":341,"column_start":5,"column_end":45}}]},{"kind":"Enum","id":{"krate":0,"index":2039},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":16156,"byte_end":16166,"line_start":330,"line_end":330,"column_start":10,"column_end":20},"name":"ErrorField","qualname":"::ErrorField","value":"pub enum ErrorField {\n    Ipv4HeaderLength,\n    Ipv4PayloadLength,\n    Ipv4Dscp,\n    Ipv4Ecn,\n    Ipv4FragmentsOffset,\n    Ipv6FlowLabel,\n    VlanTagPriorityCodePoint,\n    VlanTagVlanId,\n    TcpDataOffset,\n}","parent":null,"children":[{"krate":0,"index":2040},{"krate":0,"index":2042},{"krate":0,"index":2044},{"krate":0,"index":2046},{"krate":0,"index":2048},{"krate":0,"index":2050},{"krate":0,"index":2052},{"krate":0,"index":2054},{"krate":0,"index":2056}],"decl_id":null,"docs":"Fields that can produce errors when serialized.\n","sig":null,"attributes":[{"value":"/Fields that can produce errors when serialized.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":16057,"byte_end":16107,"line_start":328,"line_end":328,"column_start":1,"column_end":51}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":18172,"byte_end":18181,"line_start":20,"line_end":20,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":24}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":18934,"byte_end":18949,"line_start":45,"line_end":45,"column_start":25,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":27}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":19046,"byte_end":19061,"line_start":50,"line_end":50,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":21345,"byte_end":21365,"line_start":108,"line_end":108,"column_start":10,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":23962,"byte_end":23978,"line_start":30,"line_end":30,"column_start":25,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":75}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":24074,"byte_end":24090,"line_start":35,"line_end":35,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":26284,"byte_end":26300,"line_start":94,"line_end":94,"column_start":25,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":26396,"byte_end":26412,"line_start":99,"line_end":99,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":28093,"byte_end":28114,"line_start":146,"line_end":146,"column_start":10,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":30237,"byte_end":30258,"line_start":205,"line_end":205,"column_start":10,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":112},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":32530,"byte_end":32538,"line_start":13,"line_end":13,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":136},{"krate":0,"index":138}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":44236,"byte_end":44250,"line_start":346,"line_end":346,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":142}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":46392,"byte_end":46402,"line_start":34,"line_end":34,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":46558,"byte_end":46568,"line_start":41,"line_end":41,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":185},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":201},{"krate":0,"index":213},{"krate":0,"index":215},{"krate":0,"index":217},{"krate":0,"index":219},{"krate":0,"index":223},{"krate":0,"index":224}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":58488,"byte_end":58498,"line_start":349,"line_end":349,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":229}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":59057,"byte_end":59067,"line_start":370,"line_end":370,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":234}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":59984,"byte_end":59994,"line_start":390,"line_end":390,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":60862,"byte_end":60872,"line_start":409,"line_end":409,"column_start":23,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":61040,"byte_end":61055,"line_start":417,"line_end":417,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":240},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":263},{"krate":0,"index":264}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":67711,"byte_end":67721,"line_start":26,"line_end":26,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":289}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":67813,"byte_end":67823,"line_start":31,"line_end":31,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":294},{"krate":0,"index":302},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":308},{"krate":0,"index":310},{"krate":0,"index":316}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":76290,"byte_end":76305,"line_start":243,"line_end":243,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":320},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":335}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":80310,"byte_end":80334,"line_start":366,"line_end":366,"column_start":10,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":341},{"krate":0,"index":344},{"krate":0,"index":345}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":85500,"byte_end":85509,"line_start":19,"line_end":19,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":367},{"krate":0,"index":369},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":376},{"krate":0,"index":379},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":386},{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":395}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":93541,"byte_end":93550,"line_start":188,"line_end":188,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":398}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":93846,"byte_end":93860,"line_start":199,"line_end":199,"column_start":10,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":401},{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":98477,"byte_end":98486,"line_start":79,"line_end":79,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":436},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":448},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":456},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":469}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":116175,"byte_end":116184,"line_start":527,"line_end":527,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":474}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":117209,"byte_end":117218,"line_start":552,"line_end":552,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":477}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":118122,"byte_end":118131,"line_start":576,"line_end":576,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":479}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":119001,"byte_end":119010,"line_start":599,"line_end":599,"column_start":23,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":119176,"byte_end":119190,"line_start":607,"line_end":607,"column_start":10,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":483},{"krate":0,"index":485},{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":500},{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":508},{"krate":0,"index":509},{"krate":0,"index":510},{"krate":0,"index":511},{"krate":0,"index":514}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":131389,"byte_end":131407,"line_start":925,"line_end":925,"column_start":10,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":527},{"krate":0,"index":528}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":131757,"byte_end":131775,"line_start":937,"line_end":937,"column_start":23,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":531},{"krate":0,"index":532}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/mod.rs","byte_start":81674,"byte_end":81689,"line_start":15,"line_end":15,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":543},{"krate":0,"index":545},{"krate":0,"index":547},{"krate":0,"index":549},{"krate":0,"index":551},{"krate":0,"index":553},{"krate":0,"index":555},{"krate":0,"index":557}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":138800,"byte_end":138813,"line_start":43,"line_end":43,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":577},{"krate":0,"index":580},{"krate":0,"index":583},{"krate":0,"index":586}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":145636,"byte_end":145653,"line_start":254,"line_end":254,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":597},{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":606}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":150505,"byte_end":150522,"line_start":390,"line_end":390,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":608},{"krate":0,"index":609},{"krate":0,"index":612}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":152873,"byte_end":152890,"line_start":455,"line_end":455,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":616},{"krate":0,"index":617}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":153869,"byte_end":153886,"line_start":482,"line_end":482,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":619},{"krate":0,"index":621}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":154269,"byte_end":154286,"line_start":494,"line_end":494,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":630},{"krate":0,"index":631},{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":636}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":163268,"byte_end":163281,"line_start":16,"line_end":16,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":656},{"krate":0,"index":664}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":170357,"byte_end":170366,"line_start":17,"line_end":17,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":676}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":172576,"byte_end":172588,"line_start":71,"line_end":71,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":688},{"krate":0,"index":689}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":176004,"byte_end":176015,"line_start":159,"line_end":159,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":697},{"krate":0,"index":698},{"krate":0,"index":699},{"krate":0,"index":702},{"krate":0,"index":705},{"krate":0,"index":708},{"krate":0,"index":710},{"krate":0,"index":713},{"krate":0,"index":717},{"krate":0,"index":720},{"krate":0,"index":723}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_filter.rs","byte_start":184211,"byte_end":184224,"line_start":59,"line_end":59,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":729}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_filter.rs","byte_start":184310,"byte_end":184320,"line_start":65,"line_end":65,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":731}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_filter.rs","byte_start":184949,"byte_end":184959,"line_start":85,"line_end":85,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":734}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_filter.rs","byte_start":186171,"byte_end":186179,"line_start":118,"line_end":118,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":737}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_filter.rs","byte_start":187544,"byte_end":187559,"line_start":154,"line_end":154,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":740}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_filter.rs","byte_start":189087,"byte_end":189093,"line_start":196,"line_end":196,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":743}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":13340,"byte_end":13349,"line_start":257,"line_end":257,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":747}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":13690,"byte_end":13699,"line_start":268,"line_end":268,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":750}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":14082,"byte_end":14092,"line_start":284,"line_end":284,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":752}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":14294,"byte_end":14304,"line_start":293,"line_end":293,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":754}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":15953,"byte_end":15963,"line_start":322,"line_end":322,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":756}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":17244,"byte_end":17253,"line_start":378,"line_end":378,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":770}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":17432,"byte_end":17441,"line_start":388,"line_end":388,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":772},{"krate":0,"index":773}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":11805,"byte_end":11818,"line_start":226,"line_end":226,"column_start":9,"column_end":22},"ref_id":{"krate":0,"index":725}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":18172,"byte_end":18181,"line_start":20,"line_end":20,"column_start":6,"column_end":15},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":774},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":18934,"byte_end":18949,"line_start":45,"line_end":45,"column_start":25,"column_end":40},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":806},"to":{"krate":0,"index":744}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":19046,"byte_end":19061,"line_start":50,"line_end":50,"column_start":6,"column_end":21},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":806},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/ethernet.rs","byte_start":21345,"byte_end":21365,"line_start":108,"line_end":108,"column_start":10,"column_end":30},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":827},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":23962,"byte_end":23978,"line_start":30,"line_end":30,"column_start":25,"column_end":41},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":865},"to":{"krate":0,"index":744}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":24074,"byte_end":24090,"line_start":35,"line_end":35,"column_start":6,"column_end":22},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":865},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":26284,"byte_end":26300,"line_start":94,"line_end":94,"column_start":25,"column_end":41},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":883},"to":{"krate":0,"index":744}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":26396,"byte_end":26412,"line_start":99,"line_end":99,"column_start":6,"column_end":22},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":883},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":28093,"byte_end":28114,"line_start":146,"line_end":146,"column_start":10,"column_end":31},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":897},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/link/vlan_tagging.rs","byte_start":30237,"byte_end":30258,"line_start":205,"line_end":205,"column_start":10,"column_end":31},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":917},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":32530,"byte_end":32538,"line_start":13,"line_end":13,"column_start":6,"column_end":14},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":937},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ip.rs","byte_start":44236,"byte_end":44250,"line_start":346,"line_end":346,"column_start":6,"column_end":20},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":955},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":46392,"byte_end":46402,"line_start":34,"line_end":34,"column_start":25,"column_end":35},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1398},"to":{"krate":0,"index":744}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":46558,"byte_end":46568,"line_start":41,"line_end":41,"column_start":6,"column_end":16},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1398},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":58488,"byte_end":58498,"line_start":349,"line_end":349,"column_start":18,"column_end":28},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1398},"to":{"krate":2,"index":2803}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":59057,"byte_end":59067,"line_start":370,"line_end":370,"column_start":16,"column_end":26},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1398},"to":{"krate":2,"index":8756}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":59984,"byte_end":59994,"line_start":390,"line_end":390,"column_start":30,"column_end":40},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1398},"to":{"krate":2,"index":2480}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":60862,"byte_end":60872,"line_start":409,"line_end":409,"column_start":23,"column_end":33},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1398},"to":{"krate":2,"index":2485}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv4.rs","byte_start":61040,"byte_end":61055,"line_start":417,"line_end":417,"column_start":10,"column_end":25},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1418},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":67711,"byte_end":67721,"line_start":26,"line_end":26,"column_start":25,"column_end":35},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1438},"to":{"krate":0,"index":744}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":67813,"byte_end":67823,"line_start":31,"line_end":31,"column_start":6,"column_end":16},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1438},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":76290,"byte_end":76305,"line_start":243,"line_end":243,"column_start":10,"column_end":25},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1463},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/internet/ipv6.rs","byte_start":80310,"byte_end":80334,"line_start":366,"line_end":366,"column_start":10,"column_end":34},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1497},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":85500,"byte_end":85509,"line_start":19,"line_end":19,"column_start":6,"column_end":15},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1517},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":93541,"byte_end":93550,"line_start":188,"line_end":188,"column_start":25,"column_end":34},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1517},"to":{"krate":0,"index":744}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/udp.rs","byte_start":93846,"byte_end":93860,"line_start":199,"line_end":199,"column_start":10,"column_end":24},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1535},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":98477,"byte_end":98486,"line_start":79,"line_end":79,"column_start":6,"column_end":15},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1555},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":116175,"byte_end":116184,"line_start":527,"line_end":527,"column_start":18,"column_end":27},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1555},"to":{"krate":2,"index":2803}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":117209,"byte_end":117218,"line_start":552,"line_end":552,"column_start":16,"column_end":25},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1555},"to":{"krate":2,"index":8756}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":118122,"byte_end":118131,"line_start":576,"line_end":576,"column_start":30,"column_end":39},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1555},"to":{"krate":2,"index":2480}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":119001,"byte_end":119010,"line_start":599,"line_end":599,"column_start":23,"column_end":32},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1555},"to":{"krate":2,"index":2485}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":119176,"byte_end":119190,"line_start":607,"line_end":607,"column_start":10,"column_end":24},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1577},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":131389,"byte_end":131407,"line_start":925,"line_end":925,"column_start":10,"column_end":28},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":515},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/tcp.rs","byte_start":131757,"byte_end":131775,"line_start":937,"line_end":937,"column_start":23,"column_end":41},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":515},"to":{"krate":2,"index":7206}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/transport/mod.rs","byte_start":81674,"byte_end":81689,"line_start":15,"line_end":15,"column_start":6,"column_end":21},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1665},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":138800,"byte_end":138813,"line_start":43,"line_end":43,"column_start":6,"column_end":19},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":575},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":145636,"byte_end":145653,"line_start":254,"line_end":254,"column_start":6,"column_end":23},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":592},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":150505,"byte_end":150522,"line_start":390,"line_end":390,"column_start":6,"column_end":23},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":592},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":152873,"byte_end":152890,"line_start":455,"line_end":455,"column_start":6,"column_end":23},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":592},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":153869,"byte_end":153886,"line_start":482,"line_end":482,"column_start":6,"column_end":23},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":592},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_builder.rs","byte_start":154269,"byte_end":154286,"line_start":494,"line_end":494,"column_start":6,"column_end":23},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":592},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_decoder.rs","byte_start":163268,"byte_end":163281,"line_start":16,"line_end":16,"column_start":10,"column_end":23},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1683},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":170357,"byte_end":170366,"line_start":17,"line_end":17,"column_start":10,"column_end":19},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1729},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":172576,"byte_end":172588,"line_start":71,"line_end":71,"column_start":10,"column_end":22},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1807},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_slicing.rs","byte_start":176004,"byte_end":176015,"line_start":159,"line_end":159,"column_start":10,"column_end":21},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":690},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_filter.rs","byte_start":184211,"byte_end":184224,"line_start":59,"line_end":59,"column_start":21,"column_end":34},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1831},"to":{"krate":2,"index":2803}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_filter.rs","byte_start":184310,"byte_end":184320,"line_start":65,"line_end":65,"column_start":6,"column_end":16},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1857},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_filter.rs","byte_start":184949,"byte_end":184959,"line_start":85,"line_end":85,"column_start":6,"column_end":16},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1876},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_filter.rs","byte_start":186171,"byte_end":186179,"line_start":118,"line_end":118,"column_start":6,"column_end":14},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1894},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_filter.rs","byte_start":187544,"byte_end":187559,"line_start":154,"line_end":154,"column_start":6,"column_end":21},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1920},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/packet_filter.rs","byte_start":189087,"byte_end":189093,"line_start":196,"line_end":196,"column_start":6,"column_end":12},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1938},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":13340,"byte_end":13349,"line_start":257,"line_end":257,"column_start":6,"column_end":15},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1956},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":13690,"byte_end":13699,"line_start":268,"line_end":268,"column_start":31,"column_end":40},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1956},"to":{"krate":2,"index":2731}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":14082,"byte_end":14092,"line_start":284,"line_end":284,"column_start":6,"column_end":16},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1988},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":14294,"byte_end":14304,"line_start":293,"line_end":293,"column_start":27,"column_end":37},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1988},"to":{"krate":2,"index":2731}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":15953,"byte_end":15963,"line_start":322,"line_end":322,"column_start":31,"column_end":41},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1988},"to":{"krate":2,"index":2731}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":17244,"byte_end":17253,"line_start":378,"line_end":378,"column_start":6,"column_end":15},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":765},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/etherparse-0.8.3/src/lib.rs","byte_start":17432,"byte_end":17441,"line_start":388,"line_end":388,"column_start":19,"column_end":28},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":765},"to":{"krate":2,"index":7206}}]}