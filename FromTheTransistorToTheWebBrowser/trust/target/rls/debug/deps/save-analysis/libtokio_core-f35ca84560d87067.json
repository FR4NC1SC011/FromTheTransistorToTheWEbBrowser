{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18","program":"/home/fco/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","tokio_core","/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=f35ca84560d87067","-C","extra-filename=-f35ca84560d87067","--out-dir","/home/fco/Desktop/Projects/FromTheTransistorToTheWebBrowser/trust/target/rls/debug/deps","-L","dependency=/home/fco/Desktop/Projects/FromTheTransistorToTheWebBrowser/trust/target/rls/debug/deps","--extern","bytes=/home/fco/Desktop/Projects/FromTheTransistorToTheWebBrowser/trust/target/rls/debug/deps/libbytes-eb77e80bf29de79a.rmeta","--extern","futures=/home/fco/Desktop/Projects/FromTheTransistorToTheWebBrowser/trust/target/rls/debug/deps/libfutures-8df512f6dea0f353.rmeta","--extern","iovec=/home/fco/Desktop/Projects/FromTheTransistorToTheWebBrowser/trust/target/rls/debug/deps/libiovec-7b2dbd06b2b84d92.rmeta","--extern","log=/home/fco/Desktop/Projects/FromTheTransistorToTheWebBrowser/trust/target/rls/debug/deps/liblog-1666592c90e6faaa.rmeta","--extern","mio=/home/fco/Desktop/Projects/FromTheTransistorToTheWebBrowser/trust/target/rls/debug/deps/libmio-2a4764d898f10c97.rmeta","--extern","scoped_tls=/home/fco/Desktop/Projects/FromTheTransistorToTheWebBrowser/trust/target/rls/debug/deps/libscoped_tls-3c3e6e0fa73c5741.rmeta","--extern","tokio=/home/fco/Desktop/Projects/FromTheTransistorToTheWebBrowser/trust/target/rls/debug/deps/libtokio-12504f0df06ef4a1.rmeta","--extern","tokio_executor=/home/fco/Desktop/Projects/FromTheTransistorToTheWebBrowser/trust/target/rls/debug/deps/libtokio_executor-758ae81f4db324c7.rmeta","--extern","tokio_io=/home/fco/Desktop/Projects/FromTheTransistorToTheWebBrowser/trust/target/rls/debug/deps/libtokio_io-b233e497200e1f25.rmeta","--extern","tokio_reactor=/home/fco/Desktop/Projects/FromTheTransistorToTheWebBrowser/trust/target/rls/debug/deps/libtokio_reactor-4a3b6582f19b77d9.rmeta","--extern","tokio_timer=/home/fco/Desktop/Projects/FromTheTransistorToTheWebBrowser/trust/target/rls/debug/deps/libtokio_timer-775dd568de936a02.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/fco/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/fco/Desktop/Projects/FromTheTransistorToTheWebBrowser/trust/target/rls/debug/deps/libtokio_core-f35ca84560d87067.rmeta"},"prelude":{"crate_id":{"name":"tokio_core","disambiguator":[5112973286656107581,4202263289919663091]},"crate_root":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src","external_crates":[{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[397594041871667817,11704163070354659695]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[17044353007700780372,2918200604221815240]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[15333840167806743833,9889193056877993824]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4550415707075219492,6623162258675921486]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[8289379911494056514,13856099756999900329]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[10514502805115346386,576110030083780649]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[9878185313679130060,1975285035821961205]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[4010603182529655334,7152219772350788052]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[1807637986128902209,18379128151258407121]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[11140927657351163542,6267109750485550558]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[13809795498598848728,13320395723520943315]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[13869841232067652907,9875669357213642224]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[15533050656730733495,14669839968799848603]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[14371692877540073659,8181723439448527964]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[639541300699627395,1995254029228069844]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":16,"id":{"name":"miniz_oxide","disambiguator":[12482123824895737424,11765111494567609733]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":17,"id":{"name":"adler","disambiguator":[1169880241773671279,8605314106566979368]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":18,"id":{"name":"panic_unwind","disambiguator":[5016943468141875609,13494347935157563341]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":19,"id":{"name":"bytes","disambiguator":[1267785564410660969,10680299851187710205]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":20,"id":{"name":"byteorder","disambiguator":[13778836417791981908,11302133446922456731]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":21,"id":{"name":"iovec","disambiguator":[3369688995521827614,160705432859616185]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":22,"id":{"name":"libc","disambiguator":[9372850509452784096,13876540402038093207]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":23,"id":{"name":"futures","disambiguator":[8728058308600504016,12261545928459931359]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":24,"id":{"name":"mio","disambiguator":[7700362617750442173,13621110500420098813]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":25,"id":{"name":"net2","disambiguator":[13290641213069745227,18037759917845177867]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":26,"id":{"name":"cfg_if","disambiguator":[16922299986880566257,13884822903667121708]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":27,"id":{"name":"slab","disambiguator":[4613711353271389299,1732863240012793823]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":28,"id":{"name":"log","disambiguator":[12535251248021558843,9452037523989700257]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":29,"id":{"name":"cfg_if","disambiguator":[3051334588151808042,8832791441195491324]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":30,"id":{"name":"tokio","disambiguator":[17748448257053249591,10819715873223898504]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":31,"id":{"name":"num_cpus","disambiguator":[9683702461904402811,15052546731787431875]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":32,"id":{"name":"tokio_codec","disambiguator":[11084428773448914240,6205849994638845602]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":33,"id":{"name":"tokio_io","disambiguator":[9946975372154316144,15702577836912257593]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":34,"id":{"name":"tokio_current_thread","disambiguator":[16387655462852083295,1766620314577684768]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":35,"id":{"name":"tokio_executor","disambiguator":[11692676105314858795,18409082662524981101]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":36,"id":{"name":"crossbeam_utils","disambiguator":[894676700007078543,9461642264322997061]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":37,"id":{"name":"lazy_static","disambiguator":[15466199229247140558,14835071783094180148]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":38,"id":{"name":"tokio_fs","disambiguator":[2870281154872272874,4686107464588369057]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":39,"id":{"name":"tokio_threadpool","disambiguator":[3760423151789957159,6580502277970785392]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":40,"id":{"name":"crossbeam_deque","disambiguator":[607493991993502867,7572593445849549598]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":41,"id":{"name":"crossbeam_epoch","disambiguator":[8479336625805518589,17587970095601439155]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":42,"id":{"name":"maybe_uninit","disambiguator":[14689097939601562308,11587631465088300807]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":43,"id":{"name":"memoffset","disambiguator":[11222290751595340112,12620081343935691898]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":44,"id":{"name":"scopeguard","disambiguator":[12809663318761188287,17456442378003341401]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":45,"id":{"name":"crossbeam_queue","disambiguator":[4977256940820148560,5475944172704798720]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":46,"id":{"name":"tokio_reactor","disambiguator":[14226859624186210207,5283311737217646610]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":47,"id":{"name":"parking_lot","disambiguator":[2047713996451425676,9642555683889882548]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":48,"id":{"name":"lock_api","disambiguator":[13114407274012339631,9750803675589644260]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":49,"id":{"name":"parking_lot_core","disambiguator":[15450977722204020818,11002772391549641869]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":50,"id":{"name":"smallvec","disambiguator":[15675288844904872800,2575128399148192905]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":51,"id":{"name":"tokio_sync","disambiguator":[12165184824308419658,10193824351501806632]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":52,"id":{"name":"fnv","disambiguator":[4461609320434512228,1802300174504856814]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":53,"id":{"name":"tokio_tcp","disambiguator":[10284536223449291576,17762228068593547971]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":54,"id":{"name":"tokio_timer","disambiguator":[10657684933216531830,13133505214680150733]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":55,"id":{"name":"tokio_udp","disambiguator":[14315533148611041378,11446419341968567514]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":56,"id":{"name":"tokio_uds","disambiguator":[7130623016329057884,17830337030972785787]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":57,"id":{"name":"mio_uds","disambiguator":[701655387711604044,11283217468870716152]}},{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","num":58,"id":{"name":"scoped_tls","disambiguator":[13767694515255723800,17642439806068811516]}}],"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":0,"byte_end":3976,"line_start":1,"line_end":122,"column_start":1,"column_end":17}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":67},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":5637,"byte_end":5641,"line_start":55,"line_end":55,"column_start":22,"column_end":26},"alias_span":null,"name":"copy","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":57},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":5643,"byte_end":5647,"line_start":55,"line_end":55,"column_start":28,"column_end":32},"alias_span":null,"name":"Copy","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1529},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":5672,"byte_end":5679,"line_start":56,"line_end":56,"column_start":23,"column_end":30},"alias_span":null,"name":"EasyBuf","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":126},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":5681,"byte_end":5691,"line_start":56,"line_end":56,"column_start":32,"column_end":42},"alias_span":null,"name":"EasyBufMut","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":175},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":5693,"byte_end":5699,"line_start":56,"line_end":56,"column_start":44,"column_end":50},"alias_span":null,"name":"Framed","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":169},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":5701,"byte_end":5706,"line_start":56,"line_end":56,"column_start":52,"column_end":57},"alias_span":null,"name":"Codec","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":229},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":5731,"byte_end":5736,"line_start":57,"line_end":57,"column_start":23,"column_end":28},"alias_span":null,"name":"flush","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":226},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":5738,"byte_end":5743,"line_start":57,"line_end":57,"column_start":30,"column_end":35},"alias_span":null,"name":"Flush","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":267},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":5773,"byte_end":5783,"line_start":58,"line_end":58,"column_start":28,"column_end":38},"alias_span":null,"name":"read_exact","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":254},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":5785,"byte_end":5794,"line_start":58,"line_end":58,"column_start":40,"column_end":49},"alias_span":null,"name":"ReadExact","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":305},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":5825,"byte_end":5836,"line_start":59,"line_end":59,"column_start":29,"column_end":40},"alias_span":null,"name":"read_to_end","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":295},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":5838,"byte_end":5847,"line_start":59,"line_end":59,"column_start":42,"column_end":51},"alias_span":null,"name":"ReadToEnd","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":331},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":5871,"byte_end":5875,"line_start":60,"line_end":60,"column_start":22,"column_end":26},"alias_span":null,"name":"read","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":334},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":5877,"byte_end":5881,"line_start":60,"line_end":60,"column_start":28,"column_end":32},"alias_span":null,"name":"Read","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":376},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":5911,"byte_end":5921,"line_start":61,"line_end":61,"column_start":28,"column_end":38},"alias_span":null,"name":"read_until","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":365},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":5923,"byte_end":5932,"line_start":61,"line_end":61,"column_start":40,"column_end":49},"alias_span":null,"name":"ReadUntil","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":403},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":5957,"byte_end":5965,"line_start":62,"line_end":62,"column_start":23,"column_end":31},"alias_span":null,"name":"ReadHalf","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":406},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":5967,"byte_end":5976,"line_start":62,"line_end":62,"column_start":33,"column_end":42},"alias_span":null,"name":"WriteHalf","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":428},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":6001,"byte_end":6007,"line_start":63,"line_end":63,"column_start":23,"column_end":29},"alias_span":null,"name":"Window","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":479},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":6035,"byte_end":6044,"line_start":64,"line_end":64,"column_start":27,"column_end":36},"alias_span":null,"name":"write_all","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":466},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":6046,"byte_end":6054,"line_start":64,"line_end":64,"column_start":38,"column_end":46},"alias_span":null,"name":"WriteAll","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":674},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/mod.rs","byte_start":57653,"byte_end":57662,"line_start":9,"line_end":9,"column_start":21,"column_end":30},"alias_span":null,"name":"TcpStream","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":676},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/mod.rs","byte_start":57664,"byte_end":57676,"line_start":9,"line_end":9,"column_start":32,"column_end":44},"alias_span":null,"name":"TcpStreamNew","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":648},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/mod.rs","byte_start":57699,"byte_end":57710,"line_start":10,"line_end":10,"column_start":21,"column_end":32},"alias_span":null,"name":"TcpListener","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":650},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/mod.rs","byte_start":57712,"byte_end":57720,"line_start":10,"line_end":10,"column_start":34,"column_end":42},"alias_span":null,"name":"Incoming","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":825},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/mod.rs","byte_start":57743,"byte_end":57752,"line_start":11,"line_end":11,"column_start":21,"column_end":30},"alias_span":null,"name":"UdpSocket","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":863},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/mod.rs","byte_start":57754,"byte_end":57762,"line_start":11,"line_end":11,"column_start":32,"column_end":40},"alias_span":null,"name":"UdpCodec","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":868},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/mod.rs","byte_start":57764,"byte_end":57773,"line_start":11,"line_end":11,"column_start":42,"column_end":51},"alias_span":null,"name":"UdpFramed","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":940},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/mod.rs","byte_start":57775,"byte_end":57784,"line_start":11,"line_end":11,"column_start":53,"column_end":62},"alias_span":null,"name":"SendDgram","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":950},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/mod.rs","byte_start":57786,"byte_end":57795,"line_start":11,"line_end":11,"column_start":64,"column_end":73},"alias_span":null,"name":"RecvDgram","value":"","parent":{"krate":0,"index":577}},{"kind":"Use","ref_id":{"krate":0,"index":1159},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":112105,"byte_end":112116,"line_start":31,"line_end":31,"column_start":29,"column_end":40},"alias_span":null,"name":"PollEvented","value":"","parent":{"krate":0,"index":996}},{"kind":"Use","ref_id":{"krate":0,"index":1538},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":112206,"byte_end":112213,"line_start":33,"line_end":33,"column_start":24,"column_end":31},"alias_span":null,"name":"Timeout","value":"","parent":{"krate":0,"index":996}},{"kind":"Use","ref_id":{"krate":0,"index":1397},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":112239,"byte_end":112247,"line_start":34,"line_end":34,"column_start":25,"column_end":33},"alias_span":null,"name":"Interval","value":"","parent":{"krate":0,"index":996}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":0,"byte_end":3976,"line_start":1,"line_end":122,"column_start":1,"column_end":17},"name":"","qualname":"::","value":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":577},{"krate":0,"index":996}],"decl_id":null,"docs":" `Future`-powered I/O at the core of Tokio","sig":null,"attributes":[{"value":"/ `Future`-powered I/O at the core of Tokio","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":0,"byte_end":45,"line_start":1,"line_end":1,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":46,"byte_end":49,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ > **Note:** This crate is deprecated in favor of [Tokio](http://github.com/tokio-rs/tokio).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":50,"byte_end":145,"line_start":3,"line_end":3,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":146,"byte_end":149,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ This crate uses the `futures` crate to provide an event loop (\"reactor","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":150,"byte_end":224,"line_start":5,"line_end":5,"column_start":1,"column_end":75}},{"value":"/ core\") which can be used to drive I/O like TCP and UDP, spawned future","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":225,"byte_end":299,"line_start":6,"line_end":6,"column_start":1,"column_end":75}},{"value":"/ tasks, and other events like channels/timeouts. All asynchronous I/O is","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":300,"byte_end":375,"line_start":7,"line_end":7,"column_start":1,"column_end":76}},{"value":"/ powered by the `mio` crate.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":376,"byte_end":407,"line_start":8,"line_end":8,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":408,"byte_end":411,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ The concrete types provided in this crate are relatively bare bones but are","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":412,"byte_end":491,"line_start":10,"line_end":10,"column_start":1,"column_end":80}},{"value":"/ intended to be the essential foundation for further projects needing an","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":492,"byte_end":567,"line_start":11,"line_end":11,"column_start":1,"column_end":76}},{"value":"/ event loop. In this crate you'll find:","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":568,"byte_end":610,"line_start":12,"line_end":12,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":611,"byte_end":614,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ * TCP, both streams and listeners","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":615,"byte_end":652,"line_start":14,"line_end":14,"column_start":1,"column_end":38}},{"value":"/ * UDP sockets","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":653,"byte_end":670,"line_start":15,"line_end":15,"column_start":1,"column_end":18}},{"value":"/ * Timeouts","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":671,"byte_end":685,"line_start":16,"line_end":16,"column_start":1,"column_end":15}},{"value":"/ * An event loop to run futures","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":686,"byte_end":720,"line_start":17,"line_end":17,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":721,"byte_end":724,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ More functionality is likely to be added over time, but otherwise the crate","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":725,"byte_end":804,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ is intended to be flexible, with the `PollEvented` type accepting any","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":805,"byte_end":878,"line_start":20,"line_end":20,"column_start":1,"column_end":74}},{"value":"/ type that implements `mio::Evented`. For example, the `tokio-uds` crate","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":879,"byte_end":954,"line_start":21,"line_end":21,"column_start":1,"column_end":76}},{"value":"/ uses `PollEvented` to provide support for Unix domain sockets.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":955,"byte_end":1021,"line_start":22,"line_end":22,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":1022,"byte_end":1025,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ Some other important tasks covered by this crate are:","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":1026,"byte_end":1083,"line_start":24,"line_end":24,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":1084,"byte_end":1087,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ * The ability to spawn futures into an event loop. The `Handle` and `Remote`","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":1088,"byte_end":1168,"line_start":26,"line_end":26,"column_start":1,"column_end":81}},{"value":"/   types have a `spawn` method which allows executing a future on an event","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":1169,"byte_end":1246,"line_start":27,"line_end":27,"column_start":1,"column_end":78}},{"value":"/   loop. The `Handle::spawn` method crucially does not require the future","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":1247,"byte_end":1323,"line_start":28,"line_end":28,"column_start":1,"column_end":77}},{"value":"/   itself to be `Send`.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":1324,"byte_end":1350,"line_start":29,"line_end":29,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":1351,"byte_end":1354,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ * The `Io` trait serves as an abstraction for future crates to build on top","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":1355,"byte_end":1434,"line_start":31,"line_end":31,"column_start":1,"column_end":80}},{"value":"/   of. This packages up `Read` and `Write` functionality as well as the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":1435,"byte_end":1509,"line_start":32,"line_end":32,"column_start":1,"column_end":75}},{"value":"/   ability to poll for readiness on both ends.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":1510,"byte_end":1559,"line_start":33,"line_end":33,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":1560,"byte_end":1563,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ * All I/O is futures-aware. If any action in this crate returns \"not ready\"","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":1564,"byte_end":1643,"line_start":35,"line_end":35,"column_start":1,"column_end":80}},{"value":"/   or \"would block\", then the current future task is scheduled to receive a","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":1644,"byte_end":1722,"line_start":36,"line_end":36,"column_start":1,"column_end":79}},{"value":"/   notification when it would otherwise make progress.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":1723,"byte_end":1780,"line_start":37,"line_end":37,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":1781,"byte_end":1784,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ You can find more extensive documentation in terms of tutorials at","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":1785,"byte_end":1855,"line_start":39,"line_end":39,"column_start":1,"column_end":71}},{"value":"/ [https://tokio.rs](https://tokio.rs).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":1856,"byte_end":1897,"line_start":40,"line_end":40,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":1898,"byte_end":1901,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":1902,"byte_end":1916,"line_start":42,"line_end":42,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":1917,"byte_end":1920,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ A simple TCP echo server:","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":1921,"byte_end":1950,"line_start":44,"line_end":44,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":1951,"byte_end":1954,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":1955,"byte_end":1968,"line_start":46,"line_end":46,"column_start":1,"column_end":14}},{"value":"/ extern crate futures;","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":1969,"byte_end":1994,"line_start":47,"line_end":47,"column_start":1,"column_end":26}},{"value":"/ extern crate tokio_core;","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":1995,"byte_end":2023,"line_start":48,"line_end":48,"column_start":1,"column_end":29}},{"value":"/ extern crate tokio_io;","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":2024,"byte_end":2050,"line_start":49,"line_end":49,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":2051,"byte_end":2054,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ use futures::{Future, Stream};","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":2055,"byte_end":2089,"line_start":51,"line_end":51,"column_start":1,"column_end":35}},{"value":"/ use tokio_io::AsyncRead;","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":2090,"byte_end":2118,"line_start":52,"line_end":52,"column_start":1,"column_end":29}},{"value":"/ use tokio_io::io::copy;","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":2119,"byte_end":2146,"line_start":53,"line_end":53,"column_start":1,"column_end":28}},{"value":"/ use tokio_core::net::TcpListener;","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":2147,"byte_end":2184,"line_start":54,"line_end":54,"column_start":1,"column_end":38}},{"value":"/ use tokio_core::reactor::Core;","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":2185,"byte_end":2219,"line_start":55,"line_end":55,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":2220,"byte_end":2223,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":2224,"byte_end":2239,"line_start":57,"line_end":57,"column_start":1,"column_end":16}},{"value":"/     // Create the event loop that will drive this server","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":2240,"byte_end":2300,"line_start":58,"line_end":58,"column_start":1,"column_end":61}},{"value":"/     let mut core = Core::new().unwrap();","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":2301,"byte_end":2345,"line_start":59,"line_end":59,"column_start":1,"column_end":45}},{"value":"/     let handle = core.handle();","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":2346,"byte_end":2381,"line_start":60,"line_end":60,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":2382,"byte_end":2385,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/     // Bind the server's socket","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":2386,"byte_end":2421,"line_start":62,"line_end":62,"column_start":1,"column_end":36}},{"value":"/     let addr = \"127.0.0.1:12345\".parse().unwrap();","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":2422,"byte_end":2476,"line_start":63,"line_end":63,"column_start":1,"column_end":55}},{"value":"/     let listener = TcpListener::bind(&addr, &handle).unwrap();","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":2477,"byte_end":2543,"line_start":64,"line_end":64,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":2544,"byte_end":2547,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/     // Pull out a stream of sockets for incoming connections","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":2548,"byte_end":2612,"line_start":66,"line_end":66,"column_start":1,"column_end":65}},{"value":"/     let server = listener.incoming().for_each(|(sock, _)| {","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":2613,"byte_end":2676,"line_start":67,"line_end":67,"column_start":1,"column_end":64}},{"value":"/         // Split up the reading and writing parts of the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":2677,"byte_end":2737,"line_start":68,"line_end":68,"column_start":1,"column_end":61}},{"value":"/         // socket","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":2738,"byte_end":2759,"line_start":69,"line_end":69,"column_start":1,"column_end":22}},{"value":"/         let (reader, writer) = sock.split();","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":2760,"byte_end":2808,"line_start":70,"line_end":70,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":2809,"byte_end":2812,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/         // A future that echos the data and returns how","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":2813,"byte_end":2872,"line_start":72,"line_end":72,"column_start":1,"column_end":60}},{"value":"/         // many bytes were copied...","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":2873,"byte_end":2913,"line_start":73,"line_end":73,"column_start":1,"column_end":41}},{"value":"/         let bytes_copied = copy(reader, writer);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":2914,"byte_end":2966,"line_start":74,"line_end":74,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":2967,"byte_end":2970,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/         // ... after which we'll print what happened","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":2971,"byte_end":3027,"line_start":76,"line_end":76,"column_start":1,"column_end":57}},{"value":"/         let handle_conn = bytes_copied.map(|amt| {","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":3028,"byte_end":3082,"line_start":77,"line_end":77,"column_start":1,"column_end":55}},{"value":"/             println!(\"wrote {:?} bytes\", amt)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":3083,"byte_end":3132,"line_start":78,"line_end":78,"column_start":1,"column_end":50}},{"value":"/         }).map_err(|err| {","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":3133,"byte_end":3163,"line_start":79,"line_end":79,"column_start":1,"column_end":31}},{"value":"/             println!(\"IO error {:?}\", err)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":3164,"byte_end":3210,"line_start":80,"line_end":80,"column_start":1,"column_end":47}},{"value":"/         });","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":3211,"byte_end":3226,"line_start":81,"line_end":81,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":3227,"byte_end":3230,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/         // Spawn the future as a concurrent task","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":3231,"byte_end":3283,"line_start":83,"line_end":83,"column_start":1,"column_end":53}},{"value":"/         handle.spawn(handle_conn);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":3284,"byte_end":3322,"line_start":84,"line_end":84,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":3323,"byte_end":3326,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/         Ok(())","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":3327,"byte_end":3345,"line_start":86,"line_end":86,"column_start":1,"column_end":19}},{"value":"/     });","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":3346,"byte_end":3357,"line_start":87,"line_end":87,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":3358,"byte_end":3361,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/     // Spin up the server on the event loop","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":3362,"byte_end":3409,"line_start":89,"line_end":89,"column_start":1,"column_end":48}},{"value":"/     core.run(server).unwrap();","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":3410,"byte_end":3444,"line_start":90,"line_end":90,"column_start":1,"column_end":35}},{"value":"/ }","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":3445,"byte_end":3450,"line_start":91,"line_end":91,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":3451,"byte_end":3458,"line_start":92,"line_end":92,"column_start":1,"column_end":8}},{"value":"deny(missing_docs)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":3521,"byte_end":3543,"line_start":95,"line_end":95,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":14},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"io","qualname":"::io","value":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","parent":null,"children":[{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":39},{"krate":0,"index":77},{"krate":0,"index":208},{"krate":0,"index":236},{"krate":0,"index":277},{"krate":0,"index":312},{"krate":0,"index":344},{"krate":0,"index":383},{"krate":0,"index":424},{"krate":0,"index":448},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":493},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":500},{"krate":0,"index":503},{"krate":0,"index":506},{"krate":0,"index":509},{"krate":0,"index":510},{"krate":0,"index":513},{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":520},{"krate":0,"index":523},{"krate":0,"index":524},{"krate":0,"index":527},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":534},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":541},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":548},{"krate":0,"index":551},{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":558},{"krate":0,"index":561},{"krate":0,"index":569}],"decl_id":null,"docs":" I/O conveniences when working with primitives in `tokio-core`","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":3874,"byte_end":3886,"line_start":115,"line_end":115,"column_start":1,"column_end":13}},{"value":"/ I/O conveniences when working with primitives in `tokio-core`","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":3978,"byte_end":4043,"line_start":1,"line_end":1,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":4044,"byte_end":4047,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Contains various combinators to work with I/O objects and type definitions","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":4048,"byte_end":4126,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ as well.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":4127,"byte_end":4139,"line_start":4,"line_end":4,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":4140,"byte_end":4143,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ A description of the high-level I/O combinators can be [found online] in","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":4144,"byte_end":4220,"line_start":6,"line_end":6,"column_start":1,"column_end":77}},{"value":"/ addition to a description of the [low level details].","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":4221,"byte_end":4278,"line_start":7,"line_end":7,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":4279,"byte_end":4282,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [found online]: https://tokio.rs/docs/getting-started/core/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":4283,"byte_end":4346,"line_start":9,"line_end":9,"column_start":1,"column_end":64}},{"value":"/ [low level details]: https://tokio.rs/docs/going-deeper-tokio/core-low-level/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":4347,"byte_end":4428,"line_start":10,"line_end":10,"column_start":1,"column_end":82}},{"value":"deprecated(note = \"moved to the `tokio-io` crate\")","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":4430,"byte_end":4484,"line_start":12,"line_end":12,"column_start":1,"column_end":55}},{"value":"allow(deprecated)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":4485,"byte_end":4506,"line_start":13,"line_end":13,"column_start":1,"column_end":22}}]},{"kind":"Type","id":{"krate":0,"index":34},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":4723,"byte_end":4731,"line_start":23,"line_end":23,"column_start":10,"column_end":18},"name":"IoFuture","qualname":"::io::IoFuture","value":"BoxFuture<T, io::Error>","parent":null,"children":[],"decl_id":null,"docs":" A convenience typedef around a `Future` whose error component is `io::Error`\n","sig":null,"attributes":[{"value":"/ A convenience typedef around a `Future` whose error component is `io::Error`","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":4633,"byte_end":4713,"line_start":22,"line_end":22,"column_start":1,"column_end":81}}]},{"kind":"Type","id":{"krate":0,"index":36},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":4853,"byte_end":4861,"line_start":26,"line_end":26,"column_start":10,"column_end":18},"name":"IoStream","qualname":"::io::IoStream","value":"BoxStream<T, io::Error>","parent":null,"children":[],"decl_id":null,"docs":" A convenience typedef around a `Stream` whose error component is `io::Error`\n","sig":null,"attributes":[{"value":"/ A convenience typedef around a `Stream` whose error component is `io::Error`","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":4763,"byte_end":4843,"line_start":25,"line_end":25,"column_start":1,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":57},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/copy.rs","byte_start":14545,"byte_end":14549,"line_start":12,"line_end":12,"column_start":12,"column_end":16},"name":"Copy","qualname":"::io::copy::Copy","value":"Copy {  }","parent":null,"children":[{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66}],"decl_id":null,"docs":" A future which will copy all data from a reader into a writer.","sig":null,"attributes":[{"value":"/ A future which will copy all data from a reader into a writer.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/copy.rs","byte_start":14258,"byte_end":14324,"line_start":5,"line_end":5,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/copy.rs","byte_start":14325,"byte_end":14328,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Created by the [`copy`] function, this future will resolve to the number of","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/copy.rs","byte_start":14329,"byte_end":14408,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/ bytes copied or an error if one happens.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/copy.rs","byte_start":14409,"byte_end":14453,"line_start":8,"line_end":8,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/copy.rs","byte_start":14454,"byte_end":14457,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`copy`]: fn.copy.html","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/copy.rs","byte_start":14458,"byte_end":14484,"line_start":10,"line_end":10,"column_start":1,"column_end":27}},{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/copy.rs","byte_start":14485,"byte_end":14533,"line_start":11,"line_end":11,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":67},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/copy.rs","byte_start":15201,"byte_end":15205,"line_start":33,"line_end":33,"column_start":8,"column_end":12},"name":"copy","qualname":"::io::copy::copy","value":"pub fn copy<R, W>(R, W) -> Copy<R, W> where R: Read, W: Write","parent":null,"children":[],"decl_id":null,"docs":" Creates a future which represents copying all the bytes from one object to\n another.","sig":null,"attributes":[{"value":"/ Creates a future which represents copying all the bytes from one object to","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/copy.rs","byte_start":14678,"byte_end":14756,"line_start":22,"line_end":22,"column_start":1,"column_end":79}},{"value":"/ another.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/copy.rs","byte_start":14757,"byte_end":14769,"line_start":23,"line_end":23,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/copy.rs","byte_start":14770,"byte_end":14773,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ The returned future will copy all the bytes read from `reader` into the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/copy.rs","byte_start":14774,"byte_end":14849,"line_start":25,"line_end":25,"column_start":1,"column_end":76}},{"value":"/ `writer` specified. This future will only complete once the `reader` has hit","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/copy.rs","byte_start":14850,"byte_end":14930,"line_start":26,"line_end":26,"column_start":1,"column_end":81}},{"value":"/ EOF and all bytes have been written to and flushed from the `writer`","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/copy.rs","byte_start":14931,"byte_end":15003,"line_start":27,"line_end":27,"column_start":1,"column_end":73}},{"value":"/ provided.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/copy.rs","byte_start":15004,"byte_end":15017,"line_start":28,"line_end":28,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/copy.rs","byte_start":15018,"byte_end":15021,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ On success the number of bytes is returned and the `reader` and `writer` are","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/copy.rs","byte_start":15022,"byte_end":15102,"line_start":30,"line_end":30,"column_start":1,"column_end":81}},{"value":"/ consumed. On error the error is returned and the I/O objects are consumed as","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/copy.rs","byte_start":15103,"byte_end":15183,"line_start":31,"line_end":31,"column_start":1,"column_end":81}},{"value":"/ well.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/copy.rs","byte_start":15184,"byte_end":15193,"line_start":32,"line_end":32,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":1529},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":17287,"byte_end":17294,"line_start":22,"line_end":22,"column_start":12,"column_end":19},"name":"EasyBuf","qualname":"::io::frame::EasyBuf","value":"EasyBuf {  }","parent":null,"children":[{"krate":0,"index":1530},{"krate":0,"index":1531},{"krate":0,"index":1532}],"decl_id":null,"docs":" A reference counted buffer of bytes.","sig":null,"attributes":[{"value":"/ A reference counted buffer of bytes.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":16935,"byte_end":16975,"line_start":15,"line_end":15,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":16976,"byte_end":16979,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ An `EasyBuf` is a representation of a byte buffer where sub-slices of it can","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":16980,"byte_end":17060,"line_start":17,"line_end":17,"column_start":1,"column_end":81}},{"value":"/ be handed out efficiently, each with a `'static` lifetime which keeps the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":17061,"byte_end":17138,"line_start":18,"line_end":18,"column_start":1,"column_end":78}},{"value":"/ data alive. The buffer also supports mutation but may require bytes to be","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":17139,"byte_end":17216,"line_start":19,"line_end":19,"column_start":1,"column_end":78}},{"value":"/ copied to complete the operation.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":17217,"byte_end":17254,"line_start":20,"line_end":20,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":126},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":17474,"byte_end":17484,"line_start":30,"line_end":30,"column_start":12,"column_end":22},"name":"EasyBufMut","qualname":"::io::frame::EasyBufMut","value":"EasyBufMut {  }","parent":null,"children":[{"krate":0,"index":128},{"krate":0,"index":129}],"decl_id":null,"docs":" An RAII object returned from `get_mut` which provides mutable access to the\n underlying `Vec<u8>`.\n","sig":null,"attributes":[{"value":"/ An RAII object returned from `get_mut` which provides mutable access to the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":17357,"byte_end":17436,"line_start":28,"line_end":28,"column_start":1,"column_end":80}},{"value":"/ underlying `Vec<u8>`.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":17437,"byte_end":17462,"line_start":29,"line_end":29,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":17639,"byte_end":17642,"line_start":37,"line_end":37,"column_start":12,"column_end":15},"name":"new","qualname":"<EasyBuf>::new","value":"pub fn new() -> EasyBuf","parent":null,"children":[],"decl_id":null,"docs":" Creates a new EasyBuf with no data and the default capacity.\n","sig":null,"attributes":[{"value":"/ Creates a new EasyBuf with no data and the default capacity.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":17563,"byte_end":17627,"line_start":36,"line_end":36,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":17776,"byte_end":17789,"line_start":42,"line_end":42,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<EasyBuf>::with_capacity","value":"pub fn with_capacity(usize) -> EasyBuf","parent":null,"children":[],"decl_id":null,"docs":" Creates a new EasyBuf with `cap` capacity.\n","sig":null,"attributes":[{"value":"/ Creates a new EasyBuf with `cap` capacity.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":17718,"byte_end":17764,"line_start":41,"line_end":41,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":19060,"byte_end":19063,"line_start":81,"line_end":81,"column_start":12,"column_end":15},"name":"len","qualname":"<EasyBuf>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes contained in this `EasyBuf`.\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes contained in this `EasyBuf`.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":18988,"byte_end":19048,"line_start":80,"line_end":80,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":19195,"byte_end":19203,"line_start":86,"line_end":86,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<EasyBuf>::as_slice","value":"pub fn as_slice(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the inner contents of this `EasyBuf` as a slice.\n","sig":null,"attributes":[{"value":"/ Returns the inner contents of this `EasyBuf` as a slice.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":19123,"byte_end":19183,"line_start":85,"line_end":85,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":19622,"byte_end":19631,"line_start":101,"line_end":101,"column_start":12,"column_end":21},"name":"split_off","qualname":"<EasyBuf>::split_off","value":"pub fn split_off(&mut Self, usize) -> EasyBuf","parent":null,"children":[],"decl_id":null,"docs":" Splits the buffer into two at the given index.","sig":null,"attributes":[{"value":"/ Splits the buffer into two at the given index.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":19255,"byte_end":19305,"line_start":90,"line_end":90,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":19310,"byte_end":19313,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ Afterwards `self` contains elements `[0, at)`, and the returned `EasyBuf`","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":19318,"byte_end":19395,"line_start":92,"line_end":92,"column_start":5,"column_end":82}},{"value":"/ contains elements `[at, len)`.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":19400,"byte_end":19434,"line_start":93,"line_end":93,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":19439,"byte_end":19442,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ This is an O(1) operation that just increases the reference count and","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":19447,"byte_end":19520,"line_start":95,"line_end":95,"column_start":5,"column_end":78}},{"value":"/ sets a few indexes.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":19525,"byte_end":19548,"line_start":96,"line_end":96,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":19553,"byte_end":19556,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":19561,"byte_end":19573,"line_start":98,"line_end":98,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":19578,"byte_end":19581,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ Panics if `at > len`","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":19586,"byte_end":19610,"line_start":100,"line_end":100,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":20226,"byte_end":20234,"line_start":120,"line_end":120,"column_start":12,"column_end":20},"name":"drain_to","qualname":"<EasyBuf>::drain_to","value":"pub fn drain_to(&mut Self, usize) -> EasyBuf","parent":null,"children":[],"decl_id":null,"docs":" Splits the buffer into two at the given index.","sig":null,"attributes":[{"value":"/ Splits the buffer into two at the given index.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":19859,"byte_end":19909,"line_start":109,"line_end":109,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":19914,"byte_end":19917,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ Afterwards `self` contains elements `[at, len)`, and the returned `EasyBuf`","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":19922,"byte_end":20001,"line_start":111,"line_end":111,"column_start":5,"column_end":84}},{"value":"/ contains elements `[0, at)`.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":20006,"byte_end":20038,"line_start":112,"line_end":112,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":20043,"byte_end":20046,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ This is an O(1) operation that just increases the reference count and","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":20051,"byte_end":20124,"line_start":114,"line_end":114,"column_start":5,"column_end":78}},{"value":"/ sets a few indexes.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":20129,"byte_end":20152,"line_start":115,"line_end":115,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":20157,"byte_end":20160,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":20165,"byte_end":20177,"line_start":117,"line_end":117,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":20182,"byte_end":20185,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ Panics if `at > len`","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":20190,"byte_end":20214,"line_start":119,"line_end":119,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":21219,"byte_end":21226,"line_start":142,"line_end":142,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<EasyBuf>::get_mut","value":"pub fn get_mut(&mut Self) -> EasyBufMut","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying growable buffer of bytes.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying growable buffer of bytes.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":20462,"byte_end":20537,"line_start":128,"line_end":128,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":20542,"byte_end":20545,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ If this `EasyBuf` is the only instance pointing at the underlying buffer","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":20550,"byte_end":20626,"line_start":130,"line_end":130,"column_start":5,"column_end":81}},{"value":"/ of bytes, a direct mutable reference will be returned. Otherwise the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":20631,"byte_end":20703,"line_start":131,"line_end":131,"column_start":5,"column_end":77}},{"value":"/ contents of this `EasyBuf` will be reallocated in a fresh `Vec<u8>`","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":20708,"byte_end":20779,"line_start":132,"line_end":132,"column_start":5,"column_end":76}},{"value":"/ allocation with the same capacity as an `EasyBuf` created with `EasyBuf::new()`,","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":20784,"byte_end":20868,"line_start":133,"line_end":133,"column_start":5,"column_end":89}},{"value":"/ and that allocation will be returned.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":20873,"byte_end":20914,"line_start":134,"line_end":134,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":20919,"byte_end":20922,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ This operation **is not O(1)** as it may clone the entire contents of","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":20927,"byte_end":21000,"line_start":136,"line_end":136,"column_start":5,"column_end":78}},{"value":"/ this buffer.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":21005,"byte_end":21021,"line_start":137,"line_end":137,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":21026,"byte_end":21029,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ The returned `EasyBufMut` type implement `Deref` and `DerefMut` to","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":21034,"byte_end":21104,"line_start":139,"line_end":139,"column_start":5,"column_end":75}},{"value":"/ `Vec<u8>` can the byte buffer can be manipulated using the standard","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":21109,"byte_end":21180,"line_start":140,"line_end":140,"column_start":5,"column_end":76}},{"value":"/ `Vec<u8>` methods.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":21185,"byte_end":21207,"line_start":141,"line_end":141,"column_start":5,"column_end":27}}]},{"kind":"Trait","id":{"krate":0,"index":169},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":24650,"byte_end":24655,"line_start":258,"line_end":258,"column_start":11,"column_end":16},"name":"Codec","qualname":"::io::frame::Codec","value":"Codec","parent":null,"children":[{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174}],"decl_id":null,"docs":" Encoding and decoding of frames via buffers.","sig":null,"attributes":[{"value":"/ Encoding and decoding of frames via buffers.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":24032,"byte_end":24080,"line_start":247,"line_end":247,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":24081,"byte_end":24084,"line_start":248,"line_end":248,"column_start":1,"column_end":4}},{"value":"/ This trait is used when constructing an instance of `Framed`. It provides","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":24085,"byte_end":24162,"line_start":249,"line_end":249,"column_start":1,"column_end":78}},{"value":"/ two types: `In`, for decoded input frames, and `Out`, for outgoing frames","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":24163,"byte_end":24240,"line_start":250,"line_end":250,"column_start":1,"column_end":78}},{"value":"/ that need to be encoded. It also provides methods to actually perform the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":24241,"byte_end":24318,"line_start":251,"line_end":251,"column_start":1,"column_end":78}},{"value":"/ encoding and decoding, which work with corresponding buffer types.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":24319,"byte_end":24389,"line_start":252,"line_end":252,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":24390,"byte_end":24393,"line_start":253,"line_end":253,"column_start":1,"column_end":4}},{"value":"/ The trait itself is implemented on a type that can track state for decoding","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":24394,"byte_end":24473,"line_start":254,"line_end":254,"column_start":1,"column_end":80}},{"value":"/ or encoding, which is particularly useful for streaming parsers. In many","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":24474,"byte_end":24550,"line_start":255,"line_end":255,"column_start":1,"column_end":77}},{"value":"/ cases, though, this type will simply be a unit struct (e.g. `struct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":24551,"byte_end":24622,"line_start":256,"line_end":256,"column_start":1,"column_end":72}},{"value":"/ HttpCodec`).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":24623,"byte_end":24639,"line_start":257,"line_end":257,"column_start":1,"column_end":17}}]},{"kind":"Type","id":{"krate":0,"index":170},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":24703,"byte_end":24705,"line_start":260,"line_end":260,"column_start":10,"column_end":12},"name":"In","qualname":"::io::frame::Codec::In","value":"type In;","parent":{"krate":0,"index":169},"children":[],"decl_id":null,"docs":" The type of decoded frames.\n","sig":null,"attributes":[{"value":"/ The type of decoded frames.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":24662,"byte_end":24693,"line_start":259,"line_end":259,"column_start":5,"column_end":36}}]},{"kind":"Type","id":{"krate":0,"index":171},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":24759,"byte_end":24762,"line_start":263,"line_end":263,"column_start":10,"column_end":13},"name":"Out","qualname":"::io::frame::Codec::Out","value":"type Out;","parent":{"krate":0,"index":169},"children":[],"decl_id":null,"docs":" The type of frames to be encoded.\n","sig":null,"attributes":[{"value":"/ The type of frames to be encoded.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":24712,"byte_end":24749,"line_start":262,"line_end":262,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":25908,"byte_end":25914,"line_start":285,"line_end":285,"column_start":8,"column_end":14},"name":"decode","qualname":"::io::frame::Codec::decode","value":"pub fn decode(&mut Self, &mut EasyBuf) -> io::Result<Option<Self::In>>","parent":{"krate":0,"index":169},"children":[],"decl_id":null,"docs":" Attempts to decode a frame from the provided buffer of bytes.","sig":null,"attributes":[{"value":"/ Attempts to decode a frame from the provided buffer of bytes.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":24769,"byte_end":24834,"line_start":265,"line_end":265,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":24839,"byte_end":24842,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ This method is called by `Framed` whenever bytes are ready to be parsed.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":24847,"byte_end":24923,"line_start":267,"line_end":267,"column_start":5,"column_end":81}},{"value":"/ The provided buffer of bytes is what's been read so far, and this","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":24928,"byte_end":24997,"line_start":268,"line_end":268,"column_start":5,"column_end":74}},{"value":"/ instance of `Decode` can determine whether an entire frame is in the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":25002,"byte_end":25074,"line_start":269,"line_end":269,"column_start":5,"column_end":77}},{"value":"/ buffer and is ready to be returned.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":25079,"byte_end":25118,"line_start":270,"line_end":270,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":25123,"byte_end":25126,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ If an entire frame is available, then this instance will remove those","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":25131,"byte_end":25204,"line_start":272,"line_end":272,"column_start":5,"column_end":78}},{"value":"/ bytes from the buffer provided and return them as a decoded","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":25209,"byte_end":25272,"line_start":273,"line_end":273,"column_start":5,"column_end":68}},{"value":"/ frame. Note that removing bytes from the provided buffer doesn't always","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":25277,"byte_end":25352,"line_start":274,"line_end":274,"column_start":5,"column_end":80}},{"value":"/ necessarily copy the bytes, so this should be an efficient operation in","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":25357,"byte_end":25432,"line_start":275,"line_end":275,"column_start":5,"column_end":80}},{"value":"/ most circumstances.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":25437,"byte_end":25460,"line_start":276,"line_end":276,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":25465,"byte_end":25468,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ If the bytes look valid, but a frame isn't fully available yet, then","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":25473,"byte_end":25545,"line_start":278,"line_end":278,"column_start":5,"column_end":77}},{"value":"/ `Ok(None)` is returned. This indicates to the `Framed` instance that","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":25550,"byte_end":25622,"line_start":279,"line_end":279,"column_start":5,"column_end":77}},{"value":"/ it needs to read some more bytes before calling this method again.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":25627,"byte_end":25697,"line_start":280,"line_end":280,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":25702,"byte_end":25705,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ Finally, if the bytes in the buffer are malformed then an error is","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":25710,"byte_end":25780,"line_start":282,"line_end":282,"column_start":5,"column_end":75}},{"value":"/ returned indicating why. This informs `Framed` that the stream is now","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":25785,"byte_end":25858,"line_start":283,"line_end":283,"column_start":5,"column_end":78}},{"value":"/ corrupt and should be terminated.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":25863,"byte_end":25900,"line_start":284,"line_end":284,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":26348,"byte_end":26358,"line_start":293,"line_end":293,"column_start":8,"column_end":18},"name":"decode_eof","qualname":"::io::frame::Codec::decode_eof","value":"pub fn decode_eof(&mut Self, &mut EasyBuf) -> io::Result<Self::In>","parent":{"krate":0,"index":169},"children":[],"decl_id":null,"docs":" A default method available to be called when there are no more bytes\n available to be read from the underlying I/O.","sig":null,"attributes":[{"value":"/ A default method available to be called when there are no more bytes","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":25983,"byte_end":26055,"line_start":287,"line_end":287,"column_start":5,"column_end":77}},{"value":"/ available to be read from the underlying I/O.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":26060,"byte_end":26109,"line_start":288,"line_end":288,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":26114,"byte_end":26117,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ This method defaults to calling `decode` and returns an error if","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":26122,"byte_end":26190,"line_start":290,"line_end":290,"column_start":5,"column_end":73}},{"value":"/ `Ok(None)` is returned. Typically this doesn't need to be implemented","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":26195,"byte_end":26268,"line_start":291,"line_end":291,"column_start":5,"column_end":78}},{"value":"/ unless the framing protocol differs near the end of the stream.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":26273,"byte_end":26340,"line_start":292,"line_end":292,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":26904,"byte_end":26910,"line_start":306,"line_end":306,"column_start":8,"column_end":14},"name":"encode","qualname":"::io::frame::Codec::encode","value":"pub fn encode(&mut Self, Self::Out, &mut Vec<u8>) -> io::Result<()>","parent":{"krate":0,"index":169},"children":[],"decl_id":null,"docs":" Encodes a frame into the buffer provided.","sig":null,"attributes":[{"value":"/ Encodes a frame into the buffer provided.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":26644,"byte_end":26689,"line_start":301,"line_end":301,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":26694,"byte_end":26697,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ This method will encode `msg` into the byte buffer provided by `buf`.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":26702,"byte_end":26775,"line_start":303,"line_end":303,"column_start":5,"column_end":78}},{"value":"/ The `buf` provided is an internal buffer of the `Framed` instance and","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":26780,"byte_end":26853,"line_start":304,"line_end":304,"column_start":5,"column_end":78}},{"value":"/ will be written out when possible.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":26858,"byte_end":26896,"line_start":305,"line_end":305,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":175},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":27249,"byte_end":27255,"line_start":314,"line_end":314,"column_start":12,"column_end":18},"name":"Framed","qualname":"::io::frame::Framed","value":"Framed {  }","parent":null,"children":[{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183}],"decl_id":null,"docs":" A unified `Stream` and `Sink` interface to an underlying `Io` object, using\n the `Codec` trait to encode and decode frames.","sig":null,"attributes":[{"value":"/ A unified `Stream` and `Sink` interface to an underlying `Io` object, using","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":26979,"byte_end":27058,"line_start":309,"line_end":309,"column_start":1,"column_end":80}},{"value":"/ the `Codec` trait to encode and decode frames.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":27059,"byte_end":27109,"line_start":310,"line_end":310,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":27110,"byte_end":27113,"line_start":311,"line_end":311,"column_start":1,"column_end":4}},{"value":"/ You can acquire a `Framed` instance by using the `Io::framed` adapter.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":27114,"byte_end":27188,"line_start":312,"line_end":312,"column_start":1,"column_end":75}},{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":27189,"byte_end":27237,"line_start":313,"line_end":313,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":31203,"byte_end":31210,"line_start":433,"line_end":433,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Framed<T, C>>::get_ref","value":"pub fn get_ref(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying I/O stream wrapped by `Framed`.","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying I/O stream wrapped by `Framed`.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":30928,"byte_end":31001,"line_start":428,"line_end":428,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":31006,"byte_end":31009,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ Note that care should be taken to not tamper with the underlying stream","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":31014,"byte_end":31089,"line_start":430,"line_end":430,"column_start":5,"column_end":80}},{"value":"/ of data coming in as it may corrupt the stream of frames otherwise being","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":31094,"byte_end":31170,"line_start":431,"line_end":431,"column_start":5,"column_end":81}},{"value":"/ worked with.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":31175,"byte_end":31191,"line_start":432,"line_end":432,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":31551,"byte_end":31558,"line_start":443,"line_end":443,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Framed<T, C>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying I/O stream wrapped by\n `Framed`.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying I/O stream wrapped by","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":31260,"byte_end":31331,"line_start":437,"line_end":437,"column_start":5,"column_end":76}},{"value":"/ `Framed`.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":31336,"byte_end":31349,"line_start":438,"line_end":438,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":31354,"byte_end":31357,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ Note that care should be taken to not tamper with the underlying stream","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":31362,"byte_end":31437,"line_start":440,"line_end":440,"column_start":5,"column_end":80}},{"value":"/ of data coming in as it may corrupt the stream of frames otherwise being","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":31442,"byte_end":31518,"line_start":441,"line_end":441,"column_start":5,"column_end":81}},{"value":"/ worked with.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":31523,"byte_end":31539,"line_start":442,"line_end":442,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":31885,"byte_end":31895,"line_start":452,"line_end":452,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Framed<T, C>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `Framed`, returning its underlying I/O stream.","sig":null,"attributes":[{"value":"/ Consumes the `Framed`, returning its underlying I/O stream.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":31620,"byte_end":31683,"line_start":447,"line_end":447,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":31688,"byte_end":31691,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ Note that care should be taken to not tamper with the underlying stream","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":31696,"byte_end":31771,"line_start":449,"line_end":449,"column_start":5,"column_end":80}},{"value":"/ of data coming in as it may corrupt the stream of frames otherwise being","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":31776,"byte_end":31852,"line_start":450,"line_end":450,"column_start":5,"column_end":81}},{"value":"/ worked with.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":31857,"byte_end":31873,"line_start":451,"line_end":451,"column_start":5,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":226},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/flush.rs","byte_start":36887,"byte_end":36892,"line_start":13,"line_end":13,"column_start":12,"column_end":17},"name":"Flush","qualname":"::io::flush::Flush","value":"Flush {  }","parent":null,"children":[{"krate":0,"index":228}],"decl_id":null,"docs":" A future used to fully flush an I/O object.","sig":null,"attributes":[{"value":"/ A future used to fully flush an I/O object.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/flush.rs","byte_start":36619,"byte_end":36666,"line_start":5,"line_end":5,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/flush.rs","byte_start":36667,"byte_end":36670,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Resolves to the underlying I/O object once the flush operation is complete.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/flush.rs","byte_start":36671,"byte_end":36750,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/flush.rs","byte_start":36751,"byte_end":36754,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Created by the [`flush`] function.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/flush.rs","byte_start":36755,"byte_end":36793,"line_start":9,"line_end":9,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/flush.rs","byte_start":36794,"byte_end":36797,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`flush`]: fn.flush.html","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/flush.rs","byte_start":36798,"byte_end":36826,"line_start":11,"line_end":11,"column_start":1,"column_end":29}},{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/flush.rs","byte_start":36827,"byte_end":36875,"line_start":12,"line_end":12,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":229},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/flush.rs","byte_start":37237,"byte_end":37242,"line_start":23,"line_end":23,"column_start":8,"column_end":13},"name":"flush","qualname":"::io::flush::flush","value":"pub fn flush<A>(A) -> Flush<A> where A: Write","parent":null,"children":[],"decl_id":null,"docs":" Creates a future which will entirely flush an I/O object and then yield the\n object itself.","sig":null,"attributes":[{"value":"/ Creates a future which will entirely flush an I/O object and then yield the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/flush.rs","byte_start":36919,"byte_end":36998,"line_start":17,"line_end":17,"column_start":1,"column_end":80}},{"value":"/ object itself.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/flush.rs","byte_start":36999,"byte_end":37017,"line_start":18,"line_end":18,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/flush.rs","byte_start":37018,"byte_end":37021,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This function will consume the object provided if an error happens, and","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/flush.rs","byte_start":37022,"byte_end":37097,"line_start":20,"line_end":20,"column_start":1,"column_end":76}},{"value":"/ otherwise it will repeatedly call `flush` until it sees `Ok(())`, scheduling","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/flush.rs","byte_start":37098,"byte_end":37178,"line_start":21,"line_end":21,"column_start":1,"column_end":81}},{"value":"/ a retry if `WouldBlock` is seen along the way.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/flush.rs","byte_start":37179,"byte_end":37229,"line_start":22,"line_end":22,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":254},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_exact.rs","byte_start":37894,"byte_end":37903,"line_start":13,"line_end":13,"column_start":12,"column_end":21},"name":"ReadExact","qualname":"::io::read_exact::ReadExact","value":"ReadExact {  }","parent":null,"children":[{"krate":0,"index":257}],"decl_id":null,"docs":" A future which can be used to easily read exactly enough bytes to fill\n a buffer.","sig":null,"attributes":[{"value":"/ A future which can be used to easily read exactly enough bytes to fill","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_exact.rs","byte_start":37654,"byte_end":37728,"line_start":6,"line_end":6,"column_start":1,"column_end":75}},{"value":"/ a buffer.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_exact.rs","byte_start":37729,"byte_end":37742,"line_start":7,"line_end":7,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_exact.rs","byte_start":37743,"byte_end":37746,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Created by the [`read_exact`] function.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_exact.rs","byte_start":37747,"byte_end":37790,"line_start":9,"line_end":9,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_exact.rs","byte_start":37791,"byte_end":37794,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`read_exact`]: fn.read_exact.html","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_exact.rs","byte_start":37795,"byte_end":37833,"line_start":11,"line_end":11,"column_start":1,"column_end":39}},{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_exact.rs","byte_start":37834,"byte_end":37882,"line_start":12,"line_end":12,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":267},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_exact.rs","byte_start":38553,"byte_end":38563,"line_start":36,"line_end":36,"column_start":8,"column_end":18},"name":"read_exact","qualname":"::io::read_exact::read_exact","value":"pub fn read_exact<A, T>(A, T) -> ReadExact<A, T> where A: Read, T: AsMut<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Creates a future which will read exactly enough bytes to fill `buf`,\n returning an error if EOF is hit sooner.","sig":null,"attributes":[{"value":"/ Creates a future which will read exactly enough bytes to fill `buf`,","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_exact.rs","byte_start":38043,"byte_end":38115,"line_start":26,"line_end":26,"column_start":1,"column_end":73}},{"value":"/ returning an error if EOF is hit sooner.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_exact.rs","byte_start":38116,"byte_end":38160,"line_start":27,"line_end":27,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_exact.rs","byte_start":38161,"byte_end":38164,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ The returned future will resolve to both the I/O stream as well as the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_exact.rs","byte_start":38165,"byte_end":38239,"line_start":29,"line_end":29,"column_start":1,"column_end":75}},{"value":"/ buffer once the read operation is completed.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_exact.rs","byte_start":38240,"byte_end":38288,"line_start":30,"line_end":30,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_exact.rs","byte_start":38289,"byte_end":38292,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ In the case of an error the buffer and the object will be discarded, with","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_exact.rs","byte_start":38293,"byte_end":38370,"line_start":32,"line_end":32,"column_start":1,"column_end":78}},{"value":"/ the error yielded. In the case of success the object will be destroyed and","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_exact.rs","byte_start":38371,"byte_end":38449,"line_start":33,"line_end":33,"column_start":1,"column_end":79}},{"value":"/ the buffer will be returned, with all data read from the stream appended to","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_exact.rs","byte_start":38450,"byte_end":38529,"line_start":34,"line_end":34,"column_start":1,"column_end":80}},{"value":"/ the buffer.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_exact.rs","byte_start":38530,"byte_end":38545,"line_start":35,"line_end":35,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":295},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_to_end.rs","byte_start":40048,"byte_end":40057,"line_start":13,"line_end":13,"column_start":12,"column_end":21},"name":"ReadToEnd","qualname":"::io::read_to_end::ReadToEnd","value":"ReadToEnd {  }","parent":null,"children":[{"krate":0,"index":297}],"decl_id":null,"docs":" A future which can be used to easily read the entire contents of a stream\n into a vector.","sig":null,"attributes":[{"value":"/ A future which can be used to easily read the entire contents of a stream","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_to_end.rs","byte_start":39797,"byte_end":39874,"line_start":6,"line_end":6,"column_start":1,"column_end":78}},{"value":"/ into a vector.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_to_end.rs","byte_start":39875,"byte_end":39893,"line_start":7,"line_end":7,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_to_end.rs","byte_start":39894,"byte_end":39897,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Created by the [`read_to_end`] function.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_to_end.rs","byte_start":39898,"byte_end":39942,"line_start":9,"line_end":9,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_to_end.rs","byte_start":39943,"byte_end":39946,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`read_to_end`]: fn.read_to_end.html","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_to_end.rs","byte_start":39947,"byte_end":39987,"line_start":11,"line_end":11,"column_start":1,"column_end":41}},{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_to_end.rs","byte_start":39988,"byte_end":40036,"line_start":12,"line_end":12,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":305},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_to_end.rs","byte_start":40554,"byte_end":40565,"line_start":32,"line_end":32,"column_start":8,"column_end":19},"name":"read_to_end","qualname":"::io::read_to_end::read_to_end","value":"pub fn read_to_end<A>(A, Vec<u8>) -> ReadToEnd<A> where A: Read","parent":null,"children":[],"decl_id":null,"docs":" Creates a future which will read all the bytes associated with the I/O\n object `A` into the buffer provided.","sig":null,"attributes":[{"value":"/ Creates a future which will read all the bytes associated with the I/O","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_to_end.rs","byte_start":40174,"byte_end":40248,"line_start":25,"line_end":25,"column_start":1,"column_end":75}},{"value":"/ object `A` into the buffer provided.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_to_end.rs","byte_start":40249,"byte_end":40289,"line_start":26,"line_end":26,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_to_end.rs","byte_start":40290,"byte_end":40293,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ In the case of an error the buffer and the object will be discarded, with","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_to_end.rs","byte_start":40294,"byte_end":40371,"line_start":28,"line_end":28,"column_start":1,"column_end":78}},{"value":"/ the error yielded. In the case of success the object will be destroyed and","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_to_end.rs","byte_start":40372,"byte_end":40450,"line_start":29,"line_end":29,"column_start":1,"column_end":79}},{"value":"/ the buffer will be returned, with all data read from the stream appended to","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_to_end.rs","byte_start":40451,"byte_end":40530,"line_start":30,"line_end":30,"column_start":1,"column_end":80}},{"value":"/ the buffer.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_to_end.rs","byte_start":40531,"byte_end":40546,"line_start":31,"line_end":31,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":331},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read.rs","byte_start":41948,"byte_end":41952,"line_start":18,"line_end":18,"column_start":8,"column_end":12},"name":"read","qualname":"::io::read::read","value":"pub fn read<R, T>(R, T) -> Read<R, T> where R: ::std::io::Read, T: AsMut<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Tries to read some bytes directly into the given `buf` in asynchronous\n manner, returning a future type.","sig":null,"attributes":[{"value":"/ Tries to read some bytes directly into the given `buf` in asynchronous","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read.rs","byte_start":41672,"byte_end":41746,"line_start":13,"line_end":13,"column_start":1,"column_end":75}},{"value":"/ manner, returning a future type.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read.rs","byte_start":41747,"byte_end":41783,"line_start":14,"line_end":14,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read.rs","byte_start":41784,"byte_end":41787,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ The returned future will resolve to both the I/O stream and the buffer","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read.rs","byte_start":41788,"byte_end":41862,"line_start":16,"line_end":16,"column_start":1,"column_end":75}},{"value":"/ as well as the number of bytes read once the read operation is completed.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read.rs","byte_start":41863,"byte_end":41940,"line_start":17,"line_end":17,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":334},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read.rs","byte_start":42300,"byte_end":42304,"line_start":30,"line_end":30,"column_start":12,"column_end":16},"name":"Read","qualname":"::io::read::Read","value":"Read {  }","parent":null,"children":[{"krate":0,"index":337}],"decl_id":null,"docs":" A future which can be used to easily read available number of bytes to fill\n a buffer.","sig":null,"attributes":[{"value":"/ A future which can be used to easily read available number of bytes to fill","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read.rs","byte_start":42104,"byte_end":42183,"line_start":25,"line_end":25,"column_start":1,"column_end":80}},{"value":"/ a buffer.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read.rs","byte_start":42184,"byte_end":42197,"line_start":26,"line_end":26,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read.rs","byte_start":42198,"byte_end":42201,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ Created by the [`read`] function.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read.rs","byte_start":42202,"byte_end":42239,"line_start":28,"line_end":28,"column_start":1,"column_end":38}},{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read.rs","byte_start":42240,"byte_end":42288,"line_start":29,"line_end":29,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":365},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_until.rs","byte_start":43346,"byte_end":43355,"line_start":13,"line_end":13,"column_start":12,"column_end":21},"name":"ReadUntil","qualname":"::io::read_until::ReadUntil","value":"ReadUntil {  }","parent":null,"children":[{"krate":0,"index":367}],"decl_id":null,"docs":" A future which can be used to easily read the contents of a stream into a \n vector until the delimiter is reached.","sig":null,"attributes":[{"value":"/ A future which can be used to easily read the contents of a stream into a ","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_until.rs","byte_start":43073,"byte_end":43151,"line_start":6,"line_end":6,"column_start":1,"column_end":79}},{"value":"/ vector until the delimiter is reached.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_until.rs","byte_start":43152,"byte_end":43194,"line_start":7,"line_end":7,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_until.rs","byte_start":43195,"byte_end":43198,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Created by the [`read_until`] function.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_until.rs","byte_start":43199,"byte_end":43242,"line_start":9,"line_end":9,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_until.rs","byte_start":43243,"byte_end":43246,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [`read_until`]: fn.read_until.html","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_until.rs","byte_start":43247,"byte_end":43285,"line_start":11,"line_end":11,"column_start":1,"column_end":39}},{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_until.rs","byte_start":43286,"byte_end":43334,"line_start":12,"line_end":12,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":376},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_until.rs","byte_start":44079,"byte_end":44089,"line_start":36,"line_end":36,"column_start":8,"column_end":18},"name":"read_until","qualname":"::io::read_until::read_until","value":"pub fn read_until<A>(A, u8, Vec<u8>) -> ReadUntil<A> where A: BufRead","parent":null,"children":[],"decl_id":null,"docs":" Creates a future which will read all the bytes associated with the I/O\n object `A` into the buffer provided until the delimiter `byte` is reached.\n This method is the async equivalent to [`BufRead::read_until`].","sig":null,"attributes":[{"value":"/ Creates a future which will read all the bytes associated with the I/O","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_until.rs","byte_start":43490,"byte_end":43564,"line_start":26,"line_end":26,"column_start":1,"column_end":75}},{"value":"/ object `A` into the buffer provided until the delimiter `byte` is reached.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_until.rs","byte_start":43565,"byte_end":43643,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ This method is the async equivalent to [`BufRead::read_until`].","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_until.rs","byte_start":43644,"byte_end":43711,"line_start":28,"line_end":28,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_until.rs","byte_start":43712,"byte_end":43715,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ In case of an error the buffer and the object will be discarded, with","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_until.rs","byte_start":43716,"byte_end":43789,"line_start":30,"line_end":30,"column_start":1,"column_end":74}},{"value":"/ the error yielded. In the case of success the object will be destroyed and","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_until.rs","byte_start":43790,"byte_end":43868,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/ the buffer will be returned, with all bytes up to, and including, the delimiter","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_until.rs","byte_start":43869,"byte_end":43952,"line_start":32,"line_end":32,"column_start":1,"column_end":84}},{"value":"/ (if found).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_until.rs","byte_start":43953,"byte_end":43968,"line_start":33,"line_end":33,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_until.rs","byte_start":43969,"byte_end":43972,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ [`BufRead::read_until`]: https://doc.rust-lang.org/std/io/trait.BufRead.html#method.read_until","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_until.rs","byte_start":43973,"byte_end":44071,"line_start":35,"line_end":35,"column_start":1,"column_end":99}}]},{"kind":"Struct","id":{"krate":0,"index":403},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/split.rs","byte_start":45365,"byte_end":45373,"line_start":9,"line_end":9,"column_start":12,"column_end":20},"name":"ReadHalf","qualname":"::io::split::ReadHalf","value":"ReadHalf {  }","parent":null,"children":[{"krate":0,"index":405}],"decl_id":null,"docs":" The readable half of an object returned from `Io::split`.\n","sig":null,"attributes":[{"value":"/ The readable half of an object returned from `Io::split`.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/split.rs","byte_start":45292,"byte_end":45353,"line_start":8,"line_end":8,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":406},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/split.rs","byte_start":45478,"byte_end":45487,"line_start":14,"line_end":14,"column_start":12,"column_end":21},"name":"WriteHalf","qualname":"::io::split::WriteHalf","value":"WriteHalf {  }","parent":null,"children":[{"krate":0,"index":408}],"decl_id":null,"docs":" The writable half of an object returned from `Io::split`.\n","sig":null,"attributes":[{"value":"/ The writable half of an object returned from `Io::split`.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/split.rs","byte_start":45405,"byte_end":45466,"line_start":13,"line_end":13,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":413},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/split.rs","byte_start":45827,"byte_end":45836,"line_start":26,"line_end":26,"column_start":12,"column_end":21},"name":"poll_read","qualname":"<ReadHalf<T>>::poll_read","value":"pub fn poll_read(&mut Self) -> Async<()>","parent":null,"children":[],"decl_id":null,"docs":" Calls the underlying `poll_read` function on this handling, testing to\n see if it's ready to be read from.\n","sig":null,"attributes":[{"value":"/ Calls the underlying `poll_read` function on this handling, testing to","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/split.rs","byte_start":45698,"byte_end":45772,"line_start":24,"line_end":24,"column_start":5,"column_end":79}},{"value":"/ see if it's ready to be read from.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/split.rs","byte_start":45777,"byte_end":45815,"line_start":25,"line_end":25,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/split.rs","byte_start":46182,"byte_end":46192,"line_start":37,"line_end":37,"column_start":12,"column_end":22},"name":"poll_write","qualname":"<WriteHalf<T>>::poll_write","value":"pub fn poll_write(&mut Self) -> Async<()>","parent":null,"children":[],"decl_id":null,"docs":" Calls the underlying `poll_write` function on this handling, testing to\n see if it's ready to be written to.\n","sig":null,"attributes":[{"value":"/ Calls the underlying `poll_write` function on this handling, testing to","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/split.rs","byte_start":46051,"byte_end":46126,"line_start":35,"line_end":35,"column_start":5,"column_end":80}},{"value":"/ see if it's ready to be written to.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/split.rs","byte_start":46131,"byte_end":46170,"line_start":36,"line_end":36,"column_start":5,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":428},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":48100,"byte_end":48106,"line_start":20,"line_end":20,"column_start":12,"column_end":18},"name":"Window","qualname":"::io::window::Window","value":"Window {  }","parent":null,"children":[{"krate":0,"index":430},{"krate":0,"index":431}],"decl_id":null,"docs":" A owned window around an underlying buffer.","sig":null,"attributes":[{"value":"/ A owned window around an underlying buffer.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":47162,"byte_end":47209,"line_start":3,"line_end":3,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":47210,"byte_end":47213,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ Normally slices work great for considering sub-portions of a buffer, but","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":47214,"byte_end":47290,"line_start":5,"line_end":5,"column_start":1,"column_end":77}},{"value":"/ unfortunately a slice is a *borrowed* type in Rust which has an associated","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":47291,"byte_end":47369,"line_start":6,"line_end":6,"column_start":1,"column_end":79}},{"value":"/ lifetime. When working with future and async I/O these lifetimes are not","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":47370,"byte_end":47446,"line_start":7,"line_end":7,"column_start":1,"column_end":77}},{"value":"/ always appropriate, and are sometimes difficult to store in tasks. This","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":47447,"byte_end":47522,"line_start":8,"line_end":8,"column_start":1,"column_end":76}},{"value":"/ type strives to fill this gap by providing an \"owned slice\" around an","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":47523,"byte_end":47596,"line_start":9,"line_end":9,"column_start":1,"column_end":74}},{"value":"/ underlying buffer of bytes.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":47597,"byte_end":47628,"line_start":10,"line_end":10,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":47629,"byte_end":47632,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ A `Window<T>` wraps an underlying buffer, `T`, and has configurable","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":47633,"byte_end":47704,"line_start":12,"line_end":12,"column_start":1,"column_end":72}},{"value":"/ start/end indexes to alter the behavior of the `AsRef<[u8]>` implementation","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":47705,"byte_end":47784,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"/ that this type carries.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":47785,"byte_end":47812,"line_start":14,"line_end":14,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":47813,"byte_end":47816,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This type can be particularly useful when working with the `write_all`","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":47817,"byte_end":47891,"line_start":16,"line_end":16,"column_start":1,"column_end":75}},{"value":"/ combinator in this crate. Data can be sliced via `Window`, consumed by","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":47892,"byte_end":47966,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/ `write_all`, and then earned back once the write operation finishes through","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":47967,"byte_end":48046,"line_start":18,"line_end":18,"column_start":1,"column_end":80}},{"value":"/ the `into_inner` method on this type.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":48047,"byte_end":48088,"line_start":19,"line_end":19,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":434},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":48420,"byte_end":48423,"line_start":31,"line_end":31,"column_start":12,"column_end":15},"name":"new","qualname":"<Window<T>>::new","value":"pub fn new(T) -> Window<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new window around the buffer `t` defaulting to the entire\n slice.","sig":null,"attributes":[{"value":"/ Creates a new window around the buffer `t` defaulting to the entire","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":48196,"byte_end":48267,"line_start":26,"line_end":26,"column_start":5,"column_end":76}},{"value":"/ slice.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":48272,"byte_end":48282,"line_start":27,"line_end":27,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":48287,"byte_end":48290,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ Further methods can be called on the returned `Window<T>` to alter the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":48295,"byte_end":48369,"line_start":29,"line_end":29,"column_start":5,"column_end":79}},{"value":"/ window into the data provided.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":48374,"byte_end":48408,"line_start":30,"line_end":30,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":435},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":48642,"byte_end":48649,"line_start":40,"line_end":40,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Window<T>>::get_ref","value":"pub fn get_ref(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Gets a shared reference to the underlying buffer inside of this\n `Window`.\n","sig":null,"attributes":[{"value":"/ Gets a shared reference to the underlying buffer inside of this","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":48545,"byte_end":48612,"line_start":38,"line_end":38,"column_start":5,"column_end":72}},{"value":"/ `Window`.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":48617,"byte_end":48630,"line_start":39,"line_end":39,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":436},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":48794,"byte_end":48801,"line_start":46,"line_end":46,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Window<T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the underlying buffer inside of this\n `Window`.\n","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the underlying buffer inside of this","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":48696,"byte_end":48764,"line_start":44,"line_end":44,"column_start":5,"column_end":73}},{"value":"/ `Window`.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":48769,"byte_end":48782,"line_start":45,"line_end":45,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":437},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":48932,"byte_end":48942,"line_start":51,"line_end":51,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Window<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `Window`, returning the underlying buffer.\n","sig":null,"attributes":[{"value":"/ Consumes this `Window`, returning the underlying buffer.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":48860,"byte_end":48920,"line_start":50,"line_end":50,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":438},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":49083,"byte_end":49088,"line_start":57,"line_end":57,"column_start":12,"column_end":17},"name":"start","qualname":"<Window<T>>::start","value":"pub fn start(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the starting index of this window into the underlying buffer\n `T`.\n","sig":null,"attributes":[{"value":"/ Returns the starting index of this window into the underlying buffer","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":48986,"byte_end":49058,"line_start":55,"line_end":55,"column_start":5,"column_end":77}},{"value":"/ `T`.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":49063,"byte_end":49071,"line_start":56,"line_end":56,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":49235,"byte_end":49238,"line_start":63,"line_end":63,"column_start":12,"column_end":15},"name":"end","qualname":"<Window<T>>::end","value":"pub fn end(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the end index of this window into the underlying buffer\n `T`.\n","sig":null,"attributes":[{"value":"/ Returns the end index of this window into the underlying buffer","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":49143,"byte_end":49210,"line_start":61,"line_end":61,"column_start":5,"column_end":72}},{"value":"/ `T`.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":49215,"byte_end":49223,"line_start":62,"line_end":62,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":49636,"byte_end":49645,"line_start":75,"line_end":75,"column_start":12,"column_end":21},"name":"set_start","qualname":"<Window<T>>::set_start","value":"pub fn set_start(&mut Self, usize) -> &mut Window<T>","parent":null,"children":[],"decl_id":null,"docs":" Changes the starting index of this window to the index specified.","sig":null,"attributes":[{"value":"/ Changes the starting index of this window to the index specified.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":49291,"byte_end":49360,"line_start":67,"line_end":67,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":49365,"byte_end":49368,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ Returns the windows back to chain multiple calls to this method.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":49373,"byte_end":49441,"line_start":69,"line_end":69,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":49446,"byte_end":49449,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":49454,"byte_end":49466,"line_start":71,"line_end":71,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":49471,"byte_end":49474,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ This method will panic if `start` is out of bounds for the underlying","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":49479,"byte_end":49552,"line_start":73,"line_end":73,"column_start":5,"column_end":78}},{"value":"/ slice or if it comes after the `end` configured in this window.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":49557,"byte_end":49624,"line_start":74,"line_end":74,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":441},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":50185,"byte_end":50192,"line_start":90,"line_end":90,"column_start":12,"column_end":19},"name":"set_end","qualname":"<Window<T>>::set_end","value":"pub fn set_end(&mut Self, usize) -> &mut Window<T>","parent":null,"children":[],"decl_id":null,"docs":" Changes the end index of this window to the index specified.","sig":null,"attributes":[{"value":"/ Changes the end index of this window to the index specified.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":49844,"byte_end":49908,"line_start":82,"line_end":82,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":49913,"byte_end":49916,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ Returns the windows back to chain multiple calls to this method.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":49921,"byte_end":49989,"line_start":84,"line_end":84,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":49994,"byte_end":49997,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":50002,"byte_end":50014,"line_start":86,"line_end":86,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":50019,"byte_end":50022,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ This method will panic if `end` is out of bounds for the underlying","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":50027,"byte_end":50098,"line_start":88,"line_end":88,"column_start":5,"column_end":76}},{"value":"/ slice or if it comes before the `start` configured in this window.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":50103,"byte_end":50173,"line_start":89,"line_end":89,"column_start":5,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":466},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/write_all.rs","byte_start":51190,"byte_end":51198,"line_start":12,"line_end":12,"column_start":12,"column_end":20},"name":"WriteAll","qualname":"::io::write_all::WriteAll","value":"WriteAll {  }","parent":null,"children":[{"krate":0,"index":469}],"decl_id":null,"docs":" A future used to write the entire contents of some data to a stream.","sig":null,"attributes":[{"value":"/ A future used to write the entire contents of some data to a stream.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/write_all.rs","byte_start":50953,"byte_end":51025,"line_start":6,"line_end":6,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/write_all.rs","byte_start":51026,"byte_end":51029,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This is created by the [`write_all`] top-level method.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/write_all.rs","byte_start":51030,"byte_end":51088,"line_start":8,"line_end":8,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/write_all.rs","byte_start":51089,"byte_end":51092,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`write_all`]: fn.write_all.html","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/write_all.rs","byte_start":51093,"byte_end":51129,"line_start":10,"line_end":10,"column_start":1,"column_end":37}},{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/write_all.rs","byte_start":51130,"byte_end":51178,"line_start":11,"line_end":11,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":479},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/write_all.rs","byte_start":52022,"byte_end":52031,"line_start":39,"line_end":39,"column_start":8,"column_end":17},"name":"write_all","qualname":"::io::write_all::write_all","value":"pub fn write_all<A, T>(A, T) -> WriteAll<A, T> where A: Write, T: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Creates a future that will write the entire contents of the buffer `buf` to\n the stream `a` provided.","sig":null,"attributes":[{"value":"/ Creates a future that will write the entire contents of the buffer `buf` to","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/write_all.rs","byte_start":51338,"byte_end":51417,"line_start":25,"line_end":25,"column_start":1,"column_end":80}},{"value":"/ the stream `a` provided.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/write_all.rs","byte_start":51418,"byte_end":51446,"line_start":26,"line_end":26,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/write_all.rs","byte_start":51447,"byte_end":51450,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ The returned future will not return until all the data has been written, and","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/write_all.rs","byte_start":51451,"byte_end":51531,"line_start":28,"line_end":28,"column_start":1,"column_end":81}},{"value":"/ the future will resolve to the stream as well as the buffer (for reuse if","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/write_all.rs","byte_start":51532,"byte_end":51609,"line_start":29,"line_end":29,"column_start":1,"column_end":78}},{"value":"/ needed).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/write_all.rs","byte_start":51610,"byte_end":51622,"line_start":30,"line_end":30,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/write_all.rs","byte_start":51623,"byte_end":51626,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ Any error which happens during writing will cause both the stream and the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/write_all.rs","byte_start":51627,"byte_end":51704,"line_start":32,"line_end":32,"column_start":1,"column_end":78}},{"value":"/ buffer to get destroyed.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/write_all.rs","byte_start":51705,"byte_end":51733,"line_start":33,"line_end":33,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/write_all.rs","byte_start":51734,"byte_end":51737,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ The `buf` parameter here only requires the `AsRef<[u8]>` trait, which should","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/write_all.rs","byte_start":51738,"byte_end":51818,"line_start":35,"line_end":35,"column_start":1,"column_end":81}},{"value":"/ be broadly applicable to accepting data which can be converted to a slice.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/write_all.rs","byte_start":51819,"byte_end":51897,"line_start":36,"line_end":36,"column_start":1,"column_end":79}},{"value":"/ The `Window` struct is also available in this crate to provide a different","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/write_all.rs","byte_start":51898,"byte_end":51976,"line_start":37,"line_end":37,"column_start":1,"column_end":79}},{"value":"/ window into a slice if necessary.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/write_all.rs","byte_start":51977,"byte_end":52014,"line_start":38,"line_end":38,"column_start":1,"column_end":38}}]},{"kind":"Trait","id":{"krate":0,"index":561},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":6625,"byte_end":6627,"line_start":77,"line_end":77,"column_start":11,"column_end":13},"name":"Io","qualname":"::io::Io","value":"Io: io::Read + io::Write","parent":null,"children":[{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":566},{"krate":0,"index":568}],"decl_id":null,"docs":" A trait for read/write I/O objects","sig":null,"attributes":[{"value":"/ A trait for read/write I/O objects","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":6058,"byte_end":6096,"line_start":66,"line_end":66,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":6097,"byte_end":6100,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ This trait represents I/O objects which are readable and writable.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":6101,"byte_end":6171,"line_start":68,"line_end":68,"column_start":1,"column_end":71}},{"value":"/ Additionally, they're associated with the ability to test whether they're","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":6172,"byte_end":6249,"line_start":69,"line_end":69,"column_start":1,"column_end":78}},{"value":"/ readable or writable.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":6250,"byte_end":6275,"line_start":70,"line_end":70,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":6276,"byte_end":6279,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ Importantly, the methods of this trait are intended to be used in conjunction","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":6280,"byte_end":6361,"line_start":72,"line_end":72,"column_start":1,"column_end":82}},{"value":"/ with the current task of a future. Namely whenever any of them return a","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":6362,"byte_end":6437,"line_start":73,"line_end":73,"column_start":1,"column_end":76}},{"value":"/ value that indicates \"would block\" the current future's task is arranged to","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":6438,"byte_end":6517,"line_start":74,"line_end":74,"column_start":1,"column_end":80}},{"value":"/ receive a notification when the method would otherwise not indicate that it","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":6518,"byte_end":6597,"line_start":75,"line_end":75,"column_start":1,"column_end":80}},{"value":"/ would block.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":6598,"byte_end":6614,"line_start":76,"line_end":76,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":562},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":7501,"byte_end":7510,"line_start":96,"line_end":96,"column_start":8,"column_end":17},"name":"poll_read","qualname":"::io::Io::poll_read","value":"pub fn poll_read(&mut Self) -> Async<()>","parent":{"krate":0,"index":561},"children":[],"decl_id":null,"docs":" Tests to see if this I/O object may be readable.","sig":null,"attributes":[{"value":"/ Tests to see if this I/O object may be readable.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":6656,"byte_end":6708,"line_start":78,"line_end":78,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":6713,"byte_end":6716,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ This method returns an `Async<()>` indicating whether the object","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":6721,"byte_end":6789,"line_start":80,"line_end":80,"column_start":5,"column_end":73}},{"value":"/ **might** be readable. It is possible that even if this method returns","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":6794,"byte_end":6868,"line_start":81,"line_end":81,"column_start":5,"column_end":79}},{"value":"/ `Async::Ready` that a call to `read` would return a `WouldBlock` error.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":6873,"byte_end":6948,"line_start":82,"line_end":82,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":6953,"byte_end":6956,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ There is a default implementation for this function which always","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":6961,"byte_end":7029,"line_start":84,"line_end":84,"column_start":5,"column_end":73}},{"value":"/ indicates that an I/O object is readable, but objects which can","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":7034,"byte_end":7101,"line_start":85,"line_end":85,"column_start":5,"column_end":72}},{"value":"/ implement a finer grained version of this are recommended to do so.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":7106,"byte_end":7177,"line_start":86,"line_end":86,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":7182,"byte_end":7185,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ If this function returns `Async::NotReady` then the current future's","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":7190,"byte_end":7262,"line_start":88,"line_end":88,"column_start":5,"column_end":77}},{"value":"/ task is arranged to receive a notification when it might not return","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":7267,"byte_end":7338,"line_start":89,"line_end":89,"column_start":5,"column_end":76}},{"value":"/ `NotReady`.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":7343,"byte_end":7358,"line_start":90,"line_end":90,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":7363,"byte_end":7366,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":7371,"byte_end":7383,"line_start":92,"line_end":92,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":7388,"byte_end":7391,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ This method is likely to panic if called from outside the context of a","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":7396,"byte_end":7470,"line_start":94,"line_end":94,"column_start":5,"column_end":79}},{"value":"/ future's task.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":7475,"byte_end":7493,"line_start":95,"line_end":95,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":563},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":8419,"byte_end":8429,"line_start":118,"line_end":118,"column_start":8,"column_end":18},"name":"poll_write","qualname":"::io::Io::poll_write","value":"pub fn poll_write(&mut Self) -> Async<()>","parent":{"krate":0,"index":561},"children":[],"decl_id":null,"docs":" Tests to see if this I/O object may be writable.","sig":null,"attributes":[{"value":"/ Tests to see if this I/O object may be writable.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":7573,"byte_end":7625,"line_start":100,"line_end":100,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":7630,"byte_end":7633,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ This method returns an `Async<()>` indicating whether the object","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":7638,"byte_end":7706,"line_start":102,"line_end":102,"column_start":5,"column_end":73}},{"value":"/ **might** be writable. It is possible that even if this method returns","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":7711,"byte_end":7785,"line_start":103,"line_end":103,"column_start":5,"column_end":79}},{"value":"/ `Async::Ready` that a call to `write` would return a `WouldBlock` error.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":7790,"byte_end":7866,"line_start":104,"line_end":104,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":7871,"byte_end":7874,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ There is a default implementation for this function which always","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":7879,"byte_end":7947,"line_start":106,"line_end":106,"column_start":5,"column_end":73}},{"value":"/ indicates that an I/O object is writable, but objects which can","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":7952,"byte_end":8019,"line_start":107,"line_end":107,"column_start":5,"column_end":72}},{"value":"/ implement a finer grained version of this are recommended to do so.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":8024,"byte_end":8095,"line_start":108,"line_end":108,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":8100,"byte_end":8103,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ If this function returns `Async::NotReady` then the current future's","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":8108,"byte_end":8180,"line_start":110,"line_end":110,"column_start":5,"column_end":77}},{"value":"/ task is arranged to receive a notification when it might not return","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":8185,"byte_end":8256,"line_start":111,"line_end":111,"column_start":5,"column_end":76}},{"value":"/ `NotReady`.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":8261,"byte_end":8276,"line_start":112,"line_end":112,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":8281,"byte_end":8284,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":8289,"byte_end":8301,"line_start":114,"line_end":114,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":8306,"byte_end":8309,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ This method is likely to panic if called from outside the context of a","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":8314,"byte_end":8388,"line_start":116,"line_end":116,"column_start":5,"column_end":79}},{"value":"/ future's task.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":8393,"byte_end":8411,"line_start":117,"line_end":117,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":564},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":9482,"byte_end":9490,"line_start":140,"line_end":140,"column_start":8,"column_end":16},"name":"read_vec","qualname":"::io::Io::read_vec","value":"pub fn read_vec(&mut Self, &mut [&mut IoVec]) -> io::Result<usize>","parent":{"krate":0,"index":561},"children":[],"decl_id":null,"docs":" Read in a list of buffers all at once.","sig":null,"attributes":[{"value":"/ Read in a list of buffers all at once.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":8492,"byte_end":8534,"line_start":122,"line_end":122,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":8539,"byte_end":8542,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ This operation will attempt to read bytes from this socket and place","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":8547,"byte_end":8619,"line_start":124,"line_end":124,"column_start":5,"column_end":77}},{"value":"/ them into the list of buffers provided. Note that each buffer is an","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":8624,"byte_end":8695,"line_start":125,"line_end":125,"column_start":5,"column_end":76}},{"value":"/ `IoVec` which can be created from a byte slice.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":8700,"byte_end":8751,"line_start":126,"line_end":126,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":8756,"byte_end":8759,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ The buffers provided will be filled in sequentially. A buffer will be","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":8764,"byte_end":8837,"line_start":128,"line_end":128,"column_start":5,"column_end":78}},{"value":"/ entirely filled up before the next is written to.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":8842,"byte_end":8895,"line_start":129,"line_end":129,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":8900,"byte_end":8903,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ The number of bytes read is returned, if successful, or an error is","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":8908,"byte_end":8979,"line_start":131,"line_end":131,"column_start":5,"column_end":76}},{"value":"/ returned otherwise. If no bytes are available to be read yet then","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":8984,"byte_end":9053,"line_start":132,"line_end":132,"column_start":5,"column_end":74}},{"value":"/ a \"would block\" error is returned. This operation should not block.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":9058,"byte_end":9129,"line_start":133,"line_end":133,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":9134,"byte_end":9137,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ There is a default implementation for this function which treats this","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":9142,"byte_end":9215,"line_start":135,"line_end":135,"column_start":5,"column_end":78}},{"value":"/ as a single read using the first buffer in the list, but objects which","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":9220,"byte_end":9294,"line_start":136,"line_end":136,"column_start":5,"column_end":79}},{"value":"/ can implement this as an atomic read using all the buffers are","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":9299,"byte_end":9365,"line_start":137,"line_end":137,"column_start":5,"column_end":71}},{"value":"/ recommended to do so. For example, `TcpStream` can implement this","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":9370,"byte_end":9439,"line_start":138,"line_end":138,"column_start":5,"column_end":74}},{"value":"/ using the `readv` syscall.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":9444,"byte_end":9474,"line_start":139,"line_end":139,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":565},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":10582,"byte_end":10591,"line_start":165,"line_end":165,"column_start":8,"column_end":17},"name":"write_vec","qualname":"::io::Io::write_vec","value":"pub fn write_vec(&mut Self, &[&IoVec]) -> io::Result<usize>","parent":{"krate":0,"index":561},"children":[],"decl_id":null,"docs":" Write a list of buffers all at once.","sig":null,"attributes":[{"value":"/ Write a list of buffers all at once.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":9671,"byte_end":9711,"line_start":148,"line_end":148,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":9716,"byte_end":9719,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ This operation will attempt to write a list of byte buffers to this","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":9724,"byte_end":9795,"line_start":150,"line_end":150,"column_start":5,"column_end":76}},{"value":"/ socket. Note that each buffer is an `IoVec` which can be created from a","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":9800,"byte_end":9875,"line_start":151,"line_end":151,"column_start":5,"column_end":80}},{"value":"/ byte slice.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":9880,"byte_end":9895,"line_start":152,"line_end":152,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":9900,"byte_end":9903,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ The buffers provided will be written sequentially. A buffer will be","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":9908,"byte_end":9979,"line_start":154,"line_end":154,"column_start":5,"column_end":76}},{"value":"/ entirely written before the next is written.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":9984,"byte_end":10032,"line_start":155,"line_end":155,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":10037,"byte_end":10040,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ The number of bytes written is returned, if successful, or an error is","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":10045,"byte_end":10119,"line_start":157,"line_end":157,"column_start":5,"column_end":79}},{"value":"/ returned otherwise. If the socket is not currently writable then a","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":10124,"byte_end":10194,"line_start":158,"line_end":158,"column_start":5,"column_end":75}},{"value":"/ \"would block\" error is returned. This operation should not block.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":10199,"byte_end":10268,"line_start":159,"line_end":159,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":10273,"byte_end":10276,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ There is a default implementation for this function which writes the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":10281,"byte_end":10353,"line_start":161,"line_end":161,"column_start":5,"column_end":77}},{"value":"/ first buffer only, but objects which can implement this as an atomic","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":10358,"byte_end":10430,"line_start":162,"line_end":162,"column_start":5,"column_end":77}},{"value":"/ write using all the buffers are  recommended to do so. For example,","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":10435,"byte_end":10506,"line_start":163,"line_end":163,"column_start":5,"column_end":76}},{"value":"/ `TcpStream` can implement this  using the `writev` syscall.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":10511,"byte_end":10574,"line_start":164,"line_end":164,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":566},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":11818,"byte_end":11824,"line_start":190,"line_end":190,"column_start":8,"column_end":14},"name":"framed","qualname":"::io::Io::framed","value":"pub fn framed<C: Codec>(Self, C) -> Framed<Self, C> where Self: Sized","parent":{"krate":0,"index":561},"children":[],"decl_id":null,"docs":" Provides a `Stream` and `Sink` interface for reading and writing to this\n `Io` object, using `Decode` and `Encode` to read and write the raw data.","sig":null,"attributes":[{"value":"/ Provides a `Stream` and `Sink` interface for reading and writing to this","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":10761,"byte_end":10837,"line_start":173,"line_end":173,"column_start":5,"column_end":81}},{"value":"/ `Io` object, using `Decode` and `Encode` to read and write the raw data.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":10842,"byte_end":10918,"line_start":174,"line_end":174,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":10923,"byte_end":10926,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ Raw I/O objects work with byte sequences, but higher-level code usually","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":10931,"byte_end":11006,"line_start":176,"line_end":176,"column_start":5,"column_end":80}},{"value":"/ wants to batch these into meaningful chunks, called \"frames\". This","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":11011,"byte_end":11081,"line_start":177,"line_end":177,"column_start":5,"column_end":75}},{"value":"/ method layers framing on top of an I/O object, by using the `Codec`","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":11086,"byte_end":11157,"line_start":178,"line_end":178,"column_start":5,"column_end":76}},{"value":"/ traits to handle encoding and decoding of messages frames. Note that","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":11162,"byte_end":11234,"line_start":179,"line_end":179,"column_start":5,"column_end":77}},{"value":"/ the incoming and outgoing frame types may be distinct.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":11239,"byte_end":11297,"line_start":180,"line_end":180,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":11302,"byte_end":11305,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ This function returns a *single* object that is both `Stream` and","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":11310,"byte_end":11379,"line_start":182,"line_end":182,"column_start":5,"column_end":74}},{"value":"/ `Sink`; grouping this into a single object is often useful for layering","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":11384,"byte_end":11459,"line_start":183,"line_end":183,"column_start":5,"column_end":80}},{"value":"/ things like gzip or TLS, which require both read and write access to the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":11464,"byte_end":11540,"line_start":184,"line_end":184,"column_start":5,"column_end":81}},{"value":"/ underlying object.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":11545,"byte_end":11567,"line_start":185,"line_end":185,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":11572,"byte_end":11575,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ If you want to work more directly with the streams and sink, consider","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":11580,"byte_end":11653,"line_start":187,"line_end":187,"column_start":5,"column_end":78}},{"value":"/ calling `split` on the `Framed` returned by this method, which will","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":11658,"byte_end":11729,"line_start":188,"line_end":188,"column_start":5,"column_end":76}},{"value":"/ break them into separate objects, allowing them to interact more easily.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":11734,"byte_end":11810,"line_start":189,"line_end":189,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":568},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":12131,"byte_end":12136,"line_start":200,"line_end":200,"column_start":8,"column_end":13},"name":"split","qualname":"::io::Io::split","value":"pub fn split(Self) -> (ReadHalf<Self>, WriteHalf<Self>) where Self: Sized","parent":{"krate":0,"index":561},"children":[],"decl_id":null,"docs":" Helper method for splitting this read/write object into two halves.","sig":null,"attributes":[{"value":"/ Helper method for splitting this read/write object into two halves.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":11949,"byte_end":12020,"line_start":196,"line_end":196,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":12025,"byte_end":12028,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ The two halves returned implement the `Read` and `Write` traits,","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":12033,"byte_end":12101,"line_start":198,"line_end":198,"column_start":5,"column_end":73}},{"value":"/ respectively.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":12106,"byte_end":12123,"line_start":199,"line_end":199,"column_start":5,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":569},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":12965,"byte_end":12973,"line_start":222,"line_end":222,"column_start":11,"column_end":19},"name":"FramedIo","qualname":"::io::FramedIo","value":"FramedIo","parent":null,"children":[{"krate":0,"index":570},{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":574},{"krate":0,"index":575},{"krate":0,"index":576}],"decl_id":null,"docs":" A trait for framed reading and writing.","sig":null,"attributes":[{"value":"/ A trait for framed reading and writing.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":12248,"byte_end":12291,"line_start":207,"line_end":207,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":12292,"byte_end":12295,"line_start":208,"line_end":208,"column_start":1,"column_end":4}},{"value":"/ Most implementations of `FramedIo` are for doing protocol level","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":12296,"byte_end":12363,"line_start":209,"line_end":209,"column_start":1,"column_end":68}},{"value":"/ serialization and deserialization.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":12364,"byte_end":12402,"line_start":210,"line_end":210,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":12403,"byte_end":12406,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ Importantly, the methods of this trait are intended to be used in conjunction","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":12407,"byte_end":12488,"line_start":212,"line_end":212,"column_start":1,"column_end":82}},{"value":"/ with the current task of a future. Namely whenever any of them return a","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":12489,"byte_end":12564,"line_start":213,"line_end":213,"column_start":1,"column_end":76}},{"value":"/ value that indicates \"would block\" the current future's task is arranged to","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":12565,"byte_end":12644,"line_start":214,"line_end":214,"column_start":1,"column_end":80}},{"value":"/ receive a notification when the method would otherwise not indicate that it","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":12645,"byte_end":12724,"line_start":215,"line_end":215,"column_start":1,"column_end":80}},{"value":"/ would block.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":12725,"byte_end":12741,"line_start":216,"line_end":216,"column_start":1,"column_end":17}},{"value":"/ For a sample implementation of `FramedIo` you can take a look at the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":12745,"byte_end":12817,"line_start":218,"line_end":218,"column_start":1,"column_end":73}},{"value":"/ `Framed` type in the `frame` module of this crate.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":12818,"byte_end":12872,"line_start":219,"line_end":219,"column_start":1,"column_end":55}},{"value":"deprecated(since = \"0.1.1\", note = \"replaced by Sink + Stream\")","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":12888,"byte_end":12954,"line_start":221,"line_end":221,"column_start":1,"column_end":67}}]},{"kind":"Type","id":{"krate":0,"index":570},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":13010,"byte_end":13012,"line_start":224,"line_end":224,"column_start":10,"column_end":12},"name":"In","qualname":"::io::FramedIo::In","value":"type In;","parent":{"krate":0,"index":569},"children":[],"decl_id":null,"docs":" Messages written\n","sig":null,"attributes":[{"value":"/ Messages written","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":12980,"byte_end":13000,"line_start":223,"line_end":223,"column_start":5,"column_end":25}}]},{"kind":"Type","id":{"krate":0,"index":571},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":13046,"byte_end":13049,"line_start":227,"line_end":227,"column_start":10,"column_end":13},"name":"Out","qualname":"::io::FramedIo::Out","value":"type Out;","parent":{"krate":0,"index":569},"children":[],"decl_id":null,"docs":" Messages read\n","sig":null,"attributes":[{"value":"/ Messages read","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":13019,"byte_end":13036,"line_start":226,"line_end":226,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":13116,"byte_end":13125,"line_start":230,"line_end":230,"column_start":8,"column_end":17},"name":"poll_read","qualname":"::io::FramedIo::poll_read","value":"pub fn poll_read(&mut Self) -> Async<()>","parent":{"krate":0,"index":569},"children":[],"decl_id":null,"docs":" Tests to see if this `FramedIo` may be readable.\n","sig":null,"attributes":[{"value":"/ Tests to see if this `FramedIo` may be readable.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":13056,"byte_end":13108,"line_start":229,"line_end":229,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":573},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":13208,"byte_end":13212,"line_start":233,"line_end":233,"column_start":8,"column_end":12},"name":"read","qualname":"::io::FramedIo::read","value":"pub fn read(&mut Self) -> Poll<Self::Out, io::Error>","parent":{"krate":0,"index":569},"children":[],"decl_id":null,"docs":" Read a message frame from the `FramedIo`\n","sig":null,"attributes":[{"value":"/ Read a message frame from the `FramedIo`","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":13156,"byte_end":13200,"line_start":232,"line_end":232,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":13494,"byte_end":13504,"line_start":240,"line_end":240,"column_start":8,"column_end":18},"name":"poll_write","qualname":"::io::FramedIo::poll_write","value":"pub fn poll_write(&mut Self) -> Async<()>","parent":{"krate":0,"index":569},"children":[],"decl_id":null,"docs":" Tests to see if this `FramedIo` may be writable.","sig":null,"attributes":[{"value":"/ Tests to see if this `FramedIo` may be writable.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":13260,"byte_end":13312,"line_start":235,"line_end":235,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":13317,"byte_end":13320,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ Unlike most other calls to poll readiness, it is important that when","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":13325,"byte_end":13397,"line_start":237,"line_end":237,"column_start":5,"column_end":77}},{"value":"/ `FramedIo::poll_write` returns `Async::Ready` that a write will","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":13402,"byte_end":13469,"line_start":238,"line_end":238,"column_start":5,"column_end":72}},{"value":"/ succeed.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":13474,"byte_end":13486,"line_start":239,"line_end":239,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":575},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":13586,"byte_end":13591,"line_start":243,"line_end":243,"column_start":8,"column_end":13},"name":"write","qualname":"::io::FramedIo::write","value":"pub fn write(&mut Self, Self::In) -> Poll<(), io::Error>","parent":{"krate":0,"index":569},"children":[],"decl_id":null,"docs":" Write a message frame to the `FramedIo`\n","sig":null,"attributes":[{"value":"/ Write a message frame to the `FramedIo`","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":13535,"byte_end":13578,"line_start":242,"line_end":242,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":576},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":14149,"byte_end":14154,"line_start":254,"line_end":254,"column_start":8,"column_end":13},"name":"flush","qualname":"::io::FramedIo::flush","value":"pub fn flush(&mut Self) -> Poll<(), io::Error>","parent":{"krate":0,"index":569},"children":[],"decl_id":null,"docs":" Flush pending writes or do any other work not driven by reading /\n writing.","sig":null,"attributes":[{"value":"/ Flush pending writes or do any other work not driven by reading /","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":13647,"byte_end":13716,"line_start":245,"line_end":245,"column_start":5,"column_end":74}},{"value":"/ writing.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":13721,"byte_end":13733,"line_start":246,"line_end":246,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":13738,"byte_end":13741,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ Since the backing source is non-blocking, there is no guarantee that a","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":13746,"byte_end":13820,"line_start":248,"line_end":248,"column_start":5,"column_end":79}},{"value":"/ call to `FramedIo::write` is able to write the full message to the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":13825,"byte_end":13895,"line_start":249,"line_end":249,"column_start":5,"column_end":75}},{"value":"/ backing source immediately. In this case, the `FramedIo` will need to","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":13900,"byte_end":13973,"line_start":250,"line_end":250,"column_start":5,"column_end":78}},{"value":"/ buffer the remaining data to write. Calls to `FramedIo:flush` attempt","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":13978,"byte_end":14051,"line_start":251,"line_end":251,"column_start":5,"column_end":78}},{"value":"/ to write any remaining data in the write buffer to the underlying","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":14056,"byte_end":14125,"line_start":252,"line_end":252,"column_start":5,"column_end":74}},{"value":"/ source.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":14130,"byte_end":14141,"line_start":253,"line_end":253,"column_start":5,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":577},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"net","qualname":"::net","value":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/mod.rs","parent":null,"children":[{"krate":0,"index":578},{"krate":0,"index":785},{"krate":0,"index":966},{"krate":0,"index":967},{"krate":0,"index":970},{"krate":0,"index":973},{"krate":0,"index":974},{"krate":0,"index":977},{"krate":0,"index":980},{"krate":0,"index":981},{"krate":0,"index":984},{"krate":0,"index":987},{"krate":0,"index":990},{"krate":0,"index":993}],"decl_id":null,"docs":" TCP/UDP bindings for `tokio-core`","sig":null,"attributes":[{"value":"/ TCP/UDP bindings for `tokio-core`","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/mod.rs","byte_start":57426,"byte_end":57463,"line_start":1,"line_end":1,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/mod.rs","byte_start":57464,"byte_end":57467,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This module contains the TCP/UDP networking types, similar to the standard","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/mod.rs","byte_start":57468,"byte_end":57546,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ library, which can be used to implement networking protocols.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/mod.rs","byte_start":57547,"byte_end":57612,"line_start":4,"line_end":4,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":648},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":58330,"byte_end":58341,"line_start":20,"line_end":20,"column_start":12,"column_end":23},"name":"TcpListener","qualname":"::net::tcp::TcpListener","value":"TcpListener {  }","parent":null,"children":[{"krate":0,"index":649}],"decl_id":null,"docs":" An I/O object representing a TCP socket listening for incoming connections.","sig":null,"attributes":[{"value":"/ An I/O object representing a TCP socket listening for incoming connections.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":58127,"byte_end":58206,"line_start":16,"line_end":16,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":58207,"byte_end":58210,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ This object can be converted into a stream of incoming connections for","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":58211,"byte_end":58285,"line_start":18,"line_end":18,"column_start":1,"column_end":75}},{"value":"/ various forms of processing.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":58286,"byte_end":58318,"line_start":19,"line_end":19,"column_start":1,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":650},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":58577,"byte_end":58585,"line_start":27,"line_end":27,"column_start":12,"column_end":20},"name":"Incoming","qualname":"::net::tcp::Incoming","value":"Incoming {  }","parent":null,"children":[{"krate":0,"index":651}],"decl_id":null,"docs":" Stream returned by the `TcpListener::incoming` function representing the\n stream of sockets received from a listener.\n","sig":null,"attributes":[{"value":"/ Stream returned by the `TcpListener::incoming` function representing the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":58392,"byte_end":58468,"line_start":24,"line_end":24,"column_start":1,"column_end":77}},{"value":"/ stream of sockets received from a listener.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":58469,"byte_end":58516,"line_start":25,"line_end":25,"column_start":1,"column_end":48}},{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":58517,"byte_end":58565,"line_start":26,"line_end":26,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":653},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":58867,"byte_end":58871,"line_start":36,"line_end":36,"column_start":12,"column_end":16},"name":"bind","qualname":"<TcpListener>::bind","value":"pub fn bind(&SocketAddr, &Handle) -> io::Result<TcpListener>","parent":null,"children":[],"decl_id":null,"docs":" Create a new TCP listener associated with this event loop.","sig":null,"attributes":[{"value":"/ Create a new TCP listener associated with this event loop.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":58638,"byte_end":58700,"line_start":32,"line_end":32,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":58705,"byte_end":58708,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ The TCP listener will bind to the provided `addr` address, if available.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":58713,"byte_end":58789,"line_start":34,"line_end":34,"column_start":5,"column_end":81}},{"value":"/ If the result is `Ok`, the socket has successfully bound.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":58794,"byte_end":58855,"line_start":35,"line_end":35,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":654},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":59229,"byte_end":59234,"line_start":45,"line_end":45,"column_start":12,"column_end":17},"name":"bind2","qualname":"<TcpListener>::bind2","value":"pub fn bind2(&SocketAddr) -> io::Result<TcpListener>","parent":null,"children":[],"decl_id":null,"docs":" Create a new TCP listener associated with this event loop.","sig":null,"attributes":[{"value":"/ Create a new TCP listener associated with this event loop.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":59041,"byte_end":59103,"line_start":41,"line_end":41,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":59108,"byte_end":59111,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ This is the same as `bind` but uses the default reactor instead of an","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":59116,"byte_end":59189,"line_start":43,"line_end":43,"column_start":5,"column_end":78}},{"value":"/ explicit `&Handle`.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":59194,"byte_end":59217,"line_start":44,"line_end":44,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":655},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":60240,"byte_end":60246,"line_start":68,"line_end":68,"column_start":12,"column_end":18},"name":"accept","qualname":"<TcpListener>::accept","value":"pub fn accept(&mut Self) -> io::Result<(TcpStream, SocketAddr)>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to accept a connection and create a new connected `TcpStream` if\n successful.","sig":null,"attributes":[{"value":"/ Attempt to accept a connection and create a new connected `TcpStream` if","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":59380,"byte_end":59456,"line_start":50,"line_end":50,"column_start":5,"column_end":81}},{"value":"/ successful.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":59461,"byte_end":59476,"line_start":51,"line_end":51,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":59481,"byte_end":59484,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ This function will attempt an accept operation, but will not block","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":59489,"byte_end":59559,"line_start":53,"line_end":53,"column_start":5,"column_end":75}},{"value":"/ waiting for it to complete. If the operation would block then a \"would","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":59564,"byte_end":59638,"line_start":54,"line_end":54,"column_start":5,"column_end":79}},{"value":"/ block\" error is returned. Additionally, if this method would block, it","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":59643,"byte_end":59717,"line_start":55,"line_end":55,"column_start":5,"column_end":79}},{"value":"/ registers the current task to receive a notification when it would","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":59722,"byte_end":59792,"line_start":56,"line_end":56,"column_start":5,"column_end":75}},{"value":"/ otherwise not block.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":59797,"byte_end":59821,"line_start":57,"line_end":57,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":59826,"byte_end":59829,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ Note that typically for simple usage it's easier to treat incoming","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":59834,"byte_end":59904,"line_start":59,"line_end":59,"column_start":5,"column_end":75}},{"value":"/ connections as a `Stream` of `TcpStream`s with the `incoming` method","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":59909,"byte_end":59981,"line_start":60,"line_end":60,"column_start":5,"column_end":77}},{"value":"/ below.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":59986,"byte_end":59996,"line_start":61,"line_end":61,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":60001,"byte_end":60004,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":60009,"byte_end":60021,"line_start":63,"line_end":63,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":60026,"byte_end":60029,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ This function will panic if it is called outside the context of a","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":60034,"byte_end":60103,"line_start":65,"line_end":65,"column_start":5,"column_end":74}},{"value":"/ future's task. It's recommended to only call this from the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":60108,"byte_end":60170,"line_start":66,"line_end":66,"column_start":5,"column_end":67}},{"value":"/ implementation of a `Future::poll`, if necessary.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":60175,"byte_end":60228,"line_start":67,"line_end":67,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":60700,"byte_end":60710,"line_start":82,"line_end":82,"column_start":12,"column_end":22},"name":"accept_std","qualname":"<TcpListener>::accept_std","value":"pub fn accept_std(&mut Self) -> io::Result<(net::TcpStream, SocketAddr)>","parent":null,"children":[],"decl_id":null,"docs":" Like `accept`, except that it returns a raw `std::net::TcpStream`.","sig":null,"attributes":[{"value":"/ Like `accept`, except that it returns a raw `std::net::TcpStream`.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":60511,"byte_end":60581,"line_start":78,"line_end":78,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":60586,"byte_end":60589,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ The stream is *in blocking mode*, and is not associated with the Tokio","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":60594,"byte_end":60668,"line_start":80,"line_end":80,"column_start":5,"column_end":79}},{"value":"/ event loop.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":60673,"byte_end":60688,"line_start":81,"line_end":81,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":657},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":62657,"byte_end":62670,"line_start":125,"line_end":125,"column_start":12,"column_end":25},"name":"from_listener","qualname":"<TcpListener>::from_listener","value":"pub fn from_listener(net::TcpListener, &SocketAddr, &Handle)\n-> io::Result<TcpListener>","parent":null,"children":[],"decl_id":null,"docs":" Create a new TCP listener from the standard library's TCP listener.","sig":null,"attributes":[{"value":"/ Create a new TCP listener from the standard library's TCP listener.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":61270,"byte_end":61341,"line_start":98,"line_end":98,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":61346,"byte_end":61349,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ This method can be used when the `Handle::tcp_listen` method isn't","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":61354,"byte_end":61424,"line_start":100,"line_end":100,"column_start":5,"column_end":75}},{"value":"/ sufficient because perhaps some more configuration is needed in terms of","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":61429,"byte_end":61505,"line_start":101,"line_end":101,"column_start":5,"column_end":81}},{"value":"/ before the calls to `bind` and `listen`.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":61510,"byte_end":61554,"line_start":102,"line_end":102,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":61559,"byte_end":61562,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ This API is typically paired with the `net2` crate and the `TcpBuilder`","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":61567,"byte_end":61642,"line_start":104,"line_end":104,"column_start":5,"column_end":80}},{"value":"/ type to build up and customize a listener before it's shipped off to the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":61647,"byte_end":61723,"line_start":105,"line_end":105,"column_start":5,"column_end":81}},{"value":"/ backing event loop. This allows configuration of options like","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":61728,"byte_end":61793,"line_start":106,"line_end":106,"column_start":5,"column_end":70}},{"value":"/ `SO_REUSEPORT`, binding to multiple addresses, etc.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":61798,"byte_end":61853,"line_start":107,"line_end":107,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":61858,"byte_end":61861,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ The `addr` argument here is one of the addresses that `listener` is","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":61866,"byte_end":61937,"line_start":109,"line_end":109,"column_start":5,"column_end":76}},{"value":"/ bound to and the listener will only be guaranteed to accept connections","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":61942,"byte_end":62017,"line_start":110,"line_end":110,"column_start":5,"column_end":80}},{"value":"/ of the same address type currently.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":62022,"byte_end":62061,"line_start":111,"line_end":111,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":62066,"byte_end":62069,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ Finally, the `handle` argument is the event loop that this listener will","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":62074,"byte_end":62150,"line_start":113,"line_end":113,"column_start":5,"column_end":81}},{"value":"/ be bound to.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":62155,"byte_end":62171,"line_start":114,"line_end":114,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":62176,"byte_end":62179,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ The platform specific behavior of this function looks like:","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":62184,"byte_end":62247,"line_start":116,"line_end":116,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":62252,"byte_end":62255,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ * On Unix, the socket is placed into nonblocking mode and connections","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":62260,"byte_end":62333,"line_start":118,"line_end":118,"column_start":5,"column_end":78}},{"value":"/   can be accepted as normal","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":62338,"byte_end":62369,"line_start":119,"line_end":119,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":62374,"byte_end":62377,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ * On Windows, the address is stored internally and all future accepts","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":62382,"byte_end":62455,"line_start":121,"line_end":121,"column_start":5,"column_end":78}},{"value":"/   will only be for the same IP version as `addr` specified. That is, if","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":62460,"byte_end":62535,"line_start":122,"line_end":122,"column_start":5,"column_end":80}},{"value":"/   `addr` is an IPv4 address then all sockets accepted will be IPv4 as","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":62540,"byte_end":62613,"line_start":123,"line_end":123,"column_start":5,"column_end":78}},{"value":"/   well (same for IPv6).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":62618,"byte_end":62645,"line_start":124,"line_end":124,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":660},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":63402,"byte_end":63411,"line_start":145,"line_end":145,"column_start":12,"column_end":21},"name":"poll_read","qualname":"<TcpListener>::poll_read","value":"pub fn poll_read(&Self) -> Async<()>","parent":null,"children":[],"decl_id":null,"docs":" Test whether this socket is ready to be read or not.\n","sig":null,"attributes":[{"value":"/ Test whether this socket is ready to be read or not.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":63334,"byte_end":63390,"line_start":144,"line_end":144,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":662},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":63921,"byte_end":63931,"line_start":161,"line_end":161,"column_start":12,"column_end":22},"name":"local_addr","qualname":"<TcpListener>::local_addr","value":"pub fn local_addr(&Self) -> io::Result<SocketAddr>","parent":null,"children":[],"decl_id":null,"docs":" Returns the local address that this listener is bound to.","sig":null,"attributes":[{"value":"/ Returns the local address that this listener is bound to.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":63723,"byte_end":63784,"line_start":157,"line_end":157,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":63789,"byte_end":63792,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ This can be useful, for example, when binding to port 0 to figure out","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":63797,"byte_end":63870,"line_start":159,"line_end":159,"column_start":5,"column_end":78}},{"value":"/ which port was actually bound.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":63875,"byte_end":63909,"line_start":160,"line_end":160,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":663},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":64270,"byte_end":64278,"line_start":170,"line_end":170,"column_start":12,"column_end":20},"name":"incoming","qualname":"<TcpListener>::incoming","value":"pub fn incoming(Self) -> Incoming","parent":null,"children":[],"decl_id":null,"docs":" Consumes this listener, returning a stream of the sockets this listener\n accepts.","sig":null,"attributes":[{"value":"/ Consumes this listener, returning a stream of the sockets this listener","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":64017,"byte_end":64092,"line_start":165,"line_end":165,"column_start":5,"column_end":80}},{"value":"/ accepts.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":64097,"byte_end":64109,"line_start":166,"line_end":166,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":64114,"byte_end":64117,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ This method returns an implementation of the `Stream` trait which","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":64122,"byte_end":64191,"line_start":168,"line_end":168,"column_start":5,"column_end":74}},{"value":"/ resolves to the sockets the are accepted on this listener.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":64196,"byte_end":64258,"line_start":169,"line_end":169,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":664},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":64528,"byte_end":64535,"line_start":178,"line_end":178,"column_start":12,"column_end":19},"name":"set_ttl","qualname":"<TcpListener>::set_ttl","value":"pub fn set_ttl(&Self, u32) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value for the `IP_TTL` option on this socket.","sig":null,"attributes":[{"value":"/ Sets the value for the `IP_TTL` option on this socket.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":64343,"byte_end":64401,"line_start":174,"line_end":174,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":64406,"byte_end":64409,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ This value sets the time-to-live field that is used in every packet sent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":64414,"byte_end":64490,"line_start":176,"line_end":176,"column_start":5,"column_end":81}},{"value":"/ from this socket.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":64495,"byte_end":64516,"line_start":177,"line_end":177,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":665},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":64812,"byte_end":64815,"line_start":187,"line_end":187,"column_start":12,"column_end":15},"name":"ttl","qualname":"<TcpListener>::ttl","value":"pub fn ttl(&Self) -> io::Result<u32>","parent":null,"children":[],"decl_id":null,"docs":" Gets the value of the `IP_TTL` option for this socket.","sig":null,"attributes":[{"value":"/ Gets the value of the `IP_TTL` option for this socket.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":64623,"byte_end":64681,"line_start":182,"line_end":182,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":64686,"byte_end":64689,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ For more information about this option, see [`set_ttl`][link].","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":64694,"byte_end":64760,"line_start":184,"line_end":184,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":64765,"byte_end":64768,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ [link]: #method.set_ttl","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":64773,"byte_end":64800,"line_start":186,"line_end":186,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":666},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":65318,"byte_end":65329,"line_start":199,"line_end":199,"column_start":12,"column_end":23},"name":"set_only_v6","qualname":"<TcpListener>::set_only_v6","value":"pub fn set_only_v6(&Self, bool) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value for the `IPV6_V6ONLY` option on this socket.","sig":null,"attributes":[{"value":"/ Sets the value for the `IPV6_V6ONLY` option on this socket.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":64887,"byte_end":64950,"line_start":191,"line_end":191,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":64955,"byte_end":64958,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ If this is set to `true` then the socket is restricted to sending and","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":64963,"byte_end":65036,"line_start":193,"line_end":193,"column_start":5,"column_end":78}},{"value":"/ receiving IPv6 packets only. In this case two IPv4 and IPv6 applications","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":65041,"byte_end":65117,"line_start":194,"line_end":194,"column_start":5,"column_end":81}},{"value":"/ can bind the same port at the same time.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":65122,"byte_end":65166,"line_start":195,"line_end":195,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":65171,"byte_end":65174,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ If this is set to `false` then the socket can be used to send and","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":65179,"byte_end":65248,"line_start":197,"line_end":197,"column_start":5,"column_end":74}},{"value":"/ receive packets from an IPv4-mapped IPv6 address.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":65253,"byte_end":65306,"line_start":198,"line_end":198,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":667},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":65632,"byte_end":65639,"line_start":208,"line_end":208,"column_start":12,"column_end":19},"name":"only_v6","qualname":"<TcpListener>::only_v6","value":"pub fn only_v6(&Self) -> io::Result<bool>","parent":null,"children":[],"decl_id":null,"docs":" Gets the value of the `IPV6_V6ONLY` option for this socket.","sig":null,"attributes":[{"value":"/ Gets the value of the `IPV6_V6ONLY` option for this socket.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":65430,"byte_end":65493,"line_start":203,"line_end":203,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":65498,"byte_end":65501,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ For more information about this option, see [`set_only_v6`][link].","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":65506,"byte_end":65576,"line_start":205,"line_end":205,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":65581,"byte_end":65584,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ [link]: #method.set_only_v6","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":65589,"byte_end":65620,"line_start":207,"line_end":207,"column_start":5,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":674},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":66432,"byte_end":66441,"line_start":234,"line_end":234,"column_start":12,"column_end":21},"name":"TcpStream","qualname":"::net::tcp::TcpStream","value":"TcpStream {  }","parent":null,"children":[{"krate":0,"index":675}],"decl_id":null,"docs":" An I/O object representing a TCP stream connected to a remote endpoint.","sig":null,"attributes":[{"value":"/ An I/O object representing a TCP stream connected to a remote endpoint.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":66080,"byte_end":66155,"line_start":228,"line_end":228,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":66156,"byte_end":66159,"line_start":229,"line_end":229,"column_start":1,"column_end":4}},{"value":"/ A TCP stream can either be created by connecting to an endpoint or by","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":66160,"byte_end":66233,"line_start":230,"line_end":230,"column_start":1,"column_end":74}},{"value":"/ accepting a connection from a listener. Inside the stream is access to the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":66234,"byte_end":66312,"line_start":231,"line_end":231,"column_start":1,"column_end":79}},{"value":"/ raw underlying I/O object as well as streams for the read/write","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":66313,"byte_end":66380,"line_start":232,"line_end":232,"column_start":1,"column_end":68}},{"value":"/ notifications on the stream itself.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":66381,"byte_end":66420,"line_start":233,"line_end":233,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":676},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":66664,"byte_end":66676,"line_start":241,"line_end":241,"column_start":12,"column_end":24},"name":"TcpStreamNew","qualname":"::net::tcp::TcpStreamNew","value":"TcpStreamNew {  }","parent":null,"children":[{"krate":0,"index":677}],"decl_id":null,"docs":" Future returned by `TcpStream::connect` which will resolve to a `TcpStream`\n when the stream is connected.\n","sig":null,"attributes":[{"value":"/ Future returned by `TcpStream::connect` which will resolve to a `TcpStream`","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":66490,"byte_end":66569,"line_start":238,"line_end":238,"column_start":1,"column_end":80}},{"value":"/ when the stream is connected.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":66570,"byte_end":66603,"line_start":239,"line_end":239,"column_start":1,"column_end":34}},{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":66604,"byte_end":66652,"line_start":240,"line_end":240,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":688},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":67288,"byte_end":67295,"line_start":260,"line_end":260,"column_start":12,"column_end":19},"name":"connect","qualname":"<TcpStream>::connect","value":"pub fn connect(&SocketAddr, &Handle) -> TcpStreamNew","parent":null,"children":[],"decl_id":null,"docs":" Create a new TCP stream connected to the specified address.","sig":null,"attributes":[{"value":"/ Create a new TCP stream connected to the specified address.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":66867,"byte_end":66930,"line_start":253,"line_end":253,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":66935,"byte_end":66938,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ This function will create a new TCP socket and attempt to connect it to","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":66943,"byte_end":67018,"line_start":255,"line_end":255,"column_start":5,"column_end":80}},{"value":"/ the `addr` provided. The returned future will be resolved once the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":67023,"byte_end":67093,"line_start":256,"line_end":256,"column_start":5,"column_end":75}},{"value":"/ stream has successfully connected. If an error happens during the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":67098,"byte_end":67167,"line_start":257,"line_end":257,"column_start":5,"column_end":74}},{"value":"/ connection or during the socket creation, that error will be returned to","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":67172,"byte_end":67248,"line_start":258,"line_end":258,"column_start":5,"column_end":81}},{"value":"/ the future instead.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":67253,"byte_end":67276,"line_start":259,"line_end":259,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":689},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":67776,"byte_end":67784,"line_start":272,"line_end":272,"column_start":12,"column_end":20},"name":"connect2","qualname":"<TcpStream>::connect2","value":"pub fn connect2(&SocketAddr) -> TcpStreamNew","parent":null,"children":[],"decl_id":null,"docs":" Create a new TCP stream connected to the specified address.","sig":null,"attributes":[{"value":"/ Create a new TCP stream connected to the specified address.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":67576,"byte_end":67639,"line_start":268,"line_end":268,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":67644,"byte_end":67647,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ This is the same as `connect`, but uses the default reactor instead of","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":67652,"byte_end":67726,"line_start":270,"line_end":270,"column_start":5,"column_end":79}},{"value":"/ taking an explicit `&Handle`.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":67731,"byte_end":67764,"line_start":271,"line_end":271,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":692},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":68887,"byte_end":68898,"line_start":299,"line_end":299,"column_start":12,"column_end":23},"name":"from_stream","qualname":"<TcpStream>::from_stream","value":"pub fn from_stream(net::TcpStream, &Handle) -> io::Result<TcpStream>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `TcpStream` from a `net::TcpStream`.","sig":null,"attributes":[{"value":"/ Create a new `TcpStream` from a `net::TcpStream`.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":68576,"byte_end":68629,"line_start":294,"line_end":294,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":68634,"byte_end":68637,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ This function will convert a TCP stream in the standard library to a TCP","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":68642,"byte_end":68718,"line_start":296,"line_end":296,"column_start":5,"column_end":81}},{"value":"/ stream ready to be used with the provided event loop handle. The object","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":68723,"byte_end":68798,"line_start":297,"line_end":297,"column_start":5,"column_end":80}},{"value":"/ returned is associated with the event loop and ready to perform I/O.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":68803,"byte_end":68875,"line_start":298,"line_end":298,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":693},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":70241,"byte_end":70255,"line_start":325,"line_end":325,"column_start":12,"column_end":26},"name":"connect_stream","qualname":"<TcpStream>::connect_stream","value":"pub fn connect_stream(net::TcpStream, &SocketAddr, &Handle)\n-> Box<Future<Item = TcpStream, Error = TcpStream> + Send>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `TcpStream` from the pending socket inside the given\n `std::net::TcpStream`, connecting it to the address specified.","sig":null,"attributes":[{"value":"/ Creates a new `TcpStream` from the pending socket inside the given","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":69190,"byte_end":69260,"line_start":307,"line_end":307,"column_start":5,"column_end":75}},{"value":"/ `std::net::TcpStream`, connecting it to the address specified.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":69265,"byte_end":69331,"line_start":308,"line_end":308,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":69336,"byte_end":69339,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ This constructor allows configuring the socket before it's actually","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":69344,"byte_end":69415,"line_start":310,"line_end":310,"column_start":5,"column_end":76}},{"value":"/ connected, and this function will transfer ownership to the returned","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":69420,"byte_end":69492,"line_start":311,"line_end":311,"column_start":5,"column_end":77}},{"value":"/ `TcpStream` if successful. An unconnected `TcpStream` can be created","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":69497,"byte_end":69569,"line_start":312,"line_end":312,"column_start":5,"column_end":77}},{"value":"/ with the `net2::TcpBuilder` type (and also configured via that route).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":69574,"byte_end":69648,"line_start":313,"line_end":313,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":69653,"byte_end":69656,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ The platform specific behavior of this function looks like:","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":69661,"byte_end":69724,"line_start":315,"line_end":315,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":69729,"byte_end":69732,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ * On Unix, the socket is placed into nonblocking mode and then a","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":69737,"byte_end":69805,"line_start":317,"line_end":317,"column_start":5,"column_end":73}},{"value":"/   `connect` call is issued.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":69810,"byte_end":69841,"line_start":318,"line_end":318,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":69846,"byte_end":69849,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ * On Windows, the address is stored internally and the connect operation","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":69854,"byte_end":69930,"line_start":320,"line_end":320,"column_start":5,"column_end":81}},{"value":"/   is issued when the returned `TcpStream` is registered with an event","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":69935,"byte_end":70008,"line_start":321,"line_end":321,"column_start":5,"column_end":78}},{"value":"/   loop. Note that on Windows you must `bind` a socket before it can be","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":70013,"byte_end":70087,"line_start":322,"line_end":322,"column_start":5,"column_end":79}},{"value":"/   connected, so if a custom `TcpBuilder` is used it should be bound","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":70092,"byte_end":70163,"line_start":323,"line_end":323,"column_start":5,"column_end":76}},{"value":"/   (perhaps to `INADDR_ANY`) before this method is called.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":70168,"byte_end":70229,"line_start":324,"line_end":324,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":694},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":71065,"byte_end":71074,"line_start":342,"line_end":342,"column_start":12,"column_end":21},"name":"poll_read","qualname":"<TcpStream>::poll_read","value":"pub fn poll_read(&Self) -> Async<()>","parent":null,"children":[],"decl_id":null,"docs":" Test whether this socket is ready to be read or not.","sig":null,"attributes":[{"value":"/ Test whether this socket is ready to be read or not.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":70678,"byte_end":70734,"line_start":336,"line_end":336,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":70739,"byte_end":70742,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ If the socket is *not* readable then the current task is scheduled to","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":70747,"byte_end":70820,"line_start":338,"line_end":338,"column_start":5,"column_end":78}},{"value":"/ get a notification when the socket does become readable. That is, this","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":70825,"byte_end":70899,"line_start":339,"line_end":339,"column_start":5,"column_end":79}},{"value":"/ is only suitable for calling in a `Future::poll` method and will","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":70904,"byte_end":70972,"line_start":340,"line_end":340,"column_start":5,"column_end":73}},{"value":"/ automatically handle ensuring a retry once the socket is readable again.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":70977,"byte_end":71053,"line_start":341,"line_end":341,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":696},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":71779,"byte_end":71789,"line_start":360,"line_end":360,"column_start":12,"column_end":22},"name":"poll_write","qualname":"<TcpStream>::poll_write","value":"pub fn poll_write(&Self) -> Async<()>","parent":null,"children":[],"decl_id":null,"docs":" Test whether this socket is ready to be written to or not.","sig":null,"attributes":[{"value":"/ Test whether this socket is ready to be written to or not.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":71386,"byte_end":71448,"line_start":354,"line_end":354,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":71453,"byte_end":71456,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ If the socket is *not* writable then the current task is scheduled to","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":71461,"byte_end":71534,"line_start":356,"line_end":356,"column_start":5,"column_end":78}},{"value":"/ get a notification when the socket does become writable. That is, this","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":71539,"byte_end":71613,"line_start":357,"line_end":357,"column_start":5,"column_end":79}},{"value":"/ is only suitable for calling in a `Future::poll` method and will","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":71618,"byte_end":71686,"line_start":358,"line_end":358,"column_start":5,"column_end":73}},{"value":"/ automatically handle ensuring a retry once the socket is writable again.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":71691,"byte_end":71767,"line_start":359,"line_end":359,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":698},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":72151,"byte_end":72161,"line_start":373,"line_end":373,"column_start":12,"column_end":22},"name":"local_addr","qualname":"<TcpStream>::local_addr","value":"pub fn local_addr(&Self) -> io::Result<SocketAddr>","parent":null,"children":[],"decl_id":null,"docs":" Returns the local address that this stream is bound to.\n","sig":null,"attributes":[{"value":"/ Returns the local address that this stream is bound to.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":72080,"byte_end":72139,"line_start":372,"line_end":372,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":699},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":72323,"byte_end":72332,"line_start":378,"line_end":378,"column_start":12,"column_end":21},"name":"peer_addr","qualname":"<TcpStream>::peer_addr","value":"pub fn peer_addr(&Self) -> io::Result<SocketAddr>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remote address that this stream is connected to.\n","sig":null,"attributes":[{"value":"/ Returns the remote address that this stream is connected to.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":72247,"byte_end":72311,"line_start":377,"line_end":377,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":700},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":72769,"byte_end":72773,"line_start":388,"line_end":388,"column_start":12,"column_end":16},"name":"peek","qualname":"<TcpStream>::peek","value":"pub fn peek(&Self, &mut [u8]) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Receives data on the socket from the remote address to which it is\n connected, without removing that data from the queue. On success,\n returns the number of bytes peeked.","sig":null,"attributes":[{"value":"/ Receives data on the socket from the remote address to which it is","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":72417,"byte_end":72487,"line_start":382,"line_end":382,"column_start":5,"column_end":75}},{"value":"/ connected, without removing that data from the queue. On success,","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":72492,"byte_end":72561,"line_start":383,"line_end":383,"column_start":5,"column_end":74}},{"value":"/ returns the number of bytes peeked.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":72566,"byte_end":72605,"line_start":384,"line_end":384,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":72610,"byte_end":72613,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ Successive calls return the same data. This is accomplished by passing","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":72618,"byte_end":72692,"line_start":386,"line_end":386,"column_start":5,"column_end":79}},{"value":"/ `MSG_PEEK` as a flag to the underlying recv system call.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":72697,"byte_end":72757,"line_start":387,"line_end":387,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":701},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":73392,"byte_end":73400,"line_start":405,"line_end":405,"column_start":12,"column_end":20},"name":"shutdown","qualname":"<TcpStream>::shutdown","value":"pub fn shutdown(&Self, Shutdown) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Shuts down the read, write, or both halves of this connection.","sig":null,"attributes":[{"value":"/ Shuts down the read, write, or both halves of this connection.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":73117,"byte_end":73183,"line_start":400,"line_end":400,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":73188,"byte_end":73191,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ This function will cause all pending and future I/O on the specified","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":73196,"byte_end":73268,"line_start":402,"line_end":402,"column_start":5,"column_end":77}},{"value":"/ portions to return immediately with an appropriate value (see the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":73273,"byte_end":73342,"line_start":403,"line_end":403,"column_start":5,"column_end":74}},{"value":"/ documentation of `Shutdown`).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":73347,"byte_end":73380,"line_start":404,"line_end":404,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":73909,"byte_end":73920,"line_start":416,"line_end":416,"column_start":12,"column_end":23},"name":"set_nodelay","qualname":"<TcpStream>::set_nodelay","value":"pub fn set_nodelay(&Self, bool) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the `TCP_NODELAY` option on this socket.","sig":null,"attributes":[{"value":"/ Sets the value of the `TCP_NODELAY` option on this socket.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":73494,"byte_end":73556,"line_start":409,"line_end":409,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":73561,"byte_end":73564,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ If set, this option disables the Nagle algorithm. This means that","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":73569,"byte_end":73638,"line_start":411,"line_end":411,"column_start":5,"column_end":74}},{"value":"/ segments are always sent as soon as possible, even if there is only a","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":73643,"byte_end":73716,"line_start":412,"line_end":412,"column_start":5,"column_end":78}},{"value":"/ small amount of data. When not set, data is buffered until there is a","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":73721,"byte_end":73794,"line_start":413,"line_end":413,"column_start":5,"column_end":78}},{"value":"/ sufficient amount to send out, thereby avoiding the frequent sending of","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":73799,"byte_end":73874,"line_start":414,"line_end":414,"column_start":5,"column_end":80}},{"value":"/ small packets.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":73879,"byte_end":73897,"line_start":415,"line_end":415,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":703},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":74222,"byte_end":74229,"line_start":425,"line_end":425,"column_start":12,"column_end":19},"name":"nodelay","qualname":"<TcpStream>::nodelay","value":"pub fn nodelay(&Self) -> io::Result<bool>","parent":null,"children":[],"decl_id":null,"docs":" Gets the value of the `TCP_NODELAY` option on this socket.","sig":null,"attributes":[{"value":"/ Gets the value of the `TCP_NODELAY` option on this socket.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":74021,"byte_end":74083,"line_start":420,"line_end":420,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":74088,"byte_end":74091,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ For more information about this option, see [`set_nodelay`][link].","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":74096,"byte_end":74166,"line_start":422,"line_end":422,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":74171,"byte_end":74174,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ [link]: #method.set_nodelay","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":74179,"byte_end":74210,"line_start":424,"line_end":424,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":74488,"byte_end":74508,"line_start":433,"line_end":433,"column_start":12,"column_end":32},"name":"set_recv_buffer_size","qualname":"<TcpStream>::set_recv_buffer_size","value":"pub fn set_recv_buffer_size(&Self, usize) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the `SO_RCVBUF` option on this socket.","sig":null,"attributes":[{"value":"/ Sets the value of the `SO_RCVBUF` option on this socket.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":74306,"byte_end":74366,"line_start":429,"line_end":429,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":74371,"byte_end":74374,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ Changes the size of the operating system's receive buffer associated","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":74379,"byte_end":74451,"line_start":431,"line_end":431,"column_start":5,"column_end":77}},{"value":"/ with the socket.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":74456,"byte_end":74476,"line_start":432,"line_end":432,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":705},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":74840,"byte_end":74856,"line_start":443,"line_end":443,"column_start":12,"column_end":28},"name":"recv_buffer_size","qualname":"<TcpStream>::recv_buffer_size","value":"pub fn recv_buffer_size(&Self) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Gets the value of the `SO_RCVBUF` option on this socket.","sig":null,"attributes":[{"value":"/ Gets the value of the `SO_RCVBUF` option on this socket.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":74613,"byte_end":74673,"line_start":437,"line_end":437,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":74678,"byte_end":74681,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ For more information about this option, see","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":74686,"byte_end":74733,"line_start":439,"line_end":439,"column_start":5,"column_end":52}},{"value":"/ [`set_recv_buffer_size`][link].","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":74738,"byte_end":74773,"line_start":440,"line_end":440,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":74778,"byte_end":74781,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ [link]: #tymethod.set_recv_buffer_size","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":74786,"byte_end":74828,"line_start":442,"line_end":442,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":75122,"byte_end":75142,"line_start":451,"line_end":451,"column_start":12,"column_end":32},"name":"set_send_buffer_size","qualname":"<TcpStream>::set_send_buffer_size","value":"pub fn set_send_buffer_size(&Self, usize) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the `SO_SNDBUF` option on this socket.","sig":null,"attributes":[{"value":"/ Sets the value of the `SO_SNDBUF` option on this socket.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":74943,"byte_end":75003,"line_start":447,"line_end":447,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":75008,"byte_end":75011,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ Changes the size of the operating system's send buffer associated with","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":75016,"byte_end":75090,"line_start":449,"line_end":449,"column_start":5,"column_end":79}},{"value":"/ the socket.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":75095,"byte_end":75110,"line_start":450,"line_end":450,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":75456,"byte_end":75472,"line_start":460,"line_end":460,"column_start":12,"column_end":28},"name":"send_buffer_size","qualname":"<TcpStream>::send_buffer_size","value":"pub fn send_buffer_size(&Self) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Gets the value of the `SO_SNDBUF` option on this socket.","sig":null,"attributes":[{"value":"/ Gets the value of the `SO_SNDBUF` option on this socket.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":75247,"byte_end":75307,"line_start":455,"line_end":455,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":75312,"byte_end":75315,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ For more information about this option, see [`set_send_buffer`][link].","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":75320,"byte_end":75394,"line_start":457,"line_end":457,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":75399,"byte_end":75402,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ [link]: #tymethod.set_send_buffer","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":75407,"byte_end":75444,"line_start":459,"line_end":459,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":76182,"byte_end":76195,"line_start":476,"line_end":476,"column_start":12,"column_end":25},"name":"set_keepalive","qualname":"<TcpStream>::set_keepalive","value":"pub fn set_keepalive(&Self, Option<Duration>) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets whether keepalive messages are enabled to be sent on this socket.","sig":null,"attributes":[{"value":"/ Sets whether keepalive messages are enabled to be sent on this socket.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":75559,"byte_end":75633,"line_start":464,"line_end":464,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":75638,"byte_end":75641,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ On Unix, this option will set the `SO_KEEPALIVE` as well as the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":75646,"byte_end":75713,"line_start":466,"line_end":466,"column_start":5,"column_end":72}},{"value":"/ `TCP_KEEPALIVE` or `TCP_KEEPIDLE` option (depending on your platform).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":75718,"byte_end":75792,"line_start":467,"line_end":467,"column_start":5,"column_end":79}},{"value":"/ On Windows, this will set the `SIO_KEEPALIVE_VALS` option.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":75797,"byte_end":75859,"line_start":468,"line_end":468,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":75864,"byte_end":75867,"line_start":469,"line_end":469,"column_start":5,"column_end":8}},{"value":"/ If `None` is specified then keepalive messages are disabled, otherwise","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":75872,"byte_end":75946,"line_start":470,"line_end":470,"column_start":5,"column_end":79}},{"value":"/ the duration specified will be the time to remain idle before sending a","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":75951,"byte_end":76026,"line_start":471,"line_end":471,"column_start":5,"column_end":80}},{"value":"/ TCP keepalive probe.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":76031,"byte_end":76055,"line_start":472,"line_end":472,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":76060,"byte_end":76063,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ Some platforms specify this value in seconds, so sub-second","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":76068,"byte_end":76131,"line_start":474,"line_end":474,"column_start":5,"column_end":68}},{"value":"/ specifications may be omitted.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":76136,"byte_end":76170,"line_start":475,"line_end":475,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":709},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":76578,"byte_end":76587,"line_start":486,"line_end":486,"column_start":12,"column_end":21},"name":"keepalive","qualname":"<TcpStream>::keepalive","value":"pub fn keepalive(&Self) -> io::Result<Option<Duration>>","parent":null,"children":[],"decl_id":null,"docs":" Returns whether keepalive messages are enabled on this socket, and if so\n the duration of time between them.","sig":null,"attributes":[{"value":"/ Returns whether keepalive messages are enabled on this socket, and if so","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":76314,"byte_end":76390,"line_start":480,"line_end":480,"column_start":5,"column_end":81}},{"value":"/ the duration of time between them.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":76395,"byte_end":76433,"line_start":481,"line_end":481,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":76438,"byte_end":76441,"line_start":482,"line_end":482,"column_start":5,"column_end":8}},{"value":"/ For more information about this option, see [`set_keepalive`][link].","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":76446,"byte_end":76518,"line_start":483,"line_end":483,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":76523,"byte_end":76526,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ [link]: #tymethod.set_keepalive","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":76531,"byte_end":76566,"line_start":485,"line_end":485,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":76863,"byte_end":76870,"line_start":494,"line_end":494,"column_start":12,"column_end":19},"name":"set_ttl","qualname":"<TcpStream>::set_ttl","value":"pub fn set_ttl(&Self, u32) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value for the `IP_TTL` option on this socket.","sig":null,"attributes":[{"value":"/ Sets the value for the `IP_TTL` option on this socket.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":76678,"byte_end":76736,"line_start":490,"line_end":490,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":76741,"byte_end":76744,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ This value sets the time-to-live field that is used in every packet sent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":76749,"byte_end":76825,"line_start":492,"line_end":492,"column_start":5,"column_end":81}},{"value":"/ from this socket.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":76830,"byte_end":76851,"line_start":493,"line_end":493,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":711},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":77149,"byte_end":77152,"line_start":503,"line_end":503,"column_start":12,"column_end":15},"name":"ttl","qualname":"<TcpStream>::ttl","value":"pub fn ttl(&Self) -> io::Result<u32>","parent":null,"children":[],"decl_id":null,"docs":" Gets the value of the `IP_TTL` option for this socket.","sig":null,"attributes":[{"value":"/ Gets the value of the `IP_TTL` option for this socket.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":76958,"byte_end":77016,"line_start":498,"line_end":498,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":77021,"byte_end":77024,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ For more information about this option, see [`set_ttl`][link].","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":77029,"byte_end":77095,"line_start":500,"line_end":500,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":77100,"byte_end":77103,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ [link]: #tymethod.set_ttl","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":77108,"byte_end":77137,"line_start":502,"line_end":502,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":712},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":77655,"byte_end":77666,"line_start":515,"line_end":515,"column_start":12,"column_end":23},"name":"set_only_v6","qualname":"<TcpStream>::set_only_v6","value":"pub fn set_only_v6(&Self, bool) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value for the `IPV6_V6ONLY` option on this socket.","sig":null,"attributes":[{"value":"/ Sets the value for the `IPV6_V6ONLY` option on this socket.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":77224,"byte_end":77287,"line_start":507,"line_end":507,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":77292,"byte_end":77295,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ If this is set to `true` then the socket is restricted to sending and","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":77300,"byte_end":77373,"line_start":509,"line_end":509,"column_start":5,"column_end":78}},{"value":"/ receiving IPv6 packets only. In this case two IPv4 and IPv6 applications","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":77378,"byte_end":77454,"line_start":510,"line_end":510,"column_start":5,"column_end":81}},{"value":"/ can bind the same port at the same time.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":77459,"byte_end":77503,"line_start":511,"line_end":511,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":77508,"byte_end":77511,"line_start":512,"line_end":512,"column_start":5,"column_end":8}},{"value":"/ If this is set to `false` then the socket can be used to send and","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":77516,"byte_end":77585,"line_start":513,"line_end":513,"column_start":5,"column_end":74}},{"value":"/ receive packets from an IPv4-mapped IPv6 address.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":77590,"byte_end":77643,"line_start":514,"line_end":514,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":713},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":77971,"byte_end":77978,"line_start":524,"line_end":524,"column_start":12,"column_end":19},"name":"only_v6","qualname":"<TcpStream>::only_v6","value":"pub fn only_v6(&Self) -> io::Result<bool>","parent":null,"children":[],"decl_id":null,"docs":" Gets the value of the `IPV6_V6ONLY` option for this socket.","sig":null,"attributes":[{"value":"/ Gets the value of the `IPV6_V6ONLY` option for this socket.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":77767,"byte_end":77830,"line_start":519,"line_end":519,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":77835,"byte_end":77838,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ For more information about this option, see [`set_only_v6`][link].","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":77843,"byte_end":77913,"line_start":521,"line_end":521,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":77918,"byte_end":77921,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/ [link]: #tymethod.set_only_v6","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":77926,"byte_end":77959,"line_start":523,"line_end":523,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":714},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":78142,"byte_end":78152,"line_start":529,"line_end":529,"column_start":12,"column_end":22},"name":"set_linger","qualname":"<TcpStream>::set_linger","value":"pub fn set_linger(&Self, Option<Duration>) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the linger duration of this socket by setting the SO_LINGER option\n","sig":null,"attributes":[{"value":"/ Sets the linger duration of this socket by setting the SO_LINGER option","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":78055,"byte_end":78130,"line_start":528,"line_end":528,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":715},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":78345,"byte_end":78351,"line_start":534,"line_end":534,"column_start":12,"column_end":18},"name":"linger","qualname":"<TcpStream>::linger","value":"pub fn linger(&Self) -> io::Result<Option<Duration>>","parent":null,"children":[],"decl_id":null,"docs":" reads the linger duration for this socket by getting the SO_LINGER option\n","sig":null,"attributes":[{"value":"/ reads the linger duration for this socket by getting the SO_LINGER option","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":78256,"byte_end":78333,"line_start":533,"line_end":533,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":716},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":78528,"byte_end":78544,"line_start":540,"line_end":540,"column_start":12,"column_end":28},"name":"set_keepalive_ms","qualname":"<TcpStream>::set_keepalive_ms","value":"pub fn set_keepalive_ms(&Self, Option<u32>) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"0.1.8\", note = \"use set_keepalive\")","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":78439,"byte_end":78497,"line_start":538,"line_end":538,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":717},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":78775,"byte_end":78787,"line_start":547,"line_end":547,"column_start":12,"column_end":24},"name":"keepalive_ms","qualname":"<TcpStream>::keepalive_ms","value":"pub fn keepalive_ms(&Self) -> io::Result<Option<u32>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(since = \"0.1.8\", note = \"use keepalive\")","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":78690,"byte_end":78744,"line_start":545,"line_end":545,"column_start":5,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":825},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":87491,"byte_end":87500,"line_start":11,"line_end":11,"column_start":12,"column_end":21},"name":"UdpSocket","qualname":"::net::udp::UdpSocket","value":"UdpSocket {  }","parent":null,"children":[{"krate":0,"index":826}],"decl_id":null,"docs":" An I/O object representing a UDP socket.\n","sig":null,"attributes":[{"value":"/ An I/O object representing a UDP socket.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":87435,"byte_end":87479,"line_start":10,"line_end":10,"column_start":1,"column_end":45}}]},{"kind":"Trait","id":{"krate":0,"index":863},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":106219,"byte_end":106227,"line_start":22,"line_end":22,"column_start":11,"column_end":19},"name":"UdpCodec","qualname":"::net::udp::frame::UdpCodec","value":"UdpCodec","parent":null,"children":[{"krate":0,"index":864},{"krate":0,"index":865},{"krate":0,"index":866},{"krate":0,"index":867}],"decl_id":null,"docs":" Encoding of frames via buffers.","sig":null,"attributes":[{"value":"/ Encoding of frames via buffers.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":105511,"byte_end":105546,"line_start":8,"line_end":8,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":105547,"byte_end":105550,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This trait is used when constructing an instance of `UdpFramed` and provides","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":105551,"byte_end":105631,"line_start":10,"line_end":10,"column_start":1,"column_end":81}},{"value":"/ the `In` and `Out` types which are decoded and encoded from the socket,","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":105632,"byte_end":105707,"line_start":11,"line_end":11,"column_start":1,"column_end":76}},{"value":"/ respectively.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":105708,"byte_end":105725,"line_start":12,"line_end":12,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":105726,"byte_end":105729,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Because UDP is a connectionless protocol, the `decode` method receives the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":105730,"byte_end":105808,"line_start":14,"line_end":14,"column_start":1,"column_end":79}},{"value":"/ address where data came from and the `encode` method is also responsible for","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":105809,"byte_end":105889,"line_start":15,"line_end":15,"column_start":1,"column_end":81}},{"value":"/ determining the remote host to which the datagram should be sent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":105890,"byte_end":105958,"line_start":16,"line_end":16,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":105959,"byte_end":105962,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ The trait itself is implemented on a type that can track state for decoding","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":105963,"byte_end":106042,"line_start":18,"line_end":18,"column_start":1,"column_end":80}},{"value":"/ or encoding, which is particularly useful for streaming parsers. In many","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":106043,"byte_end":106119,"line_start":19,"line_end":19,"column_start":1,"column_end":77}},{"value":"/ cases, though, this type will simply be a unit struct (e.g. `struct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":106120,"byte_end":106191,"line_start":20,"line_end":20,"column_start":1,"column_end":72}},{"value":"/ HttpCodec`).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":106192,"byte_end":106208,"line_start":21,"line_end":21,"column_start":1,"column_end":17}}]},{"kind":"Type","id":{"krate":0,"index":864},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":106275,"byte_end":106277,"line_start":24,"line_end":24,"column_start":10,"column_end":12},"name":"In","qualname":"::net::udp::frame::UdpCodec::In","value":"type In;","parent":{"krate":0,"index":863},"children":[],"decl_id":null,"docs":" The type of decoded frames.\n","sig":null,"attributes":[{"value":"/ The type of decoded frames.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":106234,"byte_end":106265,"line_start":23,"line_end":23,"column_start":5,"column_end":36}}]},{"kind":"Type","id":{"krate":0,"index":865},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":106331,"byte_end":106334,"line_start":27,"line_end":27,"column_start":10,"column_end":13},"name":"Out","qualname":"::net::udp::frame::UdpCodec::Out","value":"type Out;","parent":{"krate":0,"index":863},"children":[],"decl_id":null,"docs":" The type of frames to be encoded.\n","sig":null,"attributes":[{"value":"/ The type of frames to be encoded.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":106284,"byte_end":106321,"line_start":26,"line_end":26,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":866},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":107020,"byte_end":107026,"line_start":40,"line_end":40,"column_start":8,"column_end":14},"name":"decode","qualname":"::net::udp::frame::UdpCodec::decode","value":"pub fn decode(&mut Self, &SocketAddr, &[u8]) -> io::Result<Self::In>","parent":{"krate":0,"index":863},"children":[],"decl_id":null,"docs":" Attempts to decode a frame from the provided buffer of bytes.","sig":null,"attributes":[{"value":"/ Attempts to decode a frame from the provided buffer of bytes.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":106341,"byte_end":106406,"line_start":29,"line_end":29,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":106411,"byte_end":106414,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ This method is called by `UdpFramed` on a single datagram which has been","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":106419,"byte_end":106495,"line_start":31,"line_end":31,"column_start":5,"column_end":81}},{"value":"/ read from a socket. The `buf` argument contains the data that was","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":106500,"byte_end":106569,"line_start":32,"line_end":32,"column_start":5,"column_end":74}},{"value":"/ received from the remote address, and `src` is the address the data came","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":106574,"byte_end":106650,"line_start":33,"line_end":33,"column_start":5,"column_end":81}},{"value":"/ from. Note that typically this method should require the entire contents","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":106655,"byte_end":106731,"line_start":34,"line_end":34,"column_start":5,"column_end":81}},{"value":"/ of `buf` to be valid or otherwise return an error with trailing data.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":106736,"byte_end":106809,"line_start":35,"line_end":35,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":106814,"byte_end":106817,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ Finally, if the bytes in the buffer are malformed then an error is","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":106822,"byte_end":106892,"line_start":37,"line_end":37,"column_start":5,"column_end":75}},{"value":"/ returned indicating why. This informs `Framed` that the stream is now","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":106897,"byte_end":106970,"line_start":38,"line_end":38,"column_start":5,"column_end":78}},{"value":"/ corrupt and should be terminated.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":106975,"byte_end":107012,"line_start":39,"line_end":39,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":867},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":107514,"byte_end":107520,"line_start":50,"line_end":50,"column_start":8,"column_end":14},"name":"encode","qualname":"::net::udp::frame::UdpCodec::encode","value":"pub fn encode(&mut Self, Self::Out, &mut Vec<u8>) -> SocketAddr","parent":{"krate":0,"index":863},"children":[],"decl_id":null,"docs":" Encodes a frame into the buffer provided.","sig":null,"attributes":[{"value":"/ Encodes a frame into the buffer provided.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":107098,"byte_end":107143,"line_start":42,"line_end":42,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":107148,"byte_end":107151,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ This method will encode `msg` into the byte buffer provided by `buf`.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":107156,"byte_end":107229,"line_start":44,"line_end":44,"column_start":5,"column_end":78}},{"value":"/ The `buf` provided is an internal buffer of the `Framed` instance and","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":107234,"byte_end":107307,"line_start":45,"line_end":45,"column_start":5,"column_end":78}},{"value":"/ will be written out when possible.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":107312,"byte_end":107350,"line_start":46,"line_end":46,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":107355,"byte_end":107358,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ The encode method also determines the destination to which the buffer","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":107363,"byte_end":107436,"line_start":48,"line_end":48,"column_start":5,"column_end":78}},{"value":"/ should be directed, which will be returned as a `SocketAddr`.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":107441,"byte_end":107506,"line_start":49,"line_end":49,"column_start":5,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":868},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":107870,"byte_end":107879,"line_start":59,"line_end":59,"column_start":12,"column_end":21},"name":"UdpFramed","qualname":"::net::udp::frame::UdpFramed","value":"UdpFramed {  }","parent":null,"children":[{"krate":0,"index":870},{"krate":0,"index":871},{"krate":0,"index":872},{"krate":0,"index":873},{"krate":0,"index":874},{"krate":0,"index":875}],"decl_id":null,"docs":" A unified `Stream` and `Sink` interface to an underlying `UdpSocket`, using\n the `UdpCodec` trait to encode and decode frames.","sig":null,"attributes":[{"value":"/ A unified `Stream` and `Sink` interface to an underlying `UdpSocket`, using","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":107585,"byte_end":107664,"line_start":53,"line_end":53,"column_start":1,"column_end":80}},{"value":"/ the `UdpCodec` trait to encode and decode frames.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":107665,"byte_end":107718,"line_start":54,"line_end":54,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":107719,"byte_end":107722,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ You can acquire a `UdpFramed` instance by using the `UdpSocket::framed`","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":107723,"byte_end":107798,"line_start":56,"line_end":56,"column_start":1,"column_end":76}},{"value":"/ adapter.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":107799,"byte_end":107811,"line_start":57,"line_end":57,"column_start":1,"column_end":13}},{"value":"must_use = \"sinks do nothing unless polled\"","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":107812,"byte_end":107858,"line_start":58,"line_end":58,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":892},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":110418,"byte_end":110425,"line_start":146,"line_end":146,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<UdpFramed<C>>::get_ref","value":"pub fn get_ref(&Self) -> &UdpSocket","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying I/O stream wrapped by `Framed`.","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying I/O stream wrapped by `Framed`.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":110143,"byte_end":110216,"line_start":141,"line_end":141,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":110221,"byte_end":110224,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ Note that care should be taken to not tamper with the underlying stream","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":110229,"byte_end":110304,"line_start":143,"line_end":143,"column_start":5,"column_end":80}},{"value":"/ of data coming in as it may corrupt the stream of frames otherwise being","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":110309,"byte_end":110385,"line_start":144,"line_end":144,"column_start":5,"column_end":81}},{"value":"/ worked with.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":110390,"byte_end":110406,"line_start":145,"line_end":145,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":893},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":110772,"byte_end":110779,"line_start":156,"line_end":156,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<UdpFramed<C>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut UdpSocket","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying I/O stream wrapped by\n `Framed`.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying I/O stream wrapped by","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":110481,"byte_end":110552,"line_start":150,"line_end":150,"column_start":5,"column_end":76}},{"value":"/ `Framed`.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":110557,"byte_end":110570,"line_start":151,"line_end":151,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":110575,"byte_end":110578,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ Note that care should be taken to not tamper with the underlying stream","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":110583,"byte_end":110658,"line_start":153,"line_end":153,"column_start":5,"column_end":80}},{"value":"/ of data coming in as it may corrupt the stream of frames otherwise being","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":110663,"byte_end":110739,"line_start":154,"line_end":154,"column_start":5,"column_end":81}},{"value":"/ worked with.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":110744,"byte_end":110760,"line_start":155,"line_end":155,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":894},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":111112,"byte_end":111122,"line_start":165,"line_end":165,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<UdpFramed<C>>::into_inner","value":"pub fn into_inner(Self) -> UdpSocket","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `Framed`, returning its underlying I/O stream.","sig":null,"attributes":[{"value":"/ Consumes the `Framed`, returning its underlying I/O stream.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":110847,"byte_end":110910,"line_start":160,"line_end":160,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":110915,"byte_end":110918,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ Note that care should be taken to not tamper with the underlying stream","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":110923,"byte_end":110998,"line_start":162,"line_end":162,"column_start":5,"column_end":80}},{"value":"/ of data coming in as it may corrupt the stream of frames otherwise being","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":111003,"byte_end":111079,"line_start":163,"line_end":163,"column_start":5,"column_end":81}},{"value":"/ worked with.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":111084,"byte_end":111100,"line_start":164,"line_end":164,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":903},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":87869,"byte_end":87873,"line_start":23,"line_end":23,"column_start":12,"column_end":16},"name":"bind","qualname":"<UdpSocket>::bind","value":"pub fn bind(&SocketAddr, &Handle) -> io::Result<UdpSocket>","parent":null,"children":[],"decl_id":null,"docs":" Create a new UDP socket bound to the specified address.","sig":null,"attributes":[{"value":"/ Create a new UDP socket bound to the specified address.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":87626,"byte_end":87685,"line_start":19,"line_end":19,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":87690,"byte_end":87693,"line_start":20,"line_end":20,"column_start":5,"column_end":8}},{"value":"/ This function will create a new UDP socket and attempt to bind it to the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":87698,"byte_end":87774,"line_start":21,"line_end":21,"column_start":5,"column_end":81}},{"value":"/ `addr` provided. If the result is `Ok`, the socket has successfully bound.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":87779,"byte_end":87857,"line_start":22,"line_end":22,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":905},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":88780,"byte_end":88791,"line_start":42,"line_end":42,"column_start":12,"column_end":23},"name":"from_socket","qualname":"<UdpSocket>::from_socket","value":"pub fn from_socket(net::UdpSocket, &Handle) -> io::Result<UdpSocket>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `UdpSocket` from the previously bound socket provided.","sig":null,"attributes":[{"value":"/ Creates a new `UdpSocket` from the previously bound socket provided.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":88254,"byte_end":88326,"line_start":33,"line_end":33,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":88331,"byte_end":88334,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ The socket given will be registered with the event loop that `handle` is","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":88339,"byte_end":88415,"line_start":35,"line_end":35,"column_start":5,"column_end":81}},{"value":"/ associated with. This function requires that `socket` has previously","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":88420,"byte_end":88492,"line_start":36,"line_end":36,"column_start":5,"column_end":77}},{"value":"/ been bound to an address to work correctly.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":88497,"byte_end":88544,"line_start":37,"line_end":37,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":88549,"byte_end":88552,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ This can be used in conjunction with net2's `UdpBuilder` interface to","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":88557,"byte_end":88630,"line_start":39,"line_end":39,"column_start":5,"column_end":78}},{"value":"/ configure a socket before it's handed off, such as setting options like","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":88635,"byte_end":88710,"line_start":40,"line_end":40,"column_start":5,"column_end":80}},{"value":"/ `reuse_address` or binding to multiple addresses.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":88715,"byte_end":88768,"line_start":41,"line_end":41,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":906},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":90061,"byte_end":90067,"line_start":67,"line_end":67,"column_start":12,"column_end":18},"name":"framed","qualname":"<UdpSocket>::framed","value":"pub fn framed<C: UdpCodec>(Self, C) -> UdpFramed<C>","parent":null,"children":[],"decl_id":null,"docs":" Provides a `Stream` and `Sink` interface for reading and writing to this\n `UdpSocket` object, using the provided `UdpCodec` to read and write the\n raw data.","sig":null,"attributes":[{"value":"/ Provides a `Stream` and `Sink` interface for reading and writing to this","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":88996,"byte_end":89072,"line_start":48,"line_end":48,"column_start":5,"column_end":81}},{"value":"/ `UdpSocket` object, using the provided `UdpCodec` to read and write the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":89077,"byte_end":89152,"line_start":49,"line_end":49,"column_start":5,"column_end":80}},{"value":"/ raw data.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":89157,"byte_end":89170,"line_start":50,"line_end":50,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":89175,"byte_end":89178,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ Raw UDP sockets work with datagrams, but higher-level code usually","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":89183,"byte_end":89253,"line_start":52,"line_end":52,"column_start":5,"column_end":75}},{"value":"/ wants to batch these into meaningful chunks, called \"frames\". This","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":89258,"byte_end":89328,"line_start":53,"line_end":53,"column_start":5,"column_end":75}},{"value":"/ method layers framing on top of this socket by using the `UdpCodec`","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":89333,"byte_end":89404,"line_start":54,"line_end":54,"column_start":5,"column_end":76}},{"value":"/ trait to handle encoding and decoding of messages frames. Note that","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":89409,"byte_end":89480,"line_start":55,"line_end":55,"column_start":5,"column_end":76}},{"value":"/ the incoming and outgoing frame types may be distinct.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":89485,"byte_end":89543,"line_start":56,"line_end":56,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":89548,"byte_end":89551,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ This function returns a *single* object that is both `Stream` and","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":89556,"byte_end":89625,"line_start":58,"line_end":58,"column_start":5,"column_end":74}},{"value":"/ `Sink`; grouping this into a single object is often useful for layering","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":89630,"byte_end":89705,"line_start":59,"line_end":59,"column_start":5,"column_end":80}},{"value":"/ things which require both read and write access to the underlying","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":89710,"byte_end":89779,"line_start":60,"line_end":60,"column_start":5,"column_end":74}},{"value":"/ object.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":89784,"byte_end":89795,"line_start":61,"line_end":61,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":89800,"byte_end":89803,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ If you want to work more directly with the streams and sink, consider","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":89808,"byte_end":89881,"line_start":63,"line_end":63,"column_start":5,"column_end":78}},{"value":"/ calling `split` on the `UdpFramed` returned by this method, which will","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":89886,"byte_end":89960,"line_start":64,"line_end":64,"column_start":5,"column_end":79}},{"value":"/ break them into separate objects, allowing them to interact more","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":89965,"byte_end":90033,"line_start":65,"line_end":65,"column_start":5,"column_end":73}},{"value":"/ easily.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":90038,"byte_end":90049,"line_start":66,"line_end":66,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":908},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":90229,"byte_end":90239,"line_start":72,"line_end":72,"column_start":12,"column_end":22},"name":"local_addr","qualname":"<UdpSocket>::local_addr","value":"pub fn local_addr(&Self) -> io::Result<SocketAddr>","parent":null,"children":[],"decl_id":null,"docs":" Returns the local address that this stream is bound to.\n","sig":null,"attributes":[{"value":"/ Returns the local address that this stream is bound to.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":90158,"byte_end":90217,"line_start":71,"line_end":71,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":909},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":90495,"byte_end":90502,"line_start":78,"line_end":78,"column_start":12,"column_end":19},"name":"connect","qualname":"<UdpSocket>::connect","value":"pub fn connect(&Self, &SocketAddr) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Connects the UDP socket setting the default destination for send() and\n limiting packets that are read via recv from the address specified in addr.\n","sig":null,"attributes":[{"value":"/ Connects the UDP socket setting the default destination for send() and","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":90325,"byte_end":90399,"line_start":76,"line_end":76,"column_start":5,"column_end":79}},{"value":"/ limiting packets that are read via recv from the address specified in addr.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":90404,"byte_end":90483,"line_start":77,"line_end":77,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":910},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":90745,"byte_end":90749,"line_start":84,"line_end":84,"column_start":12,"column_end":16},"name":"send","qualname":"<UdpSocket>::send","value":"pub fn send(&Self, &[u8]) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Sends data on the socket to the address previously bound via connect().\n On success, returns the number of bytes written.\n","sig":null,"attributes":[{"value":"/ Sends data on the socket to the address previously bound via connect().","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":90601,"byte_end":90676,"line_start":82,"line_end":82,"column_start":5,"column_end":80}},{"value":"/ On success, returns the number of bytes written.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":90681,"byte_end":90733,"line_start":83,"line_end":83,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":911},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":91335,"byte_end":91339,"line_start":101,"line_end":101,"column_start":12,"column_end":16},"name":"recv","qualname":"<UdpSocket>::recv","value":"pub fn recv(&Self, &mut [u8]) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Receives data from the socket previously bound with connect().\n On success, returns the number of bytes read.\n","sig":null,"attributes":[{"value":"/ Receives data from the socket previously bound with connect().","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":91203,"byte_end":91269,"line_start":99,"line_end":99,"column_start":5,"column_end":71}},{"value":"/ On success, returns the number of bytes read.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":91274,"byte_end":91323,"line_start":100,"line_end":100,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":912},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":92226,"byte_end":92235,"line_start":122,"line_end":122,"column_start":12,"column_end":21},"name":"poll_read","qualname":"<UdpSocket>::poll_read","value":"pub fn poll_read(&Self) -> Async<()>","parent":null,"children":[],"decl_id":null,"docs":" Test whether this socket is ready to be read or not.","sig":null,"attributes":[{"value":"/ Test whether this socket is ready to be read or not.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":91839,"byte_end":91895,"line_start":116,"line_end":116,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":91900,"byte_end":91903,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ If the socket is *not* readable then the current task is scheduled to","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":91908,"byte_end":91981,"line_start":118,"line_end":118,"column_start":5,"column_end":78}},{"value":"/ get a notification when the socket does become readable. That is, this","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":91986,"byte_end":92060,"line_start":119,"line_end":119,"column_start":5,"column_end":79}},{"value":"/ is only suitable for calling in a `Future::poll` method and will","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":92065,"byte_end":92133,"line_start":120,"line_end":120,"column_start":5,"column_end":73}},{"value":"/ automatically handle ensuring a retry once the socket is readable again.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":92138,"byte_end":92214,"line_start":121,"line_end":121,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":914},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":92940,"byte_end":92950,"line_start":140,"line_end":140,"column_start":12,"column_end":22},"name":"poll_write","qualname":"<UdpSocket>::poll_write","value":"pub fn poll_write(&Self) -> Async<()>","parent":null,"children":[],"decl_id":null,"docs":" Test whether this socket is ready to be written to or not.","sig":null,"attributes":[{"value":"/ Test whether this socket is ready to be written to or not.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":92547,"byte_end":92609,"line_start":134,"line_end":134,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":92614,"byte_end":92617,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ If the socket is *not* writable then the current task is scheduled to","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":92622,"byte_end":92695,"line_start":136,"line_end":136,"column_start":5,"column_end":78}},{"value":"/ get a notification when the socket does become writable. That is, this","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":92700,"byte_end":92774,"line_start":137,"line_end":137,"column_start":5,"column_end":79}},{"value":"/ is only suitable for calling in a `Future::poll` method and will","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":92779,"byte_end":92847,"line_start":138,"line_end":138,"column_start":5,"column_end":73}},{"value":"/ automatically handle ensuring a retry once the socket is writable again.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":92852,"byte_end":92928,"line_start":139,"line_end":139,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":916},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":93491,"byte_end":93498,"line_start":157,"line_end":157,"column_start":12,"column_end":19},"name":"send_to","qualname":"<UdpSocket>::send_to","value":"pub fn send_to(&Self, &[u8], &SocketAddr) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Sends data on the socket to the given address. On success, returns the\n number of bytes written.","sig":null,"attributes":[{"value":"/ Sends data on the socket to the given address. On success, returns the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":93241,"byte_end":93315,"line_start":152,"line_end":152,"column_start":5,"column_end":79}},{"value":"/ number of bytes written.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":93320,"byte_end":93348,"line_start":153,"line_end":153,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":93353,"byte_end":93356,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ Address type can be any implementer of `ToSocketAddrs` trait. See its","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":93361,"byte_end":93434,"line_start":155,"line_end":155,"column_start":5,"column_end":78}},{"value":"/ documentation for concrete examples.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":93439,"byte_end":93479,"line_start":156,"line_end":156,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":917},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":94860,"byte_end":94870,"line_start":187,"line_end":187,"column_start":12,"column_end":22},"name":"send_dgram","qualname":"<UdpSocket>::send_dgram","value":"pub fn send_dgram<T>(Self, T, SocketAddr) -> SendDgram<T> where T: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Creates a future that will write the entire contents of the buffer\n `buf` provided as a datagram to this socket.","sig":null,"attributes":[{"value":"/ Creates a future that will write the entire contents of the buffer","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":93984,"byte_end":94054,"line_start":172,"line_end":172,"column_start":5,"column_end":75}},{"value":"/ `buf` provided as a datagram to this socket.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":94059,"byte_end":94107,"line_start":173,"line_end":173,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":94112,"byte_end":94115,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ The returned future will return after data has been written to the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":94120,"byte_end":94190,"line_start":175,"line_end":175,"column_start":5,"column_end":75}},{"value":"/ outbound socket.  The future will resolve to the stream as well as the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":94195,"byte_end":94269,"line_start":176,"line_end":176,"column_start":5,"column_end":79}},{"value":"/ buffer (for reuse if needed).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":94274,"byte_end":94307,"line_start":177,"line_end":177,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":94312,"byte_end":94315,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ Any error which happens during writing will cause both the stream and","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":94320,"byte_end":94393,"line_start":179,"line_end":179,"column_start":5,"column_end":78}},{"value":"/ the buffer to get destroyed. Note that failure to write the entire","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":94398,"byte_end":94468,"line_start":180,"line_end":180,"column_start":5,"column_end":75}},{"value":"/ buffer is considered an error for the purposes of sending a datagram.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":94473,"byte_end":94546,"line_start":181,"line_end":181,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":94551,"byte_end":94554,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ The `buf` parameter here only requires the `AsRef<[u8]>` trait, which","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":94559,"byte_end":94632,"line_start":183,"line_end":183,"column_start":5,"column_end":78}},{"value":"/ should be broadly applicable to accepting data which can be converted","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":94637,"byte_end":94710,"line_start":184,"line_end":184,"column_start":5,"column_end":78}},{"value":"/ to a slice.  The `Window` struct is also available in this crate to","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":94715,"byte_end":94786,"line_start":185,"line_end":185,"column_start":5,"column_end":76}},{"value":"/ provide a different window into a slice if necessary.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":94791,"byte_end":94848,"line_start":186,"line_end":186,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":919},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":95154,"byte_end":95163,"line_start":195,"line_end":195,"column_start":12,"column_end":21},"name":"recv_from","qualname":"<UdpSocket>::recv_from","value":"pub fn recv_from(&Self, &mut [u8]) -> io::Result<(usize, SocketAddr)>","parent":null,"children":[],"decl_id":null,"docs":" Receives data from the socket. On success, returns the number of bytes\n read and the address from whence the data came.\n","sig":null,"attributes":[{"value":"/ Receives data from the socket. On success, returns the number of bytes","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":95012,"byte_end":95086,"line_start":193,"line_end":193,"column_start":5,"column_end":79}},{"value":"/ read and the address from whence the data came.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":95091,"byte_end":95142,"line_start":194,"line_end":194,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":920},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":96452,"byte_end":96462,"line_start":224,"line_end":224,"column_start":12,"column_end":22},"name":"recv_dgram","qualname":"<UdpSocket>::recv_dgram","value":"pub fn recv_dgram<T>(Self, T) -> RecvDgram<T> where T: AsMut<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Creates a future that receive a datagram to be written to the buffer\n provided.","sig":null,"attributes":[{"value":"/ Creates a future that receive a datagram to be written to the buffer","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":95682,"byte_end":95754,"line_start":210,"line_end":210,"column_start":5,"column_end":77}},{"value":"/ provided.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":95759,"byte_end":95772,"line_start":211,"line_end":211,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":95777,"byte_end":95780,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ The returned future will return after a datagram has been received on","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":95785,"byte_end":95858,"line_start":213,"line_end":213,"column_start":5,"column_end":78}},{"value":"/ this socket. The future will resolve to the socket, the buffer, the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":95863,"byte_end":95934,"line_start":214,"line_end":214,"column_start":5,"column_end":76}},{"value":"/ amount of data read, and the address the data was received from.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":95939,"byte_end":96007,"line_start":215,"line_end":215,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":96012,"byte_end":96015,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ An error during reading will cause the socket and buffer to get","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":96020,"byte_end":96087,"line_start":217,"line_end":217,"column_start":5,"column_end":72}},{"value":"/ destroyed and the socket will be returned.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":96092,"byte_end":96138,"line_start":218,"line_end":218,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":96143,"byte_end":96146,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ The `buf` parameter here only requires the `AsMut<[u8]>` trait, which","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":96151,"byte_end":96224,"line_start":220,"line_end":220,"column_start":5,"column_end":78}},{"value":"/ should be broadly applicable to accepting data which can be converted","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":96229,"byte_end":96302,"line_start":221,"line_end":221,"column_start":5,"column_end":78}},{"value":"/ to a slice.  The `Window` struct is also available in this crate to","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":96307,"byte_end":96378,"line_start":222,"line_end":222,"column_start":5,"column_end":76}},{"value":"/ provide a different window into a slice if necessary.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":96383,"byte_end":96440,"line_start":223,"line_end":223,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":922},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":96795,"byte_end":96804,"line_start":236,"line_end":236,"column_start":12,"column_end":21},"name":"broadcast","qualname":"<UdpSocket>::broadcast","value":"pub fn broadcast(&Self) -> io::Result<bool>","parent":null,"children":[],"decl_id":null,"docs":" Gets the value of the `SO_BROADCAST` option for this socket.","sig":null,"attributes":[{"value":"/ Gets the value of the `SO_BROADCAST` option for this socket.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":96580,"byte_end":96644,"line_start":230,"line_end":230,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":96649,"byte_end":96652,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ For more information about this option, see","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":96657,"byte_end":96704,"line_start":232,"line_end":232,"column_start":5,"column_end":52}},{"value":"/ [`set_broadcast`][link].","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":96709,"byte_end":96737,"line_start":233,"line_end":233,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":96742,"byte_end":96745,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ [link]: #method.set_broadcast","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":96750,"byte_end":96783,"line_start":235,"line_end":235,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":923},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":97060,"byte_end":97073,"line_start":244,"line_end":244,"column_start":12,"column_end":25},"name":"set_broadcast","qualname":"<UdpSocket>::set_broadcast","value":"pub fn set_broadcast(&Self, bool) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the `SO_BROADCAST` option for this socket.","sig":null,"attributes":[{"value":"/ Sets the value of the `SO_BROADCAST` option for this socket.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":96883,"byte_end":96947,"line_start":240,"line_end":240,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":96952,"byte_end":96955,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ When enabled, this socket is allowed to send packets to a broadcast","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":96960,"byte_end":97031,"line_start":242,"line_end":242,"column_start":5,"column_end":76}},{"value":"/ address.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":97036,"byte_end":97048,"line_start":243,"line_end":243,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":924},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":97402,"byte_end":97419,"line_start":254,"line_end":254,"column_start":12,"column_end":29},"name":"multicast_loop_v4","qualname":"<UdpSocket>::multicast_loop_v4","value":"pub fn multicast_loop_v4(&Self) -> io::Result<bool>","parent":null,"children":[],"decl_id":null,"docs":" Gets the value of the `IP_MULTICAST_LOOP` option for this socket.","sig":null,"attributes":[{"value":"/ Gets the value of the `IP_MULTICAST_LOOP` option for this socket.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":97166,"byte_end":97235,"line_start":248,"line_end":248,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":97240,"byte_end":97243,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ For more information about this option, see","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":97248,"byte_end":97295,"line_start":250,"line_end":250,"column_start":5,"column_end":52}},{"value":"/ [`set_multicast_loop_v4`][link].","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":97300,"byte_end":97336,"line_start":251,"line_end":251,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":97341,"byte_end":97344,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ [link]: #method.set_multicast_loop_v4","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":97349,"byte_end":97390,"line_start":253,"line_end":253,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":925},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":97738,"byte_end":97759,"line_start":262,"line_end":262,"column_start":12,"column_end":33},"name":"set_multicast_loop_v4","qualname":"<UdpSocket>::set_multicast_loop_v4","value":"pub fn set_multicast_loop_v4(&Self, bool) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the `IP_MULTICAST_LOOP` option for this socket.","sig":null,"attributes":[{"value":"/ Sets the value of the `IP_MULTICAST_LOOP` option for this socket.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":97506,"byte_end":97575,"line_start":258,"line_end":258,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":97580,"byte_end":97583,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ If enabled, multicast packets will be looped back to the local socket.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":97588,"byte_end":97662,"line_start":260,"line_end":260,"column_start":5,"column_end":79}},{"value":"/ Note that this may not have any affect on IPv6 sockets.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":97667,"byte_end":97726,"line_start":261,"line_end":261,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":926},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":98093,"byte_end":98109,"line_start":272,"line_end":272,"column_start":12,"column_end":28},"name":"multicast_ttl_v4","qualname":"<UdpSocket>::multicast_ttl_v4","value":"pub fn multicast_ttl_v4(&Self) -> io::Result<u32>","parent":null,"children":[],"decl_id":null,"docs":" Gets the value of the `IP_MULTICAST_TTL` option for this socket.","sig":null,"attributes":[{"value":"/ Gets the value of the `IP_MULTICAST_TTL` option for this socket.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":97860,"byte_end":97928,"line_start":266,"line_end":266,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":97933,"byte_end":97936,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ For more information about this option, see","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":97941,"byte_end":97988,"line_start":268,"line_end":268,"column_start":5,"column_end":52}},{"value":"/ [`set_multicast_ttl_v4`][link].","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":97993,"byte_end":98028,"line_start":269,"line_end":269,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":98033,"byte_end":98036,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ [link]: #method.set_multicast_ttl_v4","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":98041,"byte_end":98081,"line_start":271,"line_end":271,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":927},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":98575,"byte_end":98595,"line_start":283,"line_end":283,"column_start":12,"column_end":32},"name":"set_multicast_ttl_v4","qualname":"<UdpSocket>::set_multicast_ttl_v4","value":"pub fn set_multicast_ttl_v4(&Self, u32) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the `IP_MULTICAST_TTL` option for this socket.","sig":null,"attributes":[{"value":"/ Sets the value of the `IP_MULTICAST_TTL` option for this socket.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":98194,"byte_end":98262,"line_start":276,"line_end":276,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":98267,"byte_end":98270,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ Indicates the time-to-live value of outgoing multicast packets for","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":98275,"byte_end":98345,"line_start":278,"line_end":278,"column_start":5,"column_end":75}},{"value":"/ this socket. The default value is 1 which means that multicast packets","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":98350,"byte_end":98424,"line_start":279,"line_end":279,"column_start":5,"column_end":79}},{"value":"/ don't leave the local network unless explicitly requested.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":98429,"byte_end":98491,"line_start":280,"line_end":280,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":98496,"byte_end":98499,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ Note that this may not have any affect on IPv6 sockets.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":98504,"byte_end":98563,"line_start":282,"line_end":282,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":928},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":98934,"byte_end":98951,"line_start":293,"line_end":293,"column_start":12,"column_end":29},"name":"multicast_loop_v6","qualname":"<UdpSocket>::multicast_loop_v6","value":"pub fn multicast_loop_v6(&Self) -> io::Result<bool>","parent":null,"children":[],"decl_id":null,"docs":" Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.","sig":null,"attributes":[{"value":"/ Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":98696,"byte_end":98767,"line_start":287,"line_end":287,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":98772,"byte_end":98775,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ For more information about this option, see","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":98780,"byte_end":98827,"line_start":289,"line_end":289,"column_start":5,"column_end":52}},{"value":"/ [`set_multicast_loop_v6`][link].","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":98832,"byte_end":98868,"line_start":290,"line_end":290,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":98873,"byte_end":98876,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ [link]: #method.set_multicast_loop_v6","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":98881,"byte_end":98922,"line_start":292,"line_end":292,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":929},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":99274,"byte_end":99295,"line_start":301,"line_end":301,"column_start":12,"column_end":33},"name":"set_multicast_loop_v6","qualname":"<UdpSocket>::set_multicast_loop_v6","value":"pub fn set_multicast_loop_v6(&Self, bool) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.","sig":null,"attributes":[{"value":"/ Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":99038,"byte_end":99109,"line_start":297,"line_end":297,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":99114,"byte_end":99117,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ Controls whether this socket sees the multicast packets it sends itself.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":99122,"byte_end":99198,"line_start":299,"line_end":299,"column_start":5,"column_end":81}},{"value":"/ Note that this may not have any affect on IPv4 sockets.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":99203,"byte_end":99262,"line_start":300,"line_end":300,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":930},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":99585,"byte_end":99588,"line_start":310,"line_end":310,"column_start":12,"column_end":15},"name":"ttl","qualname":"<UdpSocket>::ttl","value":"pub fn ttl(&Self) -> io::Result<u32>","parent":null,"children":[],"decl_id":null,"docs":" Gets the value of the `IP_TTL` option for this socket.","sig":null,"attributes":[{"value":"/ Gets the value of the `IP_TTL` option for this socket.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":99396,"byte_end":99454,"line_start":305,"line_end":305,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":99459,"byte_end":99462,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ For more information about this option, see [`set_ttl`][link].","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":99467,"byte_end":99533,"line_start":307,"line_end":307,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":99538,"byte_end":99541,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ [link]: #method.set_ttl","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":99546,"byte_end":99573,"line_start":309,"line_end":309,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":931},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":99845,"byte_end":99852,"line_start":318,"line_end":318,"column_start":12,"column_end":19},"name":"set_ttl","qualname":"<UdpSocket>::set_ttl","value":"pub fn set_ttl(&Self, u32) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value for the `IP_TTL` option on this socket.","sig":null,"attributes":[{"value":"/ Sets the value for the `IP_TTL` option on this socket.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":99660,"byte_end":99718,"line_start":314,"line_end":314,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":99723,"byte_end":99726,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ This value sets the time-to-live field that is used in every packet sent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":99731,"byte_end":99807,"line_start":316,"line_end":316,"column_start":5,"column_end":81}},{"value":"/ from this socket.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":99812,"byte_end":99833,"line_start":317,"line_end":317,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":932},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":100370,"byte_end":100387,"line_start":329,"line_end":329,"column_start":12,"column_end":29},"name":"join_multicast_v4","qualname":"<UdpSocket>::join_multicast_v4","value":"pub fn join_multicast_v4(&Self, &Ipv4Addr, &Ipv4Addr) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Executes an operation of the `IP_ADD_MEMBERSHIP` type.","sig":null,"attributes":[{"value":"/ Executes an operation of the `IP_ADD_MEMBERSHIP` type.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":99940,"byte_end":99998,"line_start":322,"line_end":322,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":100003,"byte_end":100006,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ This function specifies a new multicast group for this socket to join.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":100011,"byte_end":100085,"line_start":324,"line_end":324,"column_start":5,"column_end":79}},{"value":"/ The address must be a valid multicast address, and `interface` is the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":100090,"byte_end":100163,"line_start":325,"line_end":325,"column_start":5,"column_end":78}},{"value":"/ address of the local interface with which the system should join the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":100168,"byte_end":100240,"line_start":326,"line_end":326,"column_start":5,"column_end":77}},{"value":"/ multicast group. If it's equal to `INADDR_ANY` then an appropriate","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":100245,"byte_end":100315,"line_start":327,"line_end":327,"column_start":5,"column_end":75}},{"value":"/ interface is chosen by the system.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":100320,"byte_end":100358,"line_start":328,"line_end":328,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":933},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":100910,"byte_end":100927,"line_start":340,"line_end":340,"column_start":12,"column_end":29},"name":"join_multicast_v6","qualname":"<UdpSocket>::join_multicast_v6","value":"pub fn join_multicast_v6(&Self, &Ipv6Addr, u32) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.","sig":null,"attributes":[{"value":"/ Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":100594,"byte_end":100654,"line_start":335,"line_end":335,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":100659,"byte_end":100662,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ This function specifies a new multicast group for this socket to join.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":100667,"byte_end":100741,"line_start":337,"line_end":337,"column_start":5,"column_end":79}},{"value":"/ The address must be a valid multicast address, and `interface` is the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":100746,"byte_end":100819,"line_start":338,"line_end":338,"column_start":5,"column_end":78}},{"value":"/ index of the interface to join/leave (or 0 to indicate any interface).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":100824,"byte_end":100898,"line_start":339,"line_end":339,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":934},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":101346,"byte_end":101364,"line_start":352,"line_end":352,"column_start":12,"column_end":30},"name":"leave_multicast_v4","qualname":"<UdpSocket>::leave_multicast_v4","value":"pub fn leave_multicast_v4(&Self, &Ipv4Addr, &Ipv4Addr) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Executes an operation of the `IP_DROP_MEMBERSHIP` type.","sig":null,"attributes":[{"value":"/ Executes an operation of the `IP_DROP_MEMBERSHIP` type.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":101128,"byte_end":101187,"line_start":346,"line_end":346,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":101192,"byte_end":101195,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ For more information about this option, see","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":101200,"byte_end":101247,"line_start":348,"line_end":348,"column_start":5,"column_end":52}},{"value":"/ [`join_multicast_v4`][link].","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":101252,"byte_end":101284,"line_start":349,"line_end":349,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":101289,"byte_end":101292,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ [link]: #method.join_multicast_v4","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":101297,"byte_end":101334,"line_start":351,"line_end":351,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":935},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":101794,"byte_end":101812,"line_start":364,"line_end":364,"column_start":12,"column_end":30},"name":"leave_multicast_v6","qualname":"<UdpSocket>::leave_multicast_v6","value":"pub fn leave_multicast_v6(&Self, &Ipv6Addr, u32) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.","sig":null,"attributes":[{"value":"/ Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":101574,"byte_end":101635,"line_start":358,"line_end":358,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":101640,"byte_end":101643,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ For more information about this option, see","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":101648,"byte_end":101695,"line_start":360,"line_end":360,"column_start":5,"column_end":52}},{"value":"/ [`join_multicast_v6`][link].","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":101700,"byte_end":101732,"line_start":361,"line_end":361,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":101737,"byte_end":101740,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ [link]: #method.join_multicast_v6","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":101745,"byte_end":101782,"line_start":363,"line_end":363,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":936},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":102447,"byte_end":102458,"line_start":378,"line_end":378,"column_start":12,"column_end":23},"name":"set_only_v6","qualname":"<UdpSocket>::set_only_v6","value":"pub fn set_only_v6(&Self, bool) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value for the `IPV6_V6ONLY` option on this socket.","sig":null,"attributes":[{"value":"/ Sets the value for the `IPV6_V6ONLY` option on this socket.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":102016,"byte_end":102079,"line_start":370,"line_end":370,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":102084,"byte_end":102087,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ If this is set to `true` then the socket is restricted to sending and","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":102092,"byte_end":102165,"line_start":372,"line_end":372,"column_start":5,"column_end":78}},{"value":"/ receiving IPv6 packets only. In this case two IPv4 and IPv6 applications","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":102170,"byte_end":102246,"line_start":373,"line_end":373,"column_start":5,"column_end":81}},{"value":"/ can bind the same port at the same time.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":102251,"byte_end":102295,"line_start":374,"line_end":374,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":102300,"byte_end":102303,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ If this is set to `false` then the socket can be used to send and","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":102308,"byte_end":102377,"line_start":376,"line_end":376,"column_start":5,"column_end":74}},{"value":"/ receive packets from an IPv4-mapped IPv6 address.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":102382,"byte_end":102435,"line_start":377,"line_end":377,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":937},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":102761,"byte_end":102768,"line_start":387,"line_end":387,"column_start":12,"column_end":19},"name":"only_v6","qualname":"<UdpSocket>::only_v6","value":"pub fn only_v6(&Self) -> io::Result<bool>","parent":null,"children":[],"decl_id":null,"docs":" Gets the value of the `IPV6_V6ONLY` option for this socket.","sig":null,"attributes":[{"value":"/ Gets the value of the `IPV6_V6ONLY` option for this socket.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":102559,"byte_end":102622,"line_start":382,"line_end":382,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":102627,"byte_end":102630,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ For more information about this option, see [`set_only_v6`][link].","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":102635,"byte_end":102705,"line_start":384,"line_end":384,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":102710,"byte_end":102713,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ [link]: #method.set_only_v6","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":102718,"byte_end":102749,"line_start":386,"line_end":386,"column_start":5,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":940},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":103176,"byte_end":103185,"line_start":402,"line_end":402,"column_start":12,"column_end":21},"name":"SendDgram","qualname":"::net::udp::SendDgram","value":"","parent":null,"children":[],"decl_id":null,"docs":" A future used to write the entire contents of some data to a UDP socket.","sig":null,"attributes":[{"value":"/ A future used to write the entire contents of some data to a UDP socket.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":102976,"byte_end":103052,"line_start":398,"line_end":398,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":103053,"byte_end":103056,"line_start":399,"line_end":399,"column_start":1,"column_end":4}},{"value":"/ This is created by the `UdpSocket::send_dgram` method.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":103057,"byte_end":103115,"line_start":400,"line_end":400,"column_start":1,"column_end":59}},{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":103116,"byte_end":103164,"line_start":401,"line_end":401,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":950},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":104197,"byte_end":104206,"line_start":434,"line_end":434,"column_start":12,"column_end":21},"name":"RecvDgram","qualname":"::net::udp::RecvDgram","value":"","parent":null,"children":[],"decl_id":null,"docs":" A future used to receive a datagram from a UDP socket.","sig":null,"attributes":[{"value":"/ A future used to receive a datagram from a UDP socket.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":104015,"byte_end":104073,"line_start":430,"line_end":430,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":104074,"byte_end":104077,"line_start":431,"line_end":431,"column_start":1,"column_end":4}},{"value":"/ This is created by the `UdpSocket::recv_dgram` method.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":104078,"byte_end":104136,"line_start":432,"line_end":432,"column_start":1,"column_end":59}},{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":104137,"byte_end":104185,"line_start":433,"line_end":433,"column_start":1,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":996},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"reactor","qualname":"::reactor","value":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","parent":null,"children":[{"krate":0,"index":997},{"krate":0,"index":1000},{"krate":0,"index":1003},{"krate":0,"index":1006},{"krate":0,"index":1007},{"krate":0,"index":1010},{"krate":0,"index":1013},{"krate":0,"index":1016},{"krate":0,"index":1017},{"krate":0,"index":1020},{"krate":0,"index":1023},{"krate":0,"index":1026},{"krate":0,"index":1029},{"krate":0,"index":1030},{"krate":0,"index":1033},{"krate":0,"index":1036},{"krate":0,"index":1039},{"krate":0,"index":1040},{"krate":0,"index":1043},{"krate":0,"index":1046},{"krate":0,"index":1049},{"krate":0,"index":1050},{"krate":0,"index":1053},{"krate":0,"index":1056},{"krate":0,"index":1059},{"krate":0,"index":1062},{"krate":0,"index":1063},{"krate":0,"index":1066},{"krate":0,"index":1069},{"krate":0,"index":1070},{"krate":0,"index":1073},{"krate":0,"index":1076},{"krate":0,"index":1079},{"krate":0,"index":1080},{"krate":0,"index":1083},{"krate":0,"index":1086},{"krate":0,"index":1089},{"krate":0,"index":1090},{"krate":0,"index":1093},{"krate":0,"index":1096},{"krate":0,"index":1099},{"krate":0,"index":1102},{"krate":0,"index":1105},{"krate":0,"index":1225},{"krate":0,"index":1341},{"krate":0,"index":1374},{"krate":0,"index":1410},{"krate":0,"index":1413},{"krate":0,"index":1416},{"krate":0,"index":1419},{"krate":0,"index":1422},{"krate":0,"index":1542},{"krate":0,"index":1423},{"krate":0,"index":1433},{"krate":0,"index":1547},{"krate":0,"index":1550},{"krate":0,"index":1552},{"krate":0,"index":1553},{"krate":0,"index":1554},{"krate":0,"index":1556},{"krate":0,"index":1557},{"krate":0,"index":1560},{"krate":0,"index":1563},{"krate":0,"index":1565},{"krate":0,"index":1570},{"krate":0,"index":1572},{"krate":0,"index":1576},{"krate":0,"index":1435},{"krate":0,"index":1439},{"krate":0,"index":1457},{"krate":0,"index":1460},{"krate":0,"index":1462},{"krate":0,"index":1476},{"krate":0,"index":1480},{"krate":0,"index":1482},{"krate":0,"index":1493},{"krate":0,"index":1496},{"krate":0,"index":1498},{"krate":0,"index":1501},{"krate":0,"index":1504},{"krate":0,"index":1506},{"krate":0,"index":1508},{"krate":0,"index":1511},{"krate":0,"index":1512},{"krate":0,"index":1513},{"krate":0,"index":1514},{"krate":0,"index":1515}],"decl_id":null,"docs":" The core reactor driving all I/O","sig":null,"attributes":[{"value":"/ The core reactor driving all I/O","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":111173,"byte_end":111209,"line_start":1,"line_end":1,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":111210,"byte_end":111213,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This module contains the `Core` type which is the reactor for all I/O","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":111214,"byte_end":111287,"line_start":3,"line_end":3,"column_start":1,"column_end":74}},{"value":"/ happening in `tokio-core`. This reactor (or event loop) is used to run","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":111288,"byte_end":111362,"line_start":4,"line_end":4,"column_start":1,"column_end":75}},{"value":"/ futures, schedule tasks, issue I/O requests, etc.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":111363,"byte_end":111416,"line_start":5,"line_end":5,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":1159},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":137028,"byte_end":137039,"line_start":67,"line_end":67,"column_start":12,"column_end":23},"name":"PollEvented","qualname":"::reactor::poll_evented::PollEvented","value":"PollEvented {  }","parent":null,"children":[{"krate":0,"index":1161},{"krate":0,"index":1162},{"krate":0,"index":1163}],"decl_id":null,"docs":" A concrete implementation of a stream of readiness notifications for I/O\n objects that originates from an event loop.","sig":null,"attributes":[{"value":"/ A concrete implementation of a stream of readiness notifications for I/O","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":134544,"byte_end":134620,"line_start":22,"line_end":22,"column_start":1,"column_end":77}},{"value":"/ objects that originates from an event loop.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":134621,"byte_end":134668,"line_start":23,"line_end":23,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":134669,"byte_end":134672,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ Created by the `PollEvented::new` method, each `PollEvented` is","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":134673,"byte_end":134740,"line_start":25,"line_end":25,"column_start":1,"column_end":68}},{"value":"/ associated with a specific event loop and source of events that will be","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":134741,"byte_end":134816,"line_start":26,"line_end":26,"column_start":1,"column_end":76}},{"value":"/ registered with an event loop.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":134817,"byte_end":134851,"line_start":27,"line_end":27,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":134852,"byte_end":134855,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ An instance of `PollEvented` is essentially the bridge between the `mio`","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":134856,"byte_end":134932,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"/ world and the `tokio-core` world, providing abstractions to receive","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":134933,"byte_end":135004,"line_start":30,"line_end":30,"column_start":1,"column_end":72}},{"value":"/ notifications about changes to an object's `mio::Ready` state.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":135005,"byte_end":135071,"line_start":31,"line_end":31,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":135072,"byte_end":135075,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Each readiness stream has a number of methods to test whether the underlying","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":135076,"byte_end":135156,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/ object is readable or writable. Once the methods return that an object is","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":135157,"byte_end":135234,"line_start":34,"line_end":34,"column_start":1,"column_end":78}},{"value":"/ readable/writable, then it will continue to do so until the `need_read` or","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":135235,"byte_end":135313,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ `need_write` methods are called.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":135314,"byte_end":135350,"line_start":36,"line_end":36,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":135351,"byte_end":135354,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ That is, this object is typically wrapped in another form of I/O object.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":135355,"byte_end":135431,"line_start":38,"line_end":38,"column_start":1,"column_end":77}},{"value":"/ It's the responsibility of the wrapper to inform the readiness stream when a","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":135432,"byte_end":135512,"line_start":39,"line_end":39,"column_start":1,"column_end":81}},{"value":"/ \"would block\" I/O event is seen. The readiness stream will then take care of","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":135513,"byte_end":135593,"line_start":40,"line_end":40,"column_start":1,"column_end":81}},{"value":"/ any scheduling necessary to get notified when the event is ready again.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":135594,"byte_end":135669,"line_start":41,"line_end":41,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":135670,"byte_end":135673,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ You can find more information about creating a custom I/O object [online].","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":135674,"byte_end":135752,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":135753,"byte_end":135756,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ [online]: https://tokio.rs/docs/going-deeper-tokio/core-low-level/#custom-io","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":135757,"byte_end":135837,"line_start":45,"line_end":45,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":135838,"byte_end":135841,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ ## Readiness to read/write","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":135842,"byte_end":135872,"line_start":47,"line_end":47,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":135873,"byte_end":135876,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ A `PollEvented` allows listening and waiting for an arbitrary `mio::Ready`","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":135877,"byte_end":135955,"line_start":49,"line_end":49,"column_start":1,"column_end":79}},{"value":"/ instance, including the platform-specific contents of `mio::Ready`. At most","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":135956,"byte_end":136035,"line_start":50,"line_end":50,"column_start":1,"column_end":80}},{"value":"/ two future tasks, however, can be waiting on a `PollEvented`. The","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":136036,"byte_end":136105,"line_start":51,"line_end":51,"column_start":1,"column_end":70}},{"value":"/ `need_read` and `need_write` methods can block two separate tasks, one on","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":136106,"byte_end":136183,"line_start":52,"line_end":52,"column_start":1,"column_end":78}},{"value":"/ reading and one on writing. Not all I/O events correspond to read/write,","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":136184,"byte_end":136260,"line_start":53,"line_end":53,"column_start":1,"column_end":77}},{"value":"/ however!","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":136261,"byte_end":136273,"line_start":54,"line_end":54,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":136274,"byte_end":136277,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ To account for this a `PollEvented` gets a little interesting when working","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":136278,"byte_end":136356,"line_start":56,"line_end":56,"column_start":1,"column_end":79}},{"value":"/ with an arbitrary instance of `mio::Ready` that may not map precisely to","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":136357,"byte_end":136433,"line_start":57,"line_end":57,"column_start":1,"column_end":77}},{"value":"/ \"write\" and \"read\" tasks. Currently it is defined that instances of","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":136434,"byte_end":136505,"line_start":58,"line_end":58,"column_start":1,"column_end":72}},{"value":"/ `mio::Ready` that do *not* return true from `is_writable` are all notified","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":136506,"byte_end":136584,"line_start":59,"line_end":59,"column_start":1,"column_end":79}},{"value":"/ through `need_read`, or the read task.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":136585,"byte_end":136627,"line_start":60,"line_end":60,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":136628,"byte_end":136631,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ In other words, `poll_ready` with the `mio::UnixReady::hup` event will block","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":136632,"byte_end":136712,"line_start":62,"line_end":62,"column_start":1,"column_end":81}},{"value":"/ the read task of this `PollEvented` if the `hup` event isn't available.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":136713,"byte_end":136788,"line_start":63,"line_end":63,"column_start":1,"column_end":76}},{"value":"/ Essentially a good rule of thumb is that if you're using the `poll_ready`","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":136789,"byte_end":136866,"line_start":64,"line_end":64,"column_start":1,"column_end":78}},{"value":"/ method you want to also use `need_read` to signal blocking and you should","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":136867,"byte_end":136944,"line_start":65,"line_end":65,"column_start":1,"column_end":78}},{"value":"/ otherwise probably avoid using two tasks on the same `PollEvented`.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":136945,"byte_end":137016,"line_start":66,"line_end":66,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1170},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":137575,"byte_end":137578,"line_start":89,"line_end":89,"column_start":12,"column_end":15},"name":"new","qualname":"<PollEvented<E>>::new","value":"pub fn new(E, &Handle) -> io::Result<PollEvented<E>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new readiness stream associated with the provided\n `loop_handle` and for the given `source`.","sig":null,"attributes":[{"value":"/ Creates a new readiness stream associated with the provided","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":137337,"byte_end":137400,"line_start":84,"line_end":84,"column_start":5,"column_end":68}},{"value":"/ `loop_handle` and for the given `source`.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":137405,"byte_end":137450,"line_start":85,"line_end":85,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":137455,"byte_end":137458,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ This method returns a future which will resolve to the readiness stream","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":137463,"byte_end":137538,"line_start":87,"line_end":87,"column_start":5,"column_end":80}},{"value":"/ when it's ready.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":137543,"byte_end":137563,"line_start":88,"line_end":88,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1171},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":138786,"byte_end":138796,"line_start":116,"line_end":116,"column_start":12,"column_end":22},"name":"deregister","qualname":"<PollEvented<E>>::deregister","value":"pub fn deregister(Self, &Handle) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Deregisters this source of events from the reactor core specified.","sig":null,"attributes":[{"value":"/ Deregisters this source of events from the reactor core specified.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":138044,"byte_end":138114,"line_start":104,"line_end":104,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":138119,"byte_end":138122,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ This method can optionally be called to unregister the underlying I/O","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":138127,"byte_end":138200,"line_start":106,"line_end":106,"column_start":5,"column_end":78}},{"value":"/ object with the event loop that the `handle` provided points to.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":138205,"byte_end":138273,"line_start":107,"line_end":107,"column_start":5,"column_end":73}},{"value":"/ Typically this method is not required as this automatically happens when","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":138278,"byte_end":138354,"line_start":108,"line_end":108,"column_start":5,"column_end":81}},{"value":"/ `E` is dropped, but for some use cases the `E` object doesn't represent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":138359,"byte_end":138434,"line_start":109,"line_end":109,"column_start":5,"column_end":80}},{"value":"/ an owned reference, so dropping it won't automatically unregister with","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":138439,"byte_end":138513,"line_start":110,"line_end":110,"column_start":5,"column_end":79}},{"value":"/ the event loop.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":138518,"byte_end":138537,"line_start":111,"line_end":111,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":138542,"byte_end":138545,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ This consumes `self` as it will no longer provide events after the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":138550,"byte_end":138620,"line_start":113,"line_end":113,"column_start":5,"column_end":75}},{"value":"/ method is called, and will likely return an error if this `PollEvented`","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":138625,"byte_end":138700,"line_start":114,"line_end":114,"column_start":5,"column_end":80}},{"value":"/ was created on a separate event loop from the `handle` specified.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":138705,"byte_end":138774,"line_start":115,"line_end":115,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1174},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":139643,"byte_end":139652,"line_start":138,"line_end":138,"column_start":12,"column_end":21},"name":"poll_read","qualname":"<PollEvented<E>>::poll_read","value":"pub fn poll_read(&Self) -> Async<()>","parent":null,"children":[],"decl_id":null,"docs":" Tests to see if this source is ready to be read from or not.","sig":null,"attributes":[{"value":"/ Tests to see if this source is ready to be read from or not.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":139004,"byte_end":139068,"line_start":124,"line_end":124,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":139073,"byte_end":139076,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ If this stream is not ready for a read then `NotReady` will be returned","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":139081,"byte_end":139156,"line_start":126,"line_end":126,"column_start":5,"column_end":80}},{"value":"/ and the current task will be scheduled to receive a notification when","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":139161,"byte_end":139234,"line_start":127,"line_end":127,"column_start":5,"column_end":78}},{"value":"/ the stream is readable again. In other words, this method is only safe","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":139239,"byte_end":139313,"line_start":128,"line_end":128,"column_start":5,"column_end":79}},{"value":"/ to call from within the context of a future's task, typically done in a","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":139318,"byte_end":139393,"line_start":129,"line_end":129,"column_start":5,"column_end":80}},{"value":"/ `Future::poll` method.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":139398,"byte_end":139424,"line_start":130,"line_end":130,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":139429,"byte_end":139432,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ This is mostly equivalent to `self.poll_ready(Ready::readable())`.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":139437,"byte_end":139507,"line_start":132,"line_end":132,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":139512,"byte_end":139515,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":139520,"byte_end":139532,"line_start":134,"line_end":134,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":139537,"byte_end":139540,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ This function will panic if called outside the context of a future's","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":139545,"byte_end":139617,"line_start":136,"line_end":136,"column_start":5,"column_end":77}},{"value":"/ task.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":139622,"byte_end":139631,"line_start":137,"line_end":137,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1176},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":141270,"byte_end":141280,"line_start":186,"line_end":186,"column_start":12,"column_end":22},"name":"poll_write","qualname":"<PollEvented<E>>::poll_write","value":"pub fn poll_write(&Self) -> Async<()>","parent":null,"children":[],"decl_id":null,"docs":" Tests to see if this source is ready to be written to or not.","sig":null,"attributes":[{"value":"/ Tests to see if this source is ready to be written to or not.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":140629,"byte_end":140694,"line_start":172,"line_end":172,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":140699,"byte_end":140702,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ If this stream is not ready for a write then `NotReady` will be returned","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":140707,"byte_end":140783,"line_start":174,"line_end":174,"column_start":5,"column_end":81}},{"value":"/ and the current task will be scheduled to receive a notification when","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":140788,"byte_end":140861,"line_start":175,"line_end":175,"column_start":5,"column_end":78}},{"value":"/ the stream is writable again. In other words, this method is only safe","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":140866,"byte_end":140940,"line_start":176,"line_end":176,"column_start":5,"column_end":79}},{"value":"/ to call from within the context of a future's task, typically done in a","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":140945,"byte_end":141020,"line_start":177,"line_end":177,"column_start":5,"column_end":80}},{"value":"/ `Future::poll` method.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":141025,"byte_end":141051,"line_start":178,"line_end":178,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":141056,"byte_end":141059,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ This is mostly equivalent to `self.poll_ready(Ready::writable())`.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":141064,"byte_end":141134,"line_start":180,"line_end":180,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":141139,"byte_end":141142,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":141147,"byte_end":141159,"line_start":182,"line_end":182,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":141164,"byte_end":141167,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ This function will panic if called outside the context of a future's","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":141172,"byte_end":141244,"line_start":184,"line_end":184,"column_start":5,"column_end":77}},{"value":"/ task.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":141249,"byte_end":141258,"line_start":185,"line_end":185,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1177},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":143226,"byte_end":143236,"line_start":234,"line_end":234,"column_start":12,"column_end":22},"name":"poll_ready","qualname":"<PollEvented<E>>::poll_ready","value":"pub fn poll_ready(&Self, Ready) -> Async<Ready>","parent":null,"children":[],"decl_id":null,"docs":" Test to see whether this source fulfills any condition listed in `mask`\n provided.","sig":null,"attributes":[{"value":"/ Test to see whether this source fulfills any condition listed in `mask`","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":142046,"byte_end":142121,"line_start":211,"line_end":211,"column_start":5,"column_end":80}},{"value":"/ provided.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":142126,"byte_end":142139,"line_start":212,"line_end":212,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":142144,"byte_end":142147,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ The `mask` given here is a mio `Ready` set of possible events. This can","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":142152,"byte_end":142227,"line_start":214,"line_end":214,"column_start":5,"column_end":80}},{"value":"/ contain any events like read/write but also platform-specific events","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":142232,"byte_end":142304,"line_start":215,"line_end":215,"column_start":5,"column_end":77}},{"value":"/ such as hup and error. The `mask` indicates events that are interested","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":142309,"byte_end":142383,"line_start":216,"line_end":216,"column_start":5,"column_end":79}},{"value":"/ in being ready.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":142388,"byte_end":142407,"line_start":217,"line_end":217,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":142412,"byte_end":142415,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ If any event in `mask` is ready then it is returned through","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":142420,"byte_end":142483,"line_start":219,"line_end":219,"column_start":5,"column_end":68}},{"value":"/ `Async::Ready`. The `Ready` set returned is guaranteed to not be empty","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":142488,"byte_end":142562,"line_start":220,"line_end":220,"column_start":5,"column_end":79}},{"value":"/ and contains all events that are currently ready in the `mask` provided.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":142567,"byte_end":142643,"line_start":221,"line_end":221,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":142648,"byte_end":142651,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ If no events are ready in the `mask` provided then the current task is","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":142656,"byte_end":142730,"line_start":223,"line_end":223,"column_start":5,"column_end":79}},{"value":"/ scheduled to receive a notification when any of them become ready. If","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":142735,"byte_end":142808,"line_start":224,"line_end":224,"column_start":5,"column_end":78}},{"value":"/ the `writable` event is contained within `mask` then this","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":142813,"byte_end":142874,"line_start":225,"line_end":225,"column_start":5,"column_end":66}},{"value":"/ `PollEvented`'s `write` task will be blocked and otherwise the `read`","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":142879,"byte_end":142952,"line_start":226,"line_end":226,"column_start":5,"column_end":78}},{"value":"/ task will be blocked. This is generally only relevant if you're working","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":142957,"byte_end":143032,"line_start":227,"line_end":227,"column_start":5,"column_end":80}},{"value":"/ with this `PollEvented` object on multiple tasks.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":143037,"byte_end":143090,"line_start":228,"line_end":228,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":143095,"byte_end":143098,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":143103,"byte_end":143115,"line_start":230,"line_end":230,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":143120,"byte_end":143123,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ This function will panic if called outside the context of a future's","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":143128,"byte_end":143200,"line_start":232,"line_end":232,"column_start":5,"column_end":77}},{"value":"/ task.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":143205,"byte_end":143214,"line_start":233,"line_end":233,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1178},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":145257,"byte_end":145266,"line_start":293,"line_end":293,"column_start":12,"column_end":21},"name":"need_read","qualname":"<PollEvented<E>>::need_read","value":"pub fn need_read(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Indicates to this source of events that the corresponding I/O object is\n no longer readable, but it needs to be.","sig":null,"attributes":[{"value":"/ Indicates to this source of events that the corresponding I/O object is","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":144008,"byte_end":144083,"line_start":270,"line_end":270,"column_start":5,"column_end":80}},{"value":"/ no longer readable, but it needs to be.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":144088,"byte_end":144131,"line_start":271,"line_end":271,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":144136,"byte_end":144139,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ This function, like `poll_read`, is only safe to call from the context","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":144144,"byte_end":144218,"line_start":273,"line_end":273,"column_start":5,"column_end":79}},{"value":"/ of a future's task (typically in a `Future::poll` implementation). It","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":144223,"byte_end":144296,"line_start":274,"line_end":274,"column_start":5,"column_end":78}},{"value":"/ informs this readiness stream that the underlying object is no longer","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":144301,"byte_end":144374,"line_start":275,"line_end":275,"column_start":5,"column_end":78}},{"value":"/ readable, typically because a \"would block\" error was seen.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":144379,"byte_end":144442,"line_start":276,"line_end":276,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":144447,"byte_end":144450,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ *All* readiness bits associated with this stream except the writable bit","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":144455,"byte_end":144531,"line_start":278,"line_end":278,"column_start":5,"column_end":81}},{"value":"/ will be reset when this method is called. The current task is then","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":144536,"byte_end":144606,"line_start":279,"line_end":279,"column_start":5,"column_end":75}},{"value":"/ scheduled to receive a notification whenever anything changes other than","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":144611,"byte_end":144687,"line_start":280,"line_end":280,"column_start":5,"column_end":81}},{"value":"/ the writable bit. Note that this typically just means the readable bit","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":144692,"byte_end":144766,"line_start":281,"line_end":281,"column_start":5,"column_end":79}},{"value":"/ is used here, but if you're using a custom I/O object for events like","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":144771,"byte_end":144844,"line_start":282,"line_end":282,"column_start":5,"column_end":78}},{"value":"/ hup/error this may also be relevant.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":144849,"byte_end":144889,"line_start":283,"line_end":283,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":144894,"byte_end":144897,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ Note that it is also only valid to call this method if `poll_read`","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":144902,"byte_end":144972,"line_start":285,"line_end":285,"column_start":5,"column_end":75}},{"value":"/ previously indicated that the object is readable. That is, this function","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":144977,"byte_end":145053,"line_start":286,"line_end":286,"column_start":5,"column_end":81}},{"value":"/ must always be paired with calls to `poll_read` previously.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":145058,"byte_end":145121,"line_start":287,"line_end":287,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":145126,"byte_end":145129,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":145134,"byte_end":145146,"line_start":289,"line_end":289,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":145151,"byte_end":145154,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ This function will panic if called outside the context of a future's","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":145159,"byte_end":145231,"line_start":291,"line_end":291,"column_start":5,"column_end":77}},{"value":"/ task.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":145236,"byte_end":145245,"line_start":292,"line_end":292,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1179},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":146464,"byte_end":146474,"line_start":322,"line_end":322,"column_start":12,"column_end":22},"name":"need_write","qualname":"<PollEvented<E>>::need_write","value":"pub fn need_write(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Indicates to this source of events that the corresponding I/O object is\n no longer writable, but it needs to be.","sig":null,"attributes":[{"value":"/ Indicates to this source of events that the corresponding I/O object is","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":145469,"byte_end":145544,"line_start":302,"line_end":302,"column_start":5,"column_end":80}},{"value":"/ no longer writable, but it needs to be.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":145549,"byte_end":145592,"line_start":303,"line_end":303,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":145597,"byte_end":145600,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ This function, like `poll_write`, is only safe to call from the context","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":145605,"byte_end":145680,"line_start":305,"line_end":305,"column_start":5,"column_end":80}},{"value":"/ of a future's task (typically in a `Future::poll` implementation). It","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":145685,"byte_end":145758,"line_start":306,"line_end":306,"column_start":5,"column_end":78}},{"value":"/ informs this readiness stream that the underlying object is no longer","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":145763,"byte_end":145836,"line_start":307,"line_end":307,"column_start":5,"column_end":78}},{"value":"/ writable, typically because a \"would block\" error was seen.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":145841,"byte_end":145904,"line_start":308,"line_end":308,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":145909,"byte_end":145912,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ The flag indicating that this stream is writable is unset and the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":145917,"byte_end":145986,"line_start":310,"line_end":310,"column_start":5,"column_end":74}},{"value":"/ current task is scheduled to receive a notification when the stream is","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":145991,"byte_end":146065,"line_start":311,"line_end":311,"column_start":5,"column_end":79}},{"value":"/ then again writable.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":146070,"byte_end":146094,"line_start":312,"line_end":312,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":146099,"byte_end":146102,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ Note that it is also only valid to call this method if `poll_write`","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":146107,"byte_end":146178,"line_start":314,"line_end":314,"column_start":5,"column_end":76}},{"value":"/ previously indicated that the object is writable. That is, this function","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":146183,"byte_end":146259,"line_start":315,"line_end":315,"column_start":5,"column_end":81}},{"value":"/ must always be paired with calls to `poll_write` previously.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":146264,"byte_end":146328,"line_start":316,"line_end":316,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":146333,"byte_end":146336,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":146341,"byte_end":146353,"line_start":318,"line_end":318,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":146358,"byte_end":146361,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ This function will panic if called outside the context of a future's","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":146366,"byte_end":146438,"line_start":320,"line_end":320,"column_start":5,"column_end":77}},{"value":"/ task.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":146443,"byte_end":146452,"line_start":321,"line_end":321,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1180},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":146794,"byte_end":146800,"line_start":333,"line_end":333,"column_start":12,"column_end":18},"name":"remote","qualname":"<PollEvented<E>>::remote","value":"pub fn remote(&Self) -> &Remote","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the event loop handle that this readiness stream\n is associated with.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the event loop handle that this readiness stream","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":146679,"byte_end":146754,"line_start":331,"line_end":331,"column_start":5,"column_end":80}},{"value":"/ is associated with.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":146759,"byte_end":146782,"line_start":332,"line_end":332,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1181},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":146967,"byte_end":146974,"line_start":339,"line_end":339,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<PollEvented<E>>::get_ref","value":"pub fn get_ref(&Self) -> &E","parent":null,"children":[],"decl_id":null,"docs":" Returns a shared reference to the underlying I/O object this readiness\n stream is wrapping.\n","sig":null,"attributes":[{"value":"/ Returns a shared reference to the underlying I/O object this readiness","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":146853,"byte_end":146927,"line_start":337,"line_end":337,"column_start":5,"column_end":79}},{"value":"/ stream is wrapping.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":146932,"byte_end":146955,"line_start":338,"line_end":338,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1182},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":147133,"byte_end":147140,"line_start":345,"line_end":345,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<PollEvented<E>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut E","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying I/O object this readiness\n stream is wrapping.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying I/O object this readiness","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":147018,"byte_end":147093,"line_start":343,"line_end":343,"column_start":5,"column_end":80}},{"value":"/ stream is wrapping.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":147098,"byte_end":147121,"line_start":344,"line_end":344,"column_start":5,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":1275},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":154336,"byte_end":154347,"line_start":84,"line_end":84,"column_start":12,"column_end":23},"name":"PollEvented","qualname":"::reactor::poll_evented2::PollEvented","value":"PollEvented {  }","parent":null,"children":[{"krate":0,"index":1277},{"krate":0,"index":1278}],"decl_id":null,"docs":" Associates an I/O resource that implements the [`std::Read`] and / or\n [`std::Write`] traits with the reactor that drives it.","sig":null,"attributes":[{"value":"/ Associates an I/O resource that implements the [`std::Read`] and / or","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":150946,"byte_end":151019,"line_start":13,"line_end":13,"column_start":1,"column_end":74}},{"value":"/ [`std::Write`] traits with the reactor that drives it.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":151020,"byte_end":151078,"line_start":14,"line_end":14,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":151079,"byte_end":151082,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ `PollEvented` uses [`Registration`] internally to take a type that","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":151083,"byte_end":151153,"line_start":16,"line_end":16,"column_start":1,"column_end":71}},{"value":"/ implements [`mio::Evented`] as well as [`std::Read`] and or [`std::Write`]","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":151154,"byte_end":151232,"line_start":17,"line_end":17,"column_start":1,"column_end":79}},{"value":"/ and associate it with a reactor that will drive it.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":151233,"byte_end":151288,"line_start":18,"line_end":18,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":151289,"byte_end":151292,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Once the [`mio::Evented`] type is wrapped by `PollEvented`, it can be","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":151293,"byte_end":151366,"line_start":20,"line_end":20,"column_start":1,"column_end":74}},{"value":"/ used from within the future's execution model. As such, the `PollEvented`","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":151367,"byte_end":151444,"line_start":21,"line_end":21,"column_start":1,"column_end":78}},{"value":"/ type provides [`AsyncRead`] and [`AsyncWrite`] implementations using the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":151445,"byte_end":151521,"line_start":22,"line_end":22,"column_start":1,"column_end":77}},{"value":"/ underlying I/O resource as well as readiness events provided by the reactor.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":151522,"byte_end":151602,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":151603,"byte_end":151606,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ **Note**: While `PollEvented` is `Sync` (if the underlying I/O type is","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":151607,"byte_end":151681,"line_start":25,"line_end":25,"column_start":1,"column_end":75}},{"value":"/ `Sync`), the caller must ensure that there are at most two tasks that use a","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":151682,"byte_end":151761,"line_start":26,"line_end":26,"column_start":1,"column_end":80}},{"value":"/ `PollEvented` instance concurrenty. One for reading and one for writing.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":151762,"byte_end":151838,"line_start":27,"line_end":27,"column_start":1,"column_end":77}},{"value":"/ While violating this requirement is \"safe\" from a Rust memory model point of","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":151839,"byte_end":151919,"line_start":28,"line_end":28,"column_start":1,"column_end":81}},{"value":"/ view, it will result in unexpected behavior in the form of lost","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":151920,"byte_end":151987,"line_start":29,"line_end":29,"column_start":1,"column_end":68}},{"value":"/ notifications and tasks hanging.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":151988,"byte_end":152024,"line_start":30,"line_end":30,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":152025,"byte_end":152028,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ ## Readiness events","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":152029,"byte_end":152052,"line_start":32,"line_end":32,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":152053,"byte_end":152056,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Besides just providing [`AsyncRead`] and [`AsyncWrite`] implementations,","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":152057,"byte_end":152133,"line_start":34,"line_end":34,"column_start":1,"column_end":77}},{"value":"/ this type also supports access to the underlying readiness event stream.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":152134,"byte_end":152210,"line_start":35,"line_end":35,"column_start":1,"column_end":77}},{"value":"/ While similar in function to what [`Registration`] provides, the semantics","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":152211,"byte_end":152289,"line_start":36,"line_end":36,"column_start":1,"column_end":79}},{"value":"/ are a bit different.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":152290,"byte_end":152314,"line_start":37,"line_end":37,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":152315,"byte_end":152318,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ Two functions are provided to access the readiness events:","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":152319,"byte_end":152381,"line_start":39,"line_end":39,"column_start":1,"column_end":63}},{"value":"/ [`poll_read_ready`] and [`poll_write_ready`]. These functions return the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":152382,"byte_end":152458,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/ current readiness state of the `PollEvented` instance. If","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":152459,"byte_end":152520,"line_start":41,"line_end":41,"column_start":1,"column_end":62}},{"value":"/ [`poll_read_ready`] indicates read readiness, immediately calling","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":152521,"byte_end":152590,"line_start":42,"line_end":42,"column_start":1,"column_end":70}},{"value":"/ [`poll_read_ready`] again will also indicate read readiness.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":152591,"byte_end":152655,"line_start":43,"line_end":43,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":152656,"byte_end":152659,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ When the operation is attempted and is unable to succeed due to the I/O","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":152660,"byte_end":152735,"line_start":45,"line_end":45,"column_start":1,"column_end":76}},{"value":"/ resource not being ready, the caller must call [`clear_read_ready`] or","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":152736,"byte_end":152810,"line_start":46,"line_end":46,"column_start":1,"column_end":75}},{"value":"/ [`clear_write_ready`]. This clears the readiness state until a new readiness","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":152811,"byte_end":152891,"line_start":47,"line_end":47,"column_start":1,"column_end":81}},{"value":"/ event is received.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":152892,"byte_end":152914,"line_start":48,"line_end":48,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":152915,"byte_end":152918,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ This allows the caller to implement additional funcitons. For example,","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":152919,"byte_end":152993,"line_start":50,"line_end":50,"column_start":1,"column_end":75}},{"value":"/ [`TcpListener`] implements poll_accept by using [`poll_read_ready`] and","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":152994,"byte_end":153069,"line_start":51,"line_end":51,"column_start":1,"column_end":76}},{"value":"/ [`clear_write_ready`].","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":153070,"byte_end":153096,"line_start":52,"line_end":52,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":153097,"byte_end":153100,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ ```rust,ignore","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":153101,"byte_end":153119,"line_start":54,"line_end":54,"column_start":1,"column_end":19}},{"value":"/ pub fn poll_accept(&mut self) -> Poll<(net::TcpStream, SocketAddr), io::Error> {","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":153120,"byte_end":153204,"line_start":55,"line_end":55,"column_start":1,"column_end":85}},{"value":"/     let ready = Ready::readable();","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":153205,"byte_end":153243,"line_start":56,"line_end":56,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":153244,"byte_end":153247,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/     try_ready!(self.poll_evented.poll_read_ready(ready));","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":153248,"byte_end":153309,"line_start":58,"line_end":58,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":153310,"byte_end":153313,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/     match self.poll_evented.get_ref().accept_std() {","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":153314,"byte_end":153370,"line_start":60,"line_end":60,"column_start":1,"column_end":57}},{"value":"/         Ok(pair) => Ok(Async::Ready(pair)),","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":153371,"byte_end":153418,"line_start":61,"line_end":61,"column_start":1,"column_end":48}},{"value":"/         Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":153419,"byte_end":153487,"line_start":62,"line_end":62,"column_start":1,"column_end":69}},{"value":"/             self.poll_evented.clear_read_ready(ready);","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":153488,"byte_end":153546,"line_start":63,"line_end":63,"column_start":1,"column_end":59}},{"value":"/             Ok(Async::NotReady)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":153547,"byte_end":153582,"line_start":64,"line_end":64,"column_start":1,"column_end":36}},{"value":"/         }","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":153583,"byte_end":153596,"line_start":65,"line_end":65,"column_start":1,"column_end":14}},{"value":"/         Err(e) => Err(e),","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":153597,"byte_end":153626,"line_start":66,"line_end":66,"column_start":1,"column_end":30}},{"value":"/     }","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":153627,"byte_end":153636,"line_start":67,"line_end":67,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":153637,"byte_end":153642,"line_start":68,"line_end":68,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":153643,"byte_end":153650,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":153651,"byte_end":153654,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ ## Platform-specific events","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":153655,"byte_end":153686,"line_start":71,"line_end":71,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":153687,"byte_end":153690,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ `PollEvented` also allows receiving platform-specific `mio::Ready` events.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":153691,"byte_end":153769,"line_start":73,"line_end":73,"column_start":1,"column_end":79}},{"value":"/ These events are included as part of the read readiness event stream. The","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":153770,"byte_end":153847,"line_start":74,"line_end":74,"column_start":1,"column_end":78}},{"value":"/ write readiness event stream is only for `Ready::writable()` events.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":153848,"byte_end":153920,"line_start":75,"line_end":75,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":153921,"byte_end":153924,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ [`std::Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":153925,"byte_end":153992,"line_start":77,"line_end":77,"column_start":1,"column_end":68}},{"value":"/ [`std::Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":153993,"byte_end":154062,"line_start":78,"line_end":78,"column_start":1,"column_end":70}},{"value":"/ [`AsyncRead`]: ../io/trait.AsyncRead.html","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":154063,"byte_end":154108,"line_start":79,"line_end":79,"column_start":1,"column_end":46}},{"value":"/ [`AsyncWrite`]: ../io/trait.AsyncWrite.html","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":154109,"byte_end":154156,"line_start":80,"line_end":80,"column_start":1,"column_end":48}},{"value":"/ [`mio::Evented`]: https://docs.rs/mio/0.6/mio/trait.Evented.html","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":154157,"byte_end":154225,"line_start":81,"line_end":81,"column_start":1,"column_end":69}},{"value":"/ [`Registration`]: struct.Registration.html","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":154226,"byte_end":154272,"line_start":82,"line_end":82,"column_start":1,"column_end":47}},{"value":"/ [`TcpListener`]: ../net/struct.TcpListener.html","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":154273,"byte_end":154324,"line_start":83,"line_end":83,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1286},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":156136,"byte_end":156139,"line_start":146,"line_end":146,"column_start":12,"column_end":15},"name":"new","qualname":"<PollEvented<E>>::new","value":"pub fn new(E) -> PollEvented<E>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `PollEvented` associated with the default reactor.\n","sig":null,"attributes":[{"value":"/ Creates a new `PollEvented` associated with the default reactor.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":156056,"byte_end":156124,"line_start":145,"line_end":145,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1287},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":156517,"byte_end":156532,"line_start":158,"line_end":158,"column_start":12,"column_end":27},"name":"new_with_handle","qualname":"<PollEvented<E>>::new_with_handle","value":"pub fn new_with_handle(E, &Handle) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `PollEvented` associated with the specified reactor.\n","sig":null,"attributes":[{"value":"/ Creates a new `PollEvented` associated with the specified reactor.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":156435,"byte_end":156505,"line_start":157,"line_end":157,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1288},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":156841,"byte_end":156848,"line_start":166,"line_end":166,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<PollEvented<E>>::get_ref","value":"pub fn get_ref(&Self) -> &E","parent":null,"children":[],"decl_id":null,"docs":" Returns a shared reference to the underlying I/O object this readiness\n stream is wrapping.\n","sig":null,"attributes":[{"value":"/ Returns a shared reference to the underlying I/O object this readiness","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":156727,"byte_end":156801,"line_start":164,"line_end":164,"column_start":5,"column_end":79}},{"value":"/ stream is wrapping.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":156806,"byte_end":156829,"line_start":165,"line_end":165,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1289},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":157024,"byte_end":157031,"line_start":172,"line_end":172,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<PollEvented<E>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut E","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying I/O object this readiness\n stream is wrapping.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying I/O object this readiness","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":156909,"byte_end":156984,"line_start":170,"line_end":170,"column_start":5,"column_end":80}},{"value":"/ stream is wrapping.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":156989,"byte_end":157012,"line_start":171,"line_end":171,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1290},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":157567,"byte_end":157577,"line_start":184,"line_end":184,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<PollEvented<E>>::into_inner","value":"pub fn into_inner(Self) -> io::Result<E>","parent":null,"children":[],"decl_id":null,"docs":" Consumes self, returning the inner I/O object","sig":null,"attributes":[{"value":"/ Consumes self, returning the inner I/O object","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":157100,"byte_end":157149,"line_start":176,"line_end":176,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":157154,"byte_end":157157,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ This function will deregister the I/O resource from the reactor before","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":157162,"byte_end":157236,"line_start":178,"line_end":178,"column_start":5,"column_end":79}},{"value":"/ returning. If the deregistration operation fails, an error is returned.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":157241,"byte_end":157316,"line_start":179,"line_end":179,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":157321,"byte_end":157324,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ Note that deregistering does not guarantee that the I/O resource can be","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":157329,"byte_end":157404,"line_start":181,"line_end":181,"column_start":5,"column_end":80}},{"value":"/ registered with a different reactor. Some I/O resource types can only be","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":157409,"byte_end":157485,"line_start":182,"line_end":182,"column_start":5,"column_end":81}},{"value":"/ associated with a single reactor instance for their lifetime.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":157490,"byte_end":157555,"line_start":183,"line_end":183,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1291},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":158561,"byte_end":158576,"line_start":211,"line_end":211,"column_start":12,"column_end":27},"name":"poll_read_ready","qualname":"<PollEvented<E>>::poll_read_ready","value":"pub fn poll_read_ready(&Self, mio::Ready) -> Poll<mio::Ready, io::Error>","parent":null,"children":[],"decl_id":null,"docs":" Check the I/O resource's read readiness state.","sig":null,"attributes":[{"value":"/ Check the I/O resource's read readiness state.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":157725,"byte_end":157775,"line_start":190,"line_end":190,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":157780,"byte_end":157783,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ The mask argument allows specifying what readiness to notify on. This","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":157788,"byte_end":157861,"line_start":192,"line_end":192,"column_start":5,"column_end":78}},{"value":"/ can be any value, including platform specific readiness, **except**","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":157866,"byte_end":157937,"line_start":193,"line_end":193,"column_start":5,"column_end":76}},{"value":"/ `writable`. HUP is always implicitly included on platforms that support","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":157942,"byte_end":158017,"line_start":194,"line_end":194,"column_start":5,"column_end":80}},{"value":"/ it.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":158022,"byte_end":158029,"line_start":195,"line_end":195,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":158034,"byte_end":158037,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ If the resource is not ready for a read then `Async::NotReady` is","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":158042,"byte_end":158111,"line_start":197,"line_end":197,"column_start":5,"column_end":74}},{"value":"/ returned and the current task is notified once a new event is received.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":158116,"byte_end":158191,"line_start":198,"line_end":198,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":158196,"byte_end":158199,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ The I/O resource will remain in a read-ready state until readiness is","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":158204,"byte_end":158277,"line_start":200,"line_end":200,"column_start":5,"column_end":78}},{"value":"/ cleared by calling [`clear_read_ready`].","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":158282,"byte_end":158326,"line_start":201,"line_end":201,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":158331,"byte_end":158334,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ [`clear_read_ready`]: #method.clear_read_ready","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":158339,"byte_end":158389,"line_start":203,"line_end":203,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":158394,"byte_end":158397,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":158402,"byte_end":158414,"line_start":205,"line_end":205,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":158419,"byte_end":158422,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ This function panics if:","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":158427,"byte_end":158455,"line_start":207,"line_end":207,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":158460,"byte_end":158463,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ * `ready` includes writable.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":158468,"byte_end":158500,"line_start":209,"line_end":209,"column_start":5,"column_end":37}},{"value":"/ * called from outside of a task context.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":158505,"byte_end":158549,"line_start":210,"line_end":210,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1292},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":159395,"byte_end":159411,"line_start":231,"line_end":231,"column_start":12,"column_end":28},"name":"clear_read_ready","qualname":"<PollEvented<E>>::clear_read_ready","value":"pub fn clear_read_ready(&Self, mio::Ready) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Clears the I/O resource's read readiness state and registers the current\n task to be notified once a read readiness event is received.","sig":null,"attributes":[{"value":"/ Clears the I/O resource's read readiness state and registers the current","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":158801,"byte_end":158877,"line_start":216,"line_end":216,"column_start":5,"column_end":81}},{"value":"/ task to be notified once a read readiness event is received.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":158882,"byte_end":158946,"line_start":217,"line_end":217,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":158951,"byte_end":158954,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ After calling this function, `poll_read_ready` will return `NotReady`","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":158959,"byte_end":159032,"line_start":219,"line_end":219,"column_start":5,"column_end":78}},{"value":"/ until a new read readiness event has been received.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":159037,"byte_end":159092,"line_start":220,"line_end":220,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":159097,"byte_end":159100,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ The `mask` argument specifies the readiness bits to clear. This may not","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":159105,"byte_end":159180,"line_start":222,"line_end":222,"column_start":5,"column_end":80}},{"value":"/ include `writable` or `hup`.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":159185,"byte_end":159217,"line_start":223,"line_end":223,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":159222,"byte_end":159225,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":159230,"byte_end":159242,"line_start":225,"line_end":225,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":159247,"byte_end":159250,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ This function panics if:","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":159255,"byte_end":159283,"line_start":227,"line_end":227,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":159288,"byte_end":159291,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ * `ready` includes writable or HUP","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":159296,"byte_end":159334,"line_start":229,"line_end":229,"column_start":5,"column_end":43}},{"value":"/ * called from outside of a task context.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":159339,"byte_end":159383,"line_start":230,"line_end":230,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1293},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":160628,"byte_end":160644,"line_start":265,"line_end":265,"column_start":12,"column_end":28},"name":"poll_write_ready","qualname":"<PollEvented<E>>::poll_write_ready","value":"pub fn poll_write_ready(&Self) -> Poll<mio::Ready, io::Error>","parent":null,"children":[],"decl_id":null,"docs":" Check the I/O resource's write readiness state.","sig":null,"attributes":[{"value":"/ Check the I/O resource's write readiness state.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":159885,"byte_end":159936,"line_start":246,"line_end":246,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":159941,"byte_end":159944,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ This always checks for writable readiness and also checks for HUP","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":159949,"byte_end":160018,"line_start":248,"line_end":248,"column_start":5,"column_end":74}},{"value":"/ readiness on platforms that support it.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":160023,"byte_end":160066,"line_start":249,"line_end":249,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":160071,"byte_end":160074,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ If the resource is not ready for a write then `Async::NotReady` is","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":160079,"byte_end":160149,"line_start":251,"line_end":251,"column_start":5,"column_end":75}},{"value":"/ returned and the current task is notified once a new event is received.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":160154,"byte_end":160229,"line_start":252,"line_end":252,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":160234,"byte_end":160237,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ The I/O resource will remain in a write-ready state until readiness is","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":160242,"byte_end":160316,"line_start":254,"line_end":254,"column_start":5,"column_end":79}},{"value":"/ cleared by calling [`clear_write_ready`].","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":160321,"byte_end":160366,"line_start":255,"line_end":255,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":160371,"byte_end":160374,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ [`clear_write_ready`]: #method.clear_write_ready","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":160379,"byte_end":160431,"line_start":257,"line_end":257,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":160436,"byte_end":160439,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":160444,"byte_end":160456,"line_start":259,"line_end":259,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":160461,"byte_end":160464,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ This function panics if:","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":160469,"byte_end":160497,"line_start":261,"line_end":261,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":160502,"byte_end":160505,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ * `ready` contains bits besides `writable` and `hup`.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":160510,"byte_end":160567,"line_start":263,"line_end":263,"column_start":5,"column_end":62}},{"value":"/ * called from outside of a task context.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":160572,"byte_end":160616,"line_start":264,"line_end":264,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1294},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":161451,"byte_end":161468,"line_start":285,"line_end":285,"column_start":12,"column_end":29},"name":"clear_write_ready","qualname":"<PollEvented<E>>::clear_write_ready","value":"pub fn clear_write_ready(&Self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Resets the I/O resource's write readiness state and registers the current\n task to be notified once a write readiness event is received.","sig":null,"attributes":[{"value":"/ Resets the I/O resource's write readiness state and registers the current","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":160879,"byte_end":160956,"line_start":273,"line_end":273,"column_start":5,"column_end":82}},{"value":"/ task to be notified once a write readiness event is received.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":160961,"byte_end":161026,"line_start":274,"line_end":274,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":161031,"byte_end":161034,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ This only clears writable readiness. HUP (on platforms that support HUP)","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":161039,"byte_end":161115,"line_start":276,"line_end":276,"column_start":5,"column_end":81}},{"value":"/ cannot be cleared as it is a final state.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":161120,"byte_end":161165,"line_start":277,"line_end":277,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":161170,"byte_end":161173,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ After calling this function, `poll_write_ready(Ready::writable())` will","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":161178,"byte_end":161253,"line_start":279,"line_end":279,"column_start":5,"column_end":80}},{"value":"/ return `NotReady` until a new read readiness event has been received.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":161258,"byte_end":161331,"line_start":280,"line_end":280,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":161336,"byte_end":161339,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":161344,"byte_end":161356,"line_start":282,"line_end":282,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":161361,"byte_end":161364,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ This function will panic if called from outside of a task context.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":161369,"byte_end":161439,"line_start":284,"line_end":284,"column_start":5,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":1538},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/timeout.rs","byte_start":166719,"byte_end":166726,"line_start":23,"line_end":23,"column_start":12,"column_end":19},"name":"Timeout","qualname":"::reactor::timeout::Timeout","value":"Timeout {  }","parent":null,"children":[{"krate":0,"index":1539}],"decl_id":null,"docs":" A future representing the notification that a timeout has occurred.","sig":null,"attributes":[{"value":"/ A future representing the notification that a timeout has occurred.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/timeout.rs","byte_start":166244,"byte_end":166315,"line_start":14,"line_end":14,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/timeout.rs","byte_start":166316,"byte_end":166319,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Timeouts are created through the `Timeout::new` or","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/timeout.rs","byte_start":166320,"byte_end":166374,"line_start":16,"line_end":16,"column_start":1,"column_end":55}},{"value":"/ `Timeout::new_at` methods indicating when a timeout should fire at.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/timeout.rs","byte_start":166375,"byte_end":166446,"line_start":17,"line_end":17,"column_start":1,"column_end":72}},{"value":"/ Note that timeouts are not intended for high resolution timers, but rather","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/timeout.rs","byte_start":166447,"byte_end":166525,"line_start":18,"line_end":18,"column_start":1,"column_end":79}},{"value":"/ they will likely fire some granularity after the exact instant that they're","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/timeout.rs","byte_start":166526,"byte_end":166605,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ otherwise indicated to fire at.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/timeout.rs","byte_start":166606,"byte_end":166641,"line_start":20,"line_end":20,"column_start":1,"column_end":36}},{"value":"must_use = \"futures do nothing unless polled\"","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/timeout.rs","byte_start":166642,"byte_end":166690,"line_start":21,"line_end":21,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1366},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/timeout.rs","byte_start":167070,"byte_end":167073,"line_start":33,"line_end":33,"column_start":12,"column_end":15},"name":"new","qualname":"<Timeout>::new","value":"pub fn new(Duration, &Handle) -> io::Result<Timeout>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new timeout which will fire at `dur` time into the future.","sig":null,"attributes":[{"value":"/ Creates a new timeout which will fire at `dur` time into the future.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/timeout.rs","byte_start":166768,"byte_end":166840,"line_start":28,"line_end":28,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/timeout.rs","byte_start":166845,"byte_end":166848,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ This function will return a Result with the actual timeout object or an","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/timeout.rs","byte_start":166853,"byte_end":166928,"line_start":30,"line_end":30,"column_start":5,"column_end":80}},{"value":"/ error. The timeout object itself is then a future which will be","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/timeout.rs","byte_start":166933,"byte_end":167000,"line_start":31,"line_end":31,"column_start":5,"column_end":72}},{"value":"/ set to fire at the specified point in the future.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/timeout.rs","byte_start":167005,"byte_end":167058,"line_start":32,"line_end":32,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1367},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/timeout.rs","byte_start":167498,"byte_end":167504,"line_start":42,"line_end":42,"column_start":12,"column_end":18},"name":"new_at","qualname":"<Timeout>::new_at","value":"pub fn new_at(Instant, &Handle) -> io::Result<Timeout>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new timeout which will fire at the time specified by `at`.","sig":null,"attributes":[{"value":"/ Creates a new timeout which will fire at the time specified by `at`.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/timeout.rs","byte_start":167196,"byte_end":167268,"line_start":37,"line_end":37,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/timeout.rs","byte_start":167273,"byte_end":167276,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ This function will return a Result with the actual timeout object or an","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/timeout.rs","byte_start":167281,"byte_end":167356,"line_start":39,"line_end":39,"column_start":5,"column_end":80}},{"value":"/ error. The timeout object itself is then a future which will be","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/timeout.rs","byte_start":167361,"byte_end":167428,"line_start":40,"line_end":40,"column_start":5,"column_end":72}},{"value":"/ set to fire at the specified point in the future.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/timeout.rs","byte_start":167433,"byte_end":167486,"line_start":41,"line_end":41,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1368},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/timeout.rs","byte_start":168364,"byte_end":168369,"line_start":61,"line_end":61,"column_start":12,"column_end":17},"name":"reset","qualname":"<Timeout>::reset","value":"pub fn reset(&mut Self, Instant)","parent":null,"children":[],"decl_id":null,"docs":" Resets this timeout to an new timeout which will fire at the time\n specified by `at`.","sig":null,"attributes":[{"value":"/ Resets this timeout to an new timeout which will fire at the time","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/timeout.rs","byte_start":167659,"byte_end":167728,"line_start":48,"line_end":48,"column_start":5,"column_end":74}},{"value":"/ specified by `at`.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/timeout.rs","byte_start":167733,"byte_end":167755,"line_start":49,"line_end":49,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/timeout.rs","byte_start":167760,"byte_end":167763,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ This method is usable even of this instance of `Timeout` has \"already","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/timeout.rs","byte_start":167768,"byte_end":167841,"line_start":51,"line_end":51,"column_start":5,"column_end":78}},{"value":"/ fired\". That is, if this future has resolved, calling this method means","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/timeout.rs","byte_start":167846,"byte_end":167921,"line_start":52,"line_end":52,"column_start":5,"column_end":80}},{"value":"/ that the future will still re-resolve at the specified instant.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/timeout.rs","byte_start":167926,"byte_end":167993,"line_start":53,"line_end":53,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/timeout.rs","byte_start":167998,"byte_end":168001,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ If `at` is in the past then this future will immediately be resolved","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/timeout.rs","byte_start":168006,"byte_end":168078,"line_start":55,"line_end":55,"column_start":5,"column_end":77}},{"value":"/ (when `poll` is called).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/timeout.rs","byte_start":168083,"byte_end":168111,"line_start":56,"line_end":56,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/timeout.rs","byte_start":168116,"byte_end":168119,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ Note that if any task is currently blocked on this future then that task","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/timeout.rs","byte_start":168124,"byte_end":168200,"line_start":58,"line_end":58,"column_start":5,"column_end":81}},{"value":"/ will be dropped. It is required to call `poll` again after this method","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/timeout.rs","byte_start":168205,"byte_end":168279,"line_start":59,"line_end":59,"column_start":5,"column_end":79}},{"value":"/ has been called to ensure that a task is blocked on this future.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/timeout.rs","byte_start":168284,"byte_end":168352,"line_start":60,"line_end":60,"column_start":5,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":1397},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/interval.rs","byte_start":169497,"byte_end":169505,"line_start":25,"line_end":25,"column_start":12,"column_end":20},"name":"Interval","qualname":"::reactor::interval::Interval","value":"Interval {  }","parent":null,"children":[{"krate":0,"index":1398}],"decl_id":null,"docs":" A stream representing notifications at fixed interval","sig":null,"attributes":[{"value":"/ A stream representing notifications at fixed interval","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/interval.rs","byte_start":168997,"byte_end":169054,"line_start":15,"line_end":15,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/interval.rs","byte_start":169055,"byte_end":169058,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Intervals are created through the `Interval::new` or","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/interval.rs","byte_start":169059,"byte_end":169115,"line_start":17,"line_end":17,"column_start":1,"column_end":57}},{"value":"/ `Interval::new_at` methods indicating when a first notification","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/interval.rs","byte_start":169116,"byte_end":169183,"line_start":18,"line_end":18,"column_start":1,"column_end":68}},{"value":"/ should be triggered and when it will be repeated.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/interval.rs","byte_start":169184,"byte_end":169237,"line_start":19,"line_end":19,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/interval.rs","byte_start":169238,"byte_end":169241,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Note that timeouts are not intended for high resolution timers, but rather","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/interval.rs","byte_start":169242,"byte_end":169320,"line_start":21,"line_end":21,"column_start":1,"column_end":79}},{"value":"/ they will likely fire some granularity after the exact instant that they're","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/interval.rs","byte_start":169321,"byte_end":169400,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"/ otherwise indicated to fire at.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/interval.rs","byte_start":169401,"byte_end":169436,"line_start":23,"line_end":23,"column_start":1,"column_end":36}},{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/interval.rs","byte_start":169437,"byte_end":169485,"line_start":24,"line_end":24,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1400},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/interval.rs","byte_start":169901,"byte_end":169904,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"new","qualname":"<Interval>::new","value":"pub fn new(Duration, &Handle) -> io::Result<Interval>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new interval which will fire at `dur` time into the future,\n and will repeat every `dur` interval after","sig":null,"attributes":[{"value":"/ Creates a new interval which will fire at `dur` time into the future,","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/interval.rs","byte_start":169552,"byte_end":169625,"line_start":30,"line_end":30,"column_start":5,"column_end":78}},{"value":"/ and will repeat every `dur` interval after","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/interval.rs","byte_start":169630,"byte_end":169676,"line_start":31,"line_end":31,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/interval.rs","byte_start":169681,"byte_end":169684,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ This function will return a future that will resolve to the actual","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/interval.rs","byte_start":169689,"byte_end":169759,"line_start":33,"line_end":33,"column_start":5,"column_end":75}},{"value":"/ interval object. The interval object itself is then a stream which will","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/interval.rs","byte_start":169764,"byte_end":169839,"line_start":34,"line_end":34,"column_start":5,"column_end":80}},{"value":"/ be set to fire at the specified intervals","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/interval.rs","byte_start":169844,"byte_end":169889,"line_start":35,"line_end":35,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1401},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/interval.rs","byte_start":170397,"byte_end":170403,"line_start":46,"line_end":46,"column_start":12,"column_end":18},"name":"new_at","qualname":"<Interval>::new_at","value":"pub fn new_at(Instant, Duration, &Handle) -> io::Result<Interval>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new interval which will fire at the time specified by `at`,\n and then will repeat every `dur` interval after","sig":null,"attributes":[{"value":"/ Creates a new interval which will fire at the time specified by `at`,","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/interval.rs","byte_start":170034,"byte_end":170107,"line_start":40,"line_end":40,"column_start":5,"column_end":78}},{"value":"/ and then will repeat every `dur` interval after","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/interval.rs","byte_start":170112,"byte_end":170163,"line_start":41,"line_end":41,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/interval.rs","byte_start":170168,"byte_end":170171,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ This function will return a future that will resolve to the actual","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/interval.rs","byte_start":170176,"byte_end":170246,"line_start":43,"line_end":43,"column_start":5,"column_end":75}},{"value":"/ timeout object. The timeout object itself is then a future which will be","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/interval.rs","byte_start":170251,"byte_end":170327,"line_start":44,"line_end":44,"column_start":5,"column_end":81}},{"value":"/ set to fire at the specified point in the future.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/interval.rs","byte_start":170332,"byte_end":170385,"line_start":45,"line_end":45,"column_start":5,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":1423},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":112724,"byte_end":112728,"line_start":46,"line_end":46,"column_start":12,"column_end":16},"name":"Core","qualname":"::reactor::Core","value":"Core {  }","parent":null,"children":[{"krate":0,"index":1424},{"krate":0,"index":1425},{"krate":0,"index":1426},{"krate":0,"index":1427},{"krate":0,"index":1428},{"krate":0,"index":1429},{"krate":0,"index":1430},{"krate":0,"index":1431},{"krate":0,"index":1432}],"decl_id":null,"docs":" An event loop.","sig":null,"attributes":[{"value":"/ An event loop.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":112354,"byte_end":112372,"line_start":39,"line_end":39,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":112373,"byte_end":112376,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ The event loop is the main source of blocking in an application which drives","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":112377,"byte_end":112457,"line_start":41,"line_end":41,"column_start":1,"column_end":81}},{"value":"/ all other I/O events and notifications happening. Each event loop can have","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":112458,"byte_end":112536,"line_start":42,"line_end":42,"column_start":1,"column_end":79}},{"value":"/ multiple handles pointing to it, each of which can then be used to create","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":112537,"byte_end":112614,"line_start":43,"line_end":43,"column_start":1,"column_end":78}},{"value":"/ various I/O objects to interact with the event loop in interesting ways.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":112615,"byte_end":112691,"line_start":44,"line_end":44,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":1547},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":113805,"byte_end":113811,"line_start":87,"line_end":87,"column_start":12,"column_end":18},"name":"CoreId","qualname":"::reactor::CoreId","value":"","parent":null,"children":[],"decl_id":null,"docs":" An unique ID for a Core","sig":null,"attributes":[{"value":"/ An unique ID for a Core","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":113550,"byte_end":113577,"line_start":80,"line_end":80,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":113578,"byte_end":113581,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ An ID by which different cores may be distinguished. Can be compared and used as an index in","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":113582,"byte_end":113678,"line_start":82,"line_end":82,"column_start":1,"column_end":97}},{"value":"/ a `HashMap`.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":113679,"byte_end":113695,"line_start":83,"line_end":83,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":113696,"byte_end":113699,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ The ID is globally unique and never reused.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":113700,"byte_end":113747,"line_start":85,"line_end":85,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":1565},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":114098,"byte_end":114104,"line_start":95,"line_end":95,"column_start":12,"column_end":18},"name":"Remote","qualname":"::reactor::Remote","value":"Remote {  }","parent":null,"children":[{"krate":0,"index":1566},{"krate":0,"index":1567},{"krate":0,"index":1568},{"krate":0,"index":1569}],"decl_id":null,"docs":" Handle to an event loop, used to construct I/O objects, send messages, and\n otherwise interact indirectly with the event loop itself.","sig":null,"attributes":[{"value":"/ Handle to an event loop, used to construct I/O objects, send messages, and","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":113821,"byte_end":113899,"line_start":89,"line_end":89,"column_start":1,"column_end":79}},{"value":"/ otherwise interact indirectly with the event loop itself.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":113900,"byte_end":113961,"line_start":90,"line_end":90,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":113962,"byte_end":113965,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ Handles can be cloned, and when cloned they will still refer to the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":113966,"byte_end":114037,"line_start":92,"line_end":92,"column_start":1,"column_end":72}},{"value":"/ same underlying event loop.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":114038,"byte_end":114069,"line_start":93,"line_end":93,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":1572},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":114403,"byte_end":114409,"line_start":105,"line_end":105,"column_start":12,"column_end":18},"name":"Handle","qualname":"::reactor::Handle","value":"Handle {  }","parent":null,"children":[{"krate":0,"index":1573},{"krate":0,"index":1574},{"krate":0,"index":1575}],"decl_id":null,"docs":" A non-sendable handle to an event loop, typically passed into functions that\n create I/O objects to bind them to this event loop.\n","sig":null,"attributes":[{"value":"/ A non-sendable handle to an event loop, typically passed into functions that","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":114238,"byte_end":114318,"line_start":102,"line_end":102,"column_start":1,"column_end":81}},{"value":"/ create I/O objects to bind them to this event loop.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":114319,"byte_end":114374,"line_start":103,"line_end":103,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1440},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":114702,"byte_end":114705,"line_start":120,"line_end":120,"column_start":12,"column_end":15},"name":"new","qualname":"<Core>::new","value":"pub fn new() -> io::Result<Core>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new event loop, returning any error that happened during the\n creation.\n","sig":null,"attributes":[{"value":"/ Creates a new event loop, returning any error that happened during the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":114598,"byte_end":114672,"line_start":118,"line_end":118,"column_start":5,"column_end":79}},{"value":"/ creation.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":114677,"byte_end":114690,"line_start":119,"line_end":119,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":1441},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":116159,"byte_end":116165,"line_start":165,"line_end":165,"column_start":12,"column_end":18},"name":"handle","qualname":"<Core>::handle","value":"pub fn handle(&Self) -> Handle","parent":null,"children":[],"decl_id":null,"docs":" Returns a handle to this event loop which cannot be sent across threads\n but can be used as a proxy to the event loop itself.","sig":null,"attributes":[{"value":"/ Returns a handle to this event loop which cannot be sent across threads","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":115805,"byte_end":115880,"line_start":159,"line_end":159,"column_start":5,"column_end":80}},{"value":"/ but can be used as a proxy to the event loop itself.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":115885,"byte_end":115941,"line_start":160,"line_end":160,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":115946,"byte_end":115949,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ Handles are cloneable and clones always refer to the same event loop.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":115954,"byte_end":116027,"line_start":162,"line_end":162,"column_start":5,"column_end":78}},{"value":"/ This handle is typically passed into functions that create I/O objects","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":116032,"byte_end":116106,"line_start":163,"line_end":163,"column_start":5,"column_end":79}},{"value":"/ to bind them to this event loop.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":116111,"byte_end":116147,"line_start":164,"line_end":164,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1442},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":116498,"byte_end":116505,"line_start":176,"line_end":176,"column_start":12,"column_end":19},"name":"runtime","qualname":"<Core>::runtime","value":"pub fn runtime(&Self) -> &tokio::runtime::Runtime","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the runtime backing the instance","sig":null,"attributes":[{"value":"/ Returns a reference to the runtime backing the instance","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":116358,"byte_end":116417,"line_start":173,"line_end":173,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":116422,"byte_end":116425,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ This provides access to the newer features of Tokio.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":116430,"byte_end":116486,"line_start":175,"line_end":175,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1443},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":116713,"byte_end":116719,"line_start":182,"line_end":182,"column_start":12,"column_end":18},"name":"remote","qualname":"<Core>::remote","value":"pub fn remote(&Self) -> Remote","parent":null,"children":[],"decl_id":null,"docs":" Generates a remote handle to this event loop which can be used to spawn\n tasks from other threads into this event loop.\n","sig":null,"attributes":[{"value":"/ Generates a remote handle to this event loop which can be used to spawn","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":116571,"byte_end":116646,"line_start":180,"line_end":180,"column_start":5,"column_end":80}},{"value":"/ tasks from other threads into this event loop.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":116651,"byte_end":116701,"line_start":181,"line_end":181,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1444},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":117942,"byte_end":117945,"line_start":210,"line_end":210,"column_start":12,"column_end":15},"name":"run","qualname":"<Core>::run","value":"pub fn run<F>(&mut Self, F) -> Result<F::Item, F::Error> where F: Future","parent":null,"children":[],"decl_id":null,"docs":" Runs a future until completion, driving the event loop while we're\n otherwise waiting for the future to complete.","sig":null,"attributes":[{"value":"/ Runs a future until completion, driving the event loop while we're","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":116938,"byte_end":117008,"line_start":191,"line_end":191,"column_start":5,"column_end":75}},{"value":"/ otherwise waiting for the future to complete.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":117013,"byte_end":117062,"line_start":192,"line_end":192,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":117067,"byte_end":117070,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ This function will begin executing the event loop and will finish once","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":117075,"byte_end":117149,"line_start":194,"line_end":194,"column_start":5,"column_end":79}},{"value":"/ the provided future is resolved. Note that the future argument here","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":117154,"byte_end":117225,"line_start":195,"line_end":195,"column_start":5,"column_end":76}},{"value":"/ crucially does not require the `'static` nor `Send` bounds. As a result","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":117230,"byte_end":117305,"line_start":196,"line_end":196,"column_start":5,"column_end":80}},{"value":"/ the future will be \"pinned\" to not only this thread but also this stack","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":117310,"byte_end":117385,"line_start":197,"line_end":197,"column_start":5,"column_end":80}},{"value":"/ frame.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":117390,"byte_end":117400,"line_start":198,"line_end":198,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":117405,"byte_end":117408,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ This function will return the value that the future resolves to once","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":117413,"byte_end":117485,"line_start":200,"line_end":200,"column_start":5,"column_end":77}},{"value":"/ the future has finished. If the future never resolves then this function","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":117490,"byte_end":117566,"line_start":201,"line_end":201,"column_start":5,"column_end":81}},{"value":"/ will never return. Any other futures spawned on this core may still be","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":117571,"byte_end":117645,"line_start":202,"line_end":202,"column_start":5,"column_end":79}},{"value":"/ incomplete when this function returns.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":117650,"byte_end":117692,"line_start":203,"line_end":203,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":117697,"byte_end":117700,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":117705,"byte_end":117717,"line_start":205,"line_end":205,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":117722,"byte_end":117725,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ This method will **not** catch panics from polling the future `f`. If","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":117730,"byte_end":117803,"line_start":207,"line_end":207,"column_start":5,"column_end":78}},{"value":"/ the future panics then it's the responsibility of the caller to catch","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":117808,"byte_end":117881,"line_start":208,"line_end":208,"column_start":5,"column_end":78}},{"value":"/ that panic and handle it as appropriate.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":117886,"byte_end":117930,"line_start":209,"line_end":209,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1446},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":119999,"byte_end":120003,"line_start":261,"line_end":261,"column_start":12,"column_end":16},"name":"turn","qualname":"<Core>::turn","value":"pub fn turn(&mut Self, Option<Duration>)","parent":null,"children":[],"decl_id":null,"docs":" Performs one iteration of the event loop, blocking on waiting for events\n for at most `max_wait` (forever if `None`).","sig":null,"attributes":[{"value":"/ Performs one iteration of the event loop, blocking on waiting for events","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":119605,"byte_end":119681,"line_start":253,"line_end":253,"column_start":5,"column_end":81}},{"value":"/ for at most `max_wait` (forever if `None`).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":119686,"byte_end":119733,"line_start":254,"line_end":254,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":119738,"byte_end":119741,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ It only makes sense to call this method if you've previously spawned","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":119746,"byte_end":119818,"line_start":256,"line_end":256,"column_start":5,"column_end":77}},{"value":"/ a future onto this event loop.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":119823,"byte_end":119857,"line_start":257,"line_end":257,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":119862,"byte_end":119865,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ `loop { core.turn(None) }` is equivalent to calling `run` with an","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":119870,"byte_end":119939,"line_start":259,"line_end":259,"column_start":5,"column_end":74}},{"value":"/ empty future (one that never finishes).","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":119944,"byte_end":119987,"line_start":260,"line_end":260,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1456},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":122785,"byte_end":122787,"line_start":334,"line_end":334,"column_start":12,"column_end":14},"name":"id","qualname":"<Core>::id","value":"pub fn id(&Self) -> CoreId","parent":null,"children":[],"decl_id":null,"docs":" Get the ID of this loop\n","sig":null,"attributes":[{"value":"/ Get the ID of this loop","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":122746,"byte_end":122773,"line_start":333,"line_end":333,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1469},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":125941,"byte_end":125946,"line_start":423,"line_end":423,"column_start":12,"column_end":17},"name":"spawn","qualname":"<Remote>::spawn","value":"pub fn spawn<F, R>(&Self, F) where F: FnOnce(&Handle) -> R + Send + 'static,\nR: IntoFuture<Item = (), Error = ()>, R::Future: 'static","parent":null,"children":[],"decl_id":null,"docs":" Spawns a new future into the event loop this remote is associated with.","sig":null,"attributes":[{"value":"/ Spawns a new future into the event loop this remote is associated with.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":125263,"byte_end":125338,"line_start":409,"line_end":409,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":125343,"byte_end":125346,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ This function takes a closure which is executed within the context of","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":125351,"byte_end":125424,"line_start":411,"line_end":411,"column_start":5,"column_end":78}},{"value":"/ the I/O loop itself. The future returned by the closure will be","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":125429,"byte_end":125496,"line_start":412,"line_end":412,"column_start":5,"column_end":72}},{"value":"/ scheduled on the event loop and run to completion.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":125501,"byte_end":125555,"line_start":413,"line_end":413,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":125560,"byte_end":125563,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ Note that while the closure, `F`, requires the `Send` bound as it might","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":125568,"byte_end":125643,"line_start":415,"line_end":415,"column_start":5,"column_end":80}},{"value":"/ cross threads, the future `R` does not.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":125648,"byte_end":125691,"line_start":416,"line_end":416,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":125696,"byte_end":125699,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":125704,"byte_end":125716,"line_start":418,"line_end":418,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":125721,"byte_end":125724,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ This method will **not** catch panics from polling the future `f`. If","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":125729,"byte_end":125802,"line_start":420,"line_end":420,"column_start":5,"column_end":78}},{"value":"/ the future panics then it's the responsibility of the caller to catch","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":125807,"byte_end":125880,"line_start":421,"line_end":421,"column_start":5,"column_end":78}},{"value":"/ that panic and handle it as appropriate.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":125885,"byte_end":125929,"line_start":422,"line_end":422,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1473},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":126327,"byte_end":126329,"line_start":435,"line_end":435,"column_start":12,"column_end":14},"name":"id","qualname":"<Remote>::id","value":"pub fn id(&Self) -> CoreId","parent":null,"children":[],"decl_id":null,"docs":" Return the ID of the represented Core\n","sig":null,"attributes":[{"value":"/ Return the ID of the represented Core","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":126274,"byte_end":126315,"line_start":434,"line_end":434,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1474},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":127105,"byte_end":127111,"line_start":451,"line_end":451,"column_start":12,"column_end":18},"name":"handle","qualname":"<Remote>::handle","value":"pub fn handle(&Self) -> Option<Handle>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to \"promote\" this remote to a handle, if possible.","sig":null,"attributes":[{"value":"/ Attempts to \"promote\" this remote to a handle, if possible.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":126384,"byte_end":126447,"line_start":439,"line_end":439,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":126452,"byte_end":126455,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ This function is intended for structures which typically work through a","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":126460,"byte_end":126535,"line_start":441,"line_end":441,"column_start":5,"column_end":80}},{"value":"/ `Remote` but want to optimize runtime when the remote doesn't actually","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":126540,"byte_end":126614,"line_start":442,"line_end":442,"column_start":5,"column_end":79}},{"value":"/ leave the thread of the original reactor. This will attempt to return a","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":126619,"byte_end":126694,"line_start":443,"line_end":443,"column_start":5,"column_end":80}},{"value":"/ handle if the `Remote` is on the same thread as the event loop and the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":126699,"byte_end":126773,"line_start":444,"line_end":444,"column_start":5,"column_end":79}},{"value":"/ event loop is running.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":126778,"byte_end":126804,"line_start":445,"line_end":445,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":126809,"byte_end":126812,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ If this `Remote` has moved to a different thread or if the event loop is","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":126817,"byte_end":126893,"line_start":447,"line_end":447,"column_start":5,"column_end":81}},{"value":"/ running, then `None` may be returned. If you need to guarantee access to","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":126898,"byte_end":126974,"line_start":448,"line_end":448,"column_start":5,"column_end":81}},{"value":"/ a `Handle`, then you can call this function and fall back to using","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":126979,"byte_end":127049,"line_start":449,"line_end":449,"column_start":5,"column_end":75}},{"value":"/ `spawn` above if it returns `None`.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":127054,"byte_end":127093,"line_start":450,"line_end":450,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1483},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":127932,"byte_end":127948,"line_start":486,"line_end":486,"column_start":12,"column_end":28},"name":"new_tokio_handle","qualname":"<Handle>::new_tokio_handle","value":"pub fn new_tokio_handle(&Self) -> &::tokio::reactor::Handle","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the new Tokio handle\n","sig":null,"attributes":[{"value":"/ Returns a reference to the new Tokio handle","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":127873,"byte_end":127920,"line_start":485,"line_end":485,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1484},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":128116,"byte_end":128122,"line_start":491,"line_end":491,"column_start":12,"column_end":18},"name":"remote","qualname":"<Handle>::remote","value":"pub fn remote(&Self) -> &Remote","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying remote handle to the event loop.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying remote handle to the event loop.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":128030,"byte_end":128104,"line_start":490,"line_end":490,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1485},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":128498,"byte_end":128503,"line_start":502,"line_end":502,"column_start":12,"column_end":17},"name":"spawn","qualname":"<Handle>::spawn","value":"pub fn spawn<F>(&Self, F) where F: Future<Item = (), Error = ()> + 'static","parent":null,"children":[],"decl_id":null,"docs":" Spawns a new future on the event loop this handle is associated with.","sig":null,"attributes":[{"value":"/ Spawns a new future on the event loop this handle is associated with.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":128175,"byte_end":128248,"line_start":495,"line_end":495,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":128253,"byte_end":128256,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":128261,"byte_end":128273,"line_start":497,"line_end":497,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":128278,"byte_end":128281,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ This method will **not** catch panics from polling the future `f`. If","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":128286,"byte_end":128359,"line_start":499,"line_end":499,"column_start":5,"column_end":78}},{"value":"/ the future panics then it's the responsibility of the caller to catch","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":128364,"byte_end":128437,"line_start":500,"line_end":500,"column_start":5,"column_end":78}},{"value":"/ that panic and handle it as appropriate.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":128442,"byte_end":128486,"line_start":501,"line_end":501,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1487},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":129342,"byte_end":129352,"line_start":529,"line_end":529,"column_start":12,"column_end":22},"name":"spawn_send","qualname":"<Handle>::spawn_send","value":"pub fn spawn_send<F>(&Self, F) where F: Future<Item = (), Error = ()> + Send +\n'static","parent":null,"children":[],"decl_id":null,"docs":" Spawns a new future onto the threadpool","sig":null,"attributes":[{"value":"/ Spawns a new future onto the threadpool","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":129104,"byte_end":129147,"line_start":523,"line_end":523,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":129152,"byte_end":129155,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":129160,"byte_end":129172,"line_start":525,"line_end":525,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":129177,"byte_end":129180,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ This function panics if the spawn fails. Failure occurs if the executor","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":129185,"byte_end":129260,"line_start":527,"line_end":527,"column_start":5,"column_end":80}},{"value":"/ is currently at capacity and is unable to spawn a new future.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":129265,"byte_end":129330,"line_start":528,"line_end":528,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1489},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":130070,"byte_end":130078,"line_start":547,"line_end":547,"column_start":12,"column_end":20},"name":"spawn_fn","qualname":"<Handle>::spawn_fn","value":"pub fn spawn_fn<F, R>(&Self, F) where F: FnOnce() -> R + 'static,\nR: IntoFuture<Item = (), Error = ()> + 'static","parent":null,"children":[],"decl_id":null,"docs":" Spawns a closure on this event loop.","sig":null,"attributes":[{"value":"/ Spawns a closure on this event loop.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":129482,"byte_end":129522,"line_start":535,"line_end":535,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":129527,"byte_end":129530,"line_start":536,"line_end":536,"column_start":5,"column_end":8}},{"value":"/ This function is a convenience wrapper around the `spawn` function above","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":129535,"byte_end":129611,"line_start":537,"line_end":537,"column_start":5,"column_end":81}},{"value":"/ for running a closure wrapped in `futures::lazy`. It will spawn the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":129616,"byte_end":129687,"line_start":538,"line_end":538,"column_start":5,"column_end":76}},{"value":"/ function `f` provided onto the event loop, and continue to run the","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":129692,"byte_end":129762,"line_start":539,"line_end":539,"column_start":5,"column_end":75}},{"value":"/ future returned by `f` on the event loop as well.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":129767,"byte_end":129820,"line_start":540,"line_end":540,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":129825,"byte_end":129828,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":129833,"byte_end":129845,"line_start":542,"line_end":542,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":129850,"byte_end":129853,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ This method will **not** catch panics from polling the future `f`. If","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":129858,"byte_end":129931,"line_start":544,"line_end":544,"column_start":5,"column_end":78}},{"value":"/ the future panics then it's the responsibility of the caller to catch","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":129936,"byte_end":130009,"line_start":545,"line_end":545,"column_start":5,"column_end":78}},{"value":"/ that panic and handle it as appropriate.","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":130014,"byte_end":130058,"line_start":546,"line_end":546,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1492},"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":130304,"byte_end":130306,"line_start":555,"line_end":555,"column_start":12,"column_end":14},"name":"id","qualname":"<Handle>::id","value":"pub fn id(&Self) -> CoreId","parent":null,"children":[],"decl_id":null,"docs":" Return the ID of the represented Core\n","sig":null,"attributes":[{"value":"/ Return the ID of the represented Core","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":130251,"byte_end":130292,"line_start":554,"line_end":554,"column_start":5,"column_end":46}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/copy.rs","byte_start":15487,"byte_end":15491,"line_start":48,"line_end":48,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":17549,"byte_end":17556,"line_start":35,"line_end":35,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":22122,"byte_end":22129,"line_start":168,"line_end":168,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":141}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":22232,"byte_end":22242,"line_start":174,"line_end":174,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":144},{"krate":0,"index":145}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":22359,"byte_end":22369,"line_start":182,"line_end":182,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":148}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":22471,"byte_end":22478,"line_start":188,"line_end":188,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":22700,"byte_end":22707,"line_start":199,"line_end":199,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":22813,"byte_end":22820,"line_start":205,"line_end":205,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":155}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":22968,"byte_end":22975,"line_start":211,"line_end":211,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":158}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":23123,"byte_end":23130,"line_start":217,"line_end":217,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":23249,"byte_end":23259,"line_start":223,"line_end":223,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":23356,"byte_end":23363,"line_start":229,"line_end":229,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":23929,"byte_end":23936,"line_start":241,"line_end":241,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":27403,"byte_end":27409,"line_start":323,"line_end":323,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":29168,"byte_end":29174,"line_start":370,"line_end":370,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":197},{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":30908,"byte_end":30914,"line_start":426,"line_end":426,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/flush.rs","byte_start":37346,"byte_end":37351,"line_start":31,"line_end":31,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_exact.rs","byte_start":38889,"byte_end":38898,"line_start":53,"line_end":53,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_to_end.rs","byte_start":40752,"byte_end":40761,"line_start":43,"line_end":43,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read.rs","byte_start":42362,"byte_end":42366,"line_start":34,"line_end":34,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_until.rs","byte_start":44312,"byte_end":44321,"line_start":48,"line_end":48,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":382}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/split.rs","byte_start":45680,"byte_end":45688,"line_start":23,"line_end":23,"column_start":13,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":413}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/split.rs","byte_start":46032,"byte_end":46041,"line_start":34,"line_end":34,"column_start":13,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/split.rs","byte_start":46400,"byte_end":46408,"line_start":45,"line_end":45,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":419}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/split.rs","byte_start":46678,"byte_end":46687,"line_start":54,"line_end":54,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":422},{"krate":0,"index":423}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":48180,"byte_end":48186,"line_start":25,"line_end":25,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":441}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":50599,"byte_end":50605,"line_start":106,"line_end":106,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":444}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":50752,"byte_end":50758,"line_start":112,"line_end":112,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":447}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/write_all.rs","byte_start":52367,"byte_end":52375,"line_start":56,"line_end":56,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":488}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":58620,"byte_end":58631,"line_start":31,"line_end":31,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":653},{"krate":0,"index":654},{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":659},{"krate":0,"index":660},{"krate":0,"index":662},{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":666},{"krate":0,"index":667}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":65734,"byte_end":65745,"line_start":213,"line_end":213,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":669}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":65865,"byte_end":65873,"line_start":219,"line_end":219,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":673}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":66851,"byte_end":66860,"line_start":252,"line_end":252,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":688},{"krate":0,"index":689},{"krate":0,"index":690},{"krate":0,"index":691},{"krate":0,"index":692},{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":696},{"krate":0,"index":698},{"krate":0,"index":699},{"krate":0,"index":700},{"krate":0,"index":701},{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":717}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":78917,"byte_end":78926,"line_start":553,"line_end":553,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":719}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":79041,"byte_end":79050,"line_start":559,"line_end":559,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":721},{"krate":0,"index":722}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":79232,"byte_end":79241,"line_start":568,"line_end":568,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":724},{"krate":0,"index":725}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":79496,"byte_end":79505,"line_start":578,"line_end":578,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":728},{"krate":0,"index":729}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":79786,"byte_end":79795,"line_start":589,"line_end":589,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":732},{"krate":0,"index":733},{"krate":0,"index":734},{"krate":0,"index":735}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":84593,"byte_end":84602,"line_start":741,"line_end":741,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":763}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":84722,"byte_end":84734,"line_start":747,"line_end":747,"column_start":17,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":765},{"krate":0,"index":766},{"krate":0,"index":767}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":84899,"byte_end":84916,"line_start":756,"line_end":756,"column_start":17,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":769},{"krate":0,"index":770},{"krate":0,"index":771}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":86485,"byte_end":86494,"line_start":799,"line_end":799,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":782}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":86616,"byte_end":86627,"line_start":805,"line_end":805,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":784}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":108033,"byte_end":108042,"line_start":68,"line_end":68,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":878},{"krate":0,"index":879},{"krate":0,"index":880}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":108465,"byte_end":108474,"line_start":81,"line_end":81,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":883},{"krate":0,"index":884},{"krate":0,"index":885},{"krate":0,"index":886},{"krate":0,"index":887}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":110124,"byte_end":110133,"line_start":140,"line_end":140,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":892},{"krate":0,"index":893},{"krate":0,"index":894}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":87610,"byte_end":87619,"line_start":18,"line_end":18,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":903},{"krate":0,"index":904},{"krate":0,"index":905},{"krate":0,"index":906},{"krate":0,"index":908},{"krate":0,"index":909},{"krate":0,"index":910},{"krate":0,"index":911},{"krate":0,"index":912},{"krate":0,"index":914},{"krate":0,"index":916},{"krate":0,"index":917},{"krate":0,"index":919},{"krate":0,"index":920},{"krate":0,"index":922},{"krate":0,"index":923},{"krate":0,"index":924},{"krate":0,"index":925},{"krate":0,"index":926},{"krate":0,"index":927},{"krate":0,"index":928},{"krate":0,"index":929},{"krate":0,"index":930},{"krate":0,"index":931},{"krate":0,"index":932},{"krate":0,"index":933},{"krate":0,"index":934},{"krate":0,"index":935},{"krate":0,"index":936},{"krate":0,"index":937}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":102863,"byte_end":102872,"line_start":392,"line_end":392,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":939}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":103347,"byte_end":103356,"line_start":408,"line_end":408,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":947},{"krate":0,"index":948},{"krate":0,"index":949}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":104255,"byte_end":104264,"line_start":436,"line_end":436,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":956},{"krate":0,"index":957},{"krate":0,"index":958}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":104894,"byte_end":104903,"line_start":460,"line_end":460,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":965}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":137316,"byte_end":137327,"line_start":83,"line_end":83,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1170},{"krate":0,"index":1171}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":138983,"byte_end":138994,"line_start":123,"line_end":123,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1174},{"krate":0,"index":1175},{"krate":0,"index":1176},{"krate":0,"index":1177},{"krate":0,"index":1178},{"krate":0,"index":1179},{"krate":0,"index":1180},{"krate":0,"index":1181},{"krate":0,"index":1182}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":147217,"byte_end":147228,"line_start":350,"line_end":350,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1185}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":147587,"byte_end":147598,"line_start":366,"line_end":366,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1188},{"krate":0,"index":1189}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":148268,"byte_end":148279,"line_start":396,"line_end":396,"column_start":29,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":148318,"byte_end":148329,"line_start":399,"line_end":399,"column_start":31,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1194}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":148474,"byte_end":148485,"line_start":406,"line_end":406,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1197},{"krate":0,"index":1198}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":150492,"byte_end":150503,"line_start":499,"line_end":499,"column_start":46,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1224}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":156018,"byte_end":156029,"line_start":142,"line_end":142,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1286},{"krate":0,"index":1287},{"krate":0,"index":1288},{"krate":0,"index":1289},{"krate":0,"index":1290},{"krate":0,"index":1291},{"krate":0,"index":1292},{"krate":0,"index":1293},{"krate":0,"index":1294},{"krate":0,"index":1295}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":162033,"byte_end":162044,"line_start":307,"line_end":307,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1298}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":162475,"byte_end":162486,"line_start":325,"line_end":325,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1301},{"krate":0,"index":1302}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":163196,"byte_end":163207,"line_start":357,"line_end":357,"column_start":23,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":163264,"byte_end":163275,"line_start":362,"line_end":362,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1307}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":165067,"byte_end":165078,"line_start":443,"line_end":443,"column_start":46,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1328}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":165267,"byte_end":165278,"line_start":451,"line_end":451,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1331}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/timeout.rs","byte_start":166754,"byte_end":166761,"line_start":27,"line_end":27,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1366},{"krate":0,"index":1367},{"krate":0,"index":1368}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/timeout.rs","byte_start":168450,"byte_end":168457,"line_start":66,"line_end":66,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1370},{"krate":0,"index":1371},{"krate":0,"index":1372}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/interval.rs","byte_start":169537,"byte_end":169545,"line_start":29,"line_end":29,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1400},{"krate":0,"index":1401}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/interval.rs","byte_start":170607,"byte_end":170615,"line_start":55,"line_end":55,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1403},{"krate":0,"index":1404},{"krate":0,"index":1405}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":114587,"byte_end":114591,"line_start":117,"line_end":117,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1440},{"krate":0,"index":1441},{"krate":0,"index":1442},{"krate":0,"index":1443},{"krate":0,"index":1444},{"krate":0,"index":1446},{"krate":0,"index":1447},{"krate":0,"index":1454},{"krate":0,"index":1455},{"krate":0,"index":1456}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":122864,"byte_end":122868,"line_start":339,"line_end":339,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1459}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":123058,"byte_end":123062,"line_start":347,"line_end":347,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1461}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":123222,"byte_end":123228,"line_start":355,"line_end":355,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1463},{"krate":0,"index":1465},{"krate":0,"index":1469},{"krate":0,"index":1473},{"krate":0,"index":1474}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":127480,"byte_end":127486,"line_start":467,"line_end":467,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1478}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":127692,"byte_end":127698,"line_start":476,"line_end":476,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1481}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":127860,"byte_end":127866,"line_start":484,"line_end":484,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1483},{"krate":0,"index":1484},{"krate":0,"index":1485},{"krate":0,"index":1487},{"krate":0,"index":1489},{"krate":0,"index":1492}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":130384,"byte_end":130390,"line_start":560,"line_end":560,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1495}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":130585,"byte_end":130591,"line_start":569,"line_end":569,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1497}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":130826,"byte_end":130834,"line_start":582,"line_end":582,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1502},{"krate":0,"index":1503}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":131087,"byte_end":131095,"line_start":595,"line_end":595,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1505}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":131351,"byte_end":131352,"line_start":606,"line_end":606,"column_start":51,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1510}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":3910,"byte_end":3912,"line_start":117,"line_end":117,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":14}},{"kind":"Mod","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":3955,"byte_end":3958,"line_start":121,"line_end":121,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":577}},{"kind":"Mod","span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/lib.rs","byte_start":3968,"byte_end":3975,"line_start":122,"line_end":122,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":996}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/copy.rs","byte_start":15487,"byte_end":15491,"line_start":48,"line_end":48,"column_start":23,"column_end":27},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":57},"to":{"krate":23,"index":730}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":17549,"byte_end":17556,"line_start":35,"line_end":35,"column_start":6,"column_end":13},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1529},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":22122,"byte_end":22129,"line_start":168,"line_end":168,"column_start":22,"column_end":29},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1529},"to":{"krate":2,"index":2722}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":22232,"byte_end":22242,"line_start":174,"line_end":174,"column_start":20,"column_end":30},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":126},"to":{"krate":2,"index":3029}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":22359,"byte_end":22369,"line_start":182,"line_end":182,"column_start":23,"column_end":33},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":126},"to":{"krate":2,"index":3042}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":22471,"byte_end":22478,"line_start":188,"line_end":188,"column_start":24,"column_end":31},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1529},"to":{"krate":2,"index":2731}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":22700,"byte_end":22707,"line_start":199,"line_end":199,"column_start":39,"column_end":46},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1529},"to":{"krate":2,"index":2480}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":22813,"byte_end":22820,"line_start":205,"line_end":205,"column_start":14,"column_end":21},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1529},"to":{"krate":2,"index":2512}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":22968,"byte_end":22975,"line_start":211,"line_end":211,"column_start":40,"column_end":47},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1529},"to":{"krate":2,"index":2523}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":23123,"byte_end":23130,"line_start":217,"line_end":217,"column_start":21,"column_end":28},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1529},"to":{"krate":2,"index":8962}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":23249,"byte_end":23259,"line_start":223,"line_end":223,"column_start":19,"column_end":29},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":126},"to":{"krate":2,"index":3053}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":23356,"byte_end":23363,"line_start":229,"line_end":229,"column_start":21,"column_end":28},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1529},"to":{"krate":2,"index":8756}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":23929,"byte_end":23936,"line_start":241,"line_end":241,"column_start":24,"column_end":31},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1529},"to":{"krate":2,"index":2728}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":27403,"byte_end":27409,"line_start":323,"line_end":323,"column_start":34,"column_end":40},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":175},"to":{"krate":23,"index":2068}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":29168,"byte_end":29174,"line_start":370,"line_end":370,"column_start":32,"column_end":38},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":175},"to":{"krate":23,"index":2548}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/frame.rs","byte_start":30908,"byte_end":30914,"line_start":426,"line_end":426,"column_start":12,"column_end":18},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":175},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/flush.rs","byte_start":37346,"byte_end":37351,"line_start":31,"line_end":31,"column_start":20,"column_end":25},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":226},"to":{"krate":23,"index":730}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_exact.rs","byte_start":38889,"byte_end":38898,"line_start":53,"line_end":53,"column_start":23,"column_end":32},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":254},"to":{"krate":23,"index":730}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_to_end.rs","byte_start":40752,"byte_end":40761,"line_start":43,"line_end":43,"column_start":20,"column_end":29},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":295},"to":{"krate":23,"index":730}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read.rs","byte_start":42362,"byte_end":42366,"line_start":34,"line_end":34,"column_start":23,"column_end":27},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":334},"to":{"krate":23,"index":730}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/read_until.rs","byte_start":44312,"byte_end":44321,"line_start":48,"line_end":48,"column_start":20,"column_end":29},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":365},"to":{"krate":23,"index":730}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/split.rs","byte_start":45680,"byte_end":45688,"line_start":23,"line_end":23,"column_start":13,"column_end":21},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":403},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/split.rs","byte_start":46032,"byte_end":46041,"line_start":34,"line_end":34,"column_start":13,"column_end":22},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":406},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/split.rs","byte_start":46400,"byte_end":46408,"line_start":45,"line_end":45,"column_start":24,"column_end":32},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":403},"to":{"krate":1,"index":4256}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/split.rs","byte_start":46678,"byte_end":46687,"line_start":54,"line_end":54,"column_start":26,"column_end":35},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":406},"to":{"krate":1,"index":4317}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":48180,"byte_end":48186,"line_start":25,"line_end":25,"column_start":22,"column_end":28},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":428},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":50599,"byte_end":50605,"line_start":106,"line_end":106,"column_start":38,"column_end":44},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":428},"to":{"krate":2,"index":2722}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/window.rs","byte_start":50752,"byte_end":50758,"line_start":112,"line_end":112,"column_start":38,"column_end":44},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":428},"to":{"krate":2,"index":2725}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/write_all.rs","byte_start":52367,"byte_end":52375,"line_start":56,"line_end":56,"column_start":23,"column_end":31},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":466},"to":{"krate":23,"index":730}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":6633,"byte_end":6637,"line_start":77,"line_end":77,"column_start":19,"column_end":23},"kind":"SuperTrait","from":{"krate":1,"index":4256},"to":{"krate":0,"index":561}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/io/mod.rs","byte_start":6644,"byte_end":6649,"line_start":77,"line_end":77,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":4317},"to":{"krate":0,"index":561}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":58620,"byte_end":58631,"line_start":31,"line_end":31,"column_start":6,"column_end":17},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":648},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":65734,"byte_end":65745,"line_start":213,"line_end":213,"column_start":21,"column_end":32},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":648},"to":{"krate":2,"index":8756}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":65865,"byte_end":65873,"line_start":219,"line_end":219,"column_start":17,"column_end":25},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":650},"to":{"krate":23,"index":2068}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":66851,"byte_end":66860,"line_start":252,"line_end":252,"column_start":6,"column_end":15},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":674},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":78917,"byte_end":78926,"line_start":553,"line_end":553,"column_start":15,"column_end":24},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":674},"to":{"krate":1,"index":4256}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":79041,"byte_end":79050,"line_start":559,"line_end":559,"column_start":16,"column_end":25},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":674},"to":{"krate":1,"index":4317}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":79232,"byte_end":79241,"line_start":568,"line_end":568,"column_start":20,"column_end":29},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":674},"to":{"krate":33,"index":901}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":79496,"byte_end":79505,"line_start":578,"line_end":578,"column_start":21,"column_end":30},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":674},"to":{"krate":33,"index":936}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":79786,"byte_end":79795,"line_start":589,"line_end":589,"column_start":19,"column_end":28},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":674},"to":{"krate":0,"index":561}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":84593,"byte_end":84602,"line_start":741,"line_end":741,"column_start":21,"column_end":30},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":674},"to":{"krate":2,"index":8756}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":84722,"byte_end":84734,"line_start":747,"line_end":747,"column_start":17,"column_end":29},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":676},"to":{"krate":23,"index":730}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":84899,"byte_end":84916,"line_start":756,"line_end":756,"column_start":17,"column_end":34},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":678},"to":{"krate":23,"index":730}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":86485,"byte_end":86494,"line_start":799,"line_end":799,"column_start":22,"column_end":31},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":674},"to":{"krate":1,"index":11196}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/tcp.rs","byte_start":86616,"byte_end":86627,"line_start":805,"line_end":805,"column_start":22,"column_end":33},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":648},"to":{"krate":1,"index":11196}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":108033,"byte_end":108042,"line_start":68,"line_end":68,"column_start":30,"column_end":39},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":868},"to":{"krate":23,"index":2068}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":108465,"byte_end":108474,"line_start":81,"line_end":81,"column_start":28,"column_end":37},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":868},"to":{"krate":23,"index":2548}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/frame.rs","byte_start":110124,"byte_end":110133,"line_start":140,"line_end":140,"column_start":9,"column_end":18},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":868},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":87610,"byte_end":87619,"line_start":18,"line_end":18,"column_start":6,"column_end":15},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":825},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":102863,"byte_end":102872,"line_start":392,"line_end":392,"column_start":21,"column_end":30},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":825},"to":{"krate":2,"index":8756}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":103347,"byte_end":103356,"line_start":408,"line_end":408,"column_start":20,"column_end":29},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":940},"to":{"krate":23,"index":730}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":104255,"byte_end":104264,"line_start":436,"line_end":436,"column_start":20,"column_end":29},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":950},"to":{"krate":23,"index":730}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/net/udp/mod.rs","byte_start":104894,"byte_end":104903,"line_start":460,"line_end":460,"column_start":22,"column_end":31},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":825},"to":{"krate":1,"index":11196}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":137316,"byte_end":137327,"line_start":83,"line_end":83,"column_start":18,"column_end":29},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1159},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":138983,"byte_end":138994,"line_start":123,"line_end":123,"column_start":9,"column_end":20},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1159},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":147217,"byte_end":147228,"line_start":350,"line_end":350,"column_start":24,"column_end":35},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1159},"to":{"krate":1,"index":4256}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":147587,"byte_end":147598,"line_start":366,"line_end":366,"column_start":26,"column_end":37},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1159},"to":{"krate":1,"index":4317}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":148268,"byte_end":148279,"line_start":396,"line_end":396,"column_start":29,"column_end":40},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1159},"to":{"krate":33,"index":901}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":148318,"byte_end":148329,"line_start":399,"line_end":399,"column_start":31,"column_end":42},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1159},"to":{"krate":33,"index":936}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":148474,"byte_end":148485,"line_start":406,"line_end":406,"column_start":36,"column_end":47},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1159},"to":{"krate":0,"index":561}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented.rs","byte_start":150492,"byte_end":150503,"line_start":499,"line_end":499,"column_start":46,"column_end":57},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1159},"to":{"krate":2,"index":8756}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":156018,"byte_end":156029,"line_start":142,"line_end":142,"column_start":9,"column_end":20},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1275},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":162033,"byte_end":162044,"line_start":307,"line_end":307,"column_start":18,"column_end":29},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1275},"to":{"krate":1,"index":4256}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":162475,"byte_end":162486,"line_start":325,"line_end":325,"column_start":19,"column_end":30},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1275},"to":{"krate":1,"index":4317}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":163196,"byte_end":163207,"line_start":357,"line_end":357,"column_start":23,"column_end":34},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1275},"to":{"krate":33,"index":901}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":163264,"byte_end":163275,"line_start":362,"line_end":362,"column_start":24,"column_end":35},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1275},"to":{"krate":33,"index":936}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":165067,"byte_end":165078,"line_start":443,"line_end":443,"column_start":46,"column_end":57},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1275},"to":{"krate":2,"index":8756}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/poll_evented2.rs","byte_start":165267,"byte_end":165278,"line_start":451,"line_end":451,"column_start":27,"column_end":38},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1275},"to":{"krate":2,"index":3053}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/timeout.rs","byte_start":166754,"byte_end":166761,"line_start":27,"line_end":27,"column_start":6,"column_end":13},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1538},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/timeout.rs","byte_start":168450,"byte_end":168457,"line_start":66,"line_end":66,"column_start":17,"column_end":24},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1538},"to":{"krate":23,"index":730}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/interval.rs","byte_start":169537,"byte_end":169545,"line_start":29,"line_end":29,"column_start":6,"column_end":14},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1397},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/interval.rs","byte_start":170607,"byte_end":170615,"line_start":55,"line_end":55,"column_start":17,"column_end":25},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1397},"to":{"krate":23,"index":2068}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":114587,"byte_end":114591,"line_start":117,"line_end":117,"column_start":6,"column_end":10},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1423},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":122864,"byte_end":122868,"line_start":339,"line_end":339,"column_start":25,"column_end":29},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1423},"to":{"krate":23,"index":812}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":123058,"byte_end":123062,"line_start":347,"line_end":347,"column_start":21,"column_end":25},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1423},"to":{"krate":2,"index":8756}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":123222,"byte_end":123228,"line_start":355,"line_end":355,"column_start":6,"column_end":12},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1565},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":127480,"byte_end":127486,"line_start":467,"line_end":467,"column_start":25,"column_end":31},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1565},"to":{"krate":23,"index":812}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":127692,"byte_end":127698,"line_start":476,"line_end":476,"column_start":21,"column_end":27},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1565},"to":{"krate":2,"index":8756}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":127860,"byte_end":127866,"line_start":484,"line_end":484,"column_start":6,"column_end":12},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1572},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":130384,"byte_end":130390,"line_start":560,"line_end":560,"column_start":25,"column_end":31},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1572},"to":{"krate":23,"index":812}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":130585,"byte_end":130591,"line_start":569,"line_end":569,"column_start":21,"column_end":27},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1572},"to":{"krate":2,"index":8756}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":130826,"byte_end":130834,"line_start":582,"line_end":582,"column_start":6,"column_end":14},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1498},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":131087,"byte_end":131095,"line_start":595,"line_end":595,"column_start":17,"column_end":25},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1498},"to":{"krate":23,"index":3222}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":131236,"byte_end":131240,"line_start":602,"line_end":602,"column_start":14,"column_end":18},"kind":"SuperTrait","from":{"krate":2,"index":2825},"to":{"krate":0,"index":1506}},{"span":{"file_name":"/home/fco/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-core-0.1.18/src/reactor/mod.rs","byte_start":131351,"byte_end":131352,"line_start":606,"line_end":606,"column_start":51,"column_end":52},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1509},"to":{"krate":0,"index":1506}}]}